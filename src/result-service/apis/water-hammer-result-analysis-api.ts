/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { BaseTimeseriesOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * WaterHammerResultAnalysisApi - axios parameter creator
 * @export
 */
export const WaterHammerResultAnalysisApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 根据方案id获取全管网水锤流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerFlowDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisWaterHammerFlowDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/water-hammer/flow-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerPressureDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisWaterHammerPressureDynamicGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/water-hammer/pressure-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取单个管网的水锤模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerTimeseriesGet: async (
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisWaterHammerTimeseriesGet', 'modelId', modelId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisWaterHammerTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/water-hammer/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (dataType !== undefined) {
        localVarQueryParameter['DataType'] = dataType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerVelocityDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisWaterHammerVelocityDynamicGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/water-hammer/velocity-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WaterHammerResultAnalysisApi - functional programming interface
 * @export
 */
export const WaterHammerResultAnalysisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WaterHammerResultAnalysisApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据方案id获取全管网水锤流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisWaterHammerFlowDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisWaterHammerFlowDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisWaterHammerPressureDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisWaterHammerPressureDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取单个管网的水锤模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisWaterHammerTimeseriesGet(
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisWaterHammerTimeseriesGet(
          modelId,
          scenarioId,
          dataType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WaterHammerResultAnalysisApi - factory interface
 * @export
 */
export const WaterHammerResultAnalysisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WaterHammerResultAnalysisApiFp(configuration)
  return {
    /**
     *
     * @summary 根据方案id获取全管网水锤流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerFlowDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisWaterHammerFlowDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerPressureDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisWaterHammerPressureDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取单个管网的水锤模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerTimeseriesGet(
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultAnalysisWaterHammerTimeseriesGet(modelId, scenarioId, dataType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水锤流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WaterHammerResultAnalysisApi - object-oriented interface
 * @export
 * @class WaterHammerResultAnalysisApi
 * @extends {BaseAPI}
 */
export class WaterHammerResultAnalysisApi extends BaseAPI {
  /**
   *
   * @summary 根据方案id获取全管网水锤流量模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WaterHammerResultAnalysisApi
   */
  public apiV1ResultAnalysisWaterHammerFlowDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return WaterHammerResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisWaterHammerFlowDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水锤压力模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WaterHammerResultAnalysisApi
   */
  public apiV1ResultAnalysisWaterHammerPressureDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return WaterHammerResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisWaterHammerPressureDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取单个管网的水锤模拟结果
   * @param {string} modelId 模型id
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [dataType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WaterHammerResultAnalysisApi
   */
  public apiV1ResultAnalysisWaterHammerTimeseriesGet(
    modelId: string,
    scenarioId: string,
    dataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return WaterHammerResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisWaterHammerTimeseriesGet(modelId, scenarioId, dataType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水锤流速模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WaterHammerResultAnalysisApi
   */
  public apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return WaterHammerResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisWaterHammerVelocityDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
