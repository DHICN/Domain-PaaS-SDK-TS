/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { BaseTimeseriesOutput } from '../models'
// @ts-ignore
import { M2DByRangeTimeInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * M2DApi - axios parameter creator
 * @export
 */
export const M2DApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByRangeTimePost: async (
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/2d/by-range-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        m2DByRangeTimeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByRangeTimeWithElementsPost: async (
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/2d/by-range-time-with-elements`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        m2DByRangeTimeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByTimeGet: async (
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'time' is not null or undefined
      assertParamExists('apiV1Result2dByTimeGet', 'time', time)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dByTimeGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/by-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (time !== undefined) {
        localVarQueryParameter['Time'] = time
      }

      if (elementIds !== undefined) {
        localVarQueryParameter['ElementIds'] = elementIds
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量，结果以文件流的形式返回 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time. Result will be returned as file stream.
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByTimeStreamGet: async (
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'time' is not null or undefined
      assertParamExists('apiV1Result2dByTimeStreamGet', 'time', time)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dByTimeStreamGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/by-time/stream`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (time !== undefined) {
        localVarQueryParameter['Time'] = time
      }

      if (elementIds !== undefined) {
        localVarQueryParameter['ElementIds'] = elementIds
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 已弃用，可使用by-time或by-range-time来替代 Use by-time or by-range-time instead.
     * @summary 获取二维动态结果 Get 2D dynamic results
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {number} frequency 查询结果的时间频率 time frequency used to get result
     * @param {string} startTime 查询结果的开始时间 start time used to get result
     * @param {string} endTime 查询结果的结束时间 end time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1Result2dDynamicGet: async (
      m2DDataType: string,
      frequency: number,
      startTime: string,
      endTime: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'm2DDataType' is not null or undefined
      assertParamExists('apiV1Result2dDynamicGet', 'm2DDataType', m2DDataType)
      // verify required parameter 'frequency' is not null or undefined
      assertParamExists('apiV1Result2dDynamicGet', 'frequency', frequency)
      // verify required parameter 'startTime' is not null or undefined
      assertParamExists('apiV1Result2dDynamicGet', 'startTime', startTime)
      // verify required parameter 'endTime' is not null or undefined
      assertParamExists('apiV1Result2dDynamicGet', 'endTime', endTime)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (m2DDataType !== undefined) {
        localVarQueryParameter['M2DDataType'] = m2DDataType
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (elementIds !== undefined) {
        localVarQueryParameter['ElementIds'] = elementIds
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取所有有出现积水的网格ID列表（三角网格dfsu文件返回的是elementid，正交网格dfs2文件返回的是j,k）Get all element ids(for dfsu) or grid ids (for dfs2,format:j,k), water depth of which are above 0
     * @summary 获取有积水的二维网格的ID列表 Get 2d result model feature ids
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dMuidsGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dMuidsGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/muids`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取二维网格上的统计结果，包括最大积水深度（单位：米）、积水历时（单位：小时）、最大内涝风险等，结果以文件流的形式返回 Get 2D statistic results including max water depth (unit: m), waterlogging duration (unit: hour), max flood risk, of a flood scenario, return statistic value for each grid. Result will be returned as file stream.
     * @summary 获取二维统计结果 Get 2D statistic results
     * @param {string} m2DStatisticType 二维统计结果类型 2D statistic type:  0-MaxWaterDepth;  1-FloodDuration;  2-FloodRisk;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dStaticStreamGet: async (
      m2DStatisticType: string,
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'm2DStatisticType' is not null or undefined
      assertParamExists('apiV1Result2dStaticStreamGet', 'm2DStatisticType', m2DStatisticType)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dStaticStreamGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/static/stream`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (m2DStatisticType !== undefined) {
        localVarQueryParameter['M2DStatisticType'] = m2DStatisticType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个网格上的水深时间序列结果数据 Get water depth time series result on a single mesh cell of a scenario.
     * @summary 获取单个网格的时间序列结果 Get time series result on a single cell
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {string} elementID 网格编号 element id or grid id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dTimeseriesGet: async (
      m2DDataType: string,
      elementID: string,
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'm2DDataType' is not null or undefined
      assertParamExists('apiV1Result2dTimeseriesGet', 'm2DDataType', m2DDataType)
      // verify required parameter 'elementID' is not null or undefined
      assertParamExists('apiV1Result2dTimeseriesGet', 'elementID', elementID)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1Result2dTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/2d/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (m2DDataType !== undefined) {
        localVarQueryParameter['M2DDataType'] = m2DDataType
      }

      if (elementID !== undefined) {
        localVarQueryParameter['ElementID'] = elementID
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * M2DApi - functional programming interface
 * @export
 */
export const M2DApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = M2DApiAxiosParamCreator(configuration)
  return {
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dByRangeTimePost(
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dByRangeTimePost(
        m2DByRangeTimeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dByRangeTimeWithElementsPost(
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1Result2dByRangeTimeWithElementsPost(
          m2DByRangeTimeInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dByTimeGet(
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dByTimeGet(
        time,
        scenarioId,
        elementIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量，结果以文件流的形式返回 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time. Result will be returned as file stream.
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dByTimeStreamGet(
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dByTimeStreamGet(
        time,
        scenarioId,
        elementIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 已弃用，可使用by-time或by-range-time来替代 Use by-time or by-range-time instead.
     * @summary 获取二维动态结果 Get 2D dynamic results
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {number} frequency 查询结果的时间频率 time frequency used to get result
     * @param {string} startTime 查询结果的开始时间 start time used to get result
     * @param {string} endTime 查询结果的结束时间 end time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1Result2dDynamicGet(
      m2DDataType: string,
      frequency: number,
      startTime: string,
      endTime: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dDynamicGet(
        m2DDataType,
        frequency,
        startTime,
        endTime,
        scenarioId,
        elementIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取所有有出现积水的网格ID列表（三角网格dfsu文件返回的是elementid，正交网格dfs2文件返回的是j,k）Get all element ids(for dfsu) or grid ids (for dfs2,format:j,k), water depth of which are above 0
     * @summary 获取有积水的二维网格的ID列表 Get 2d result model feature ids
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dMuidsGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dMuidsGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取二维网格上的统计结果，包括最大积水深度（单位：米）、积水历时（单位：小时）、最大内涝风险等，结果以文件流的形式返回 Get 2D statistic results including max water depth (unit: m), waterlogging duration (unit: hour), max flood risk, of a flood scenario, return statistic value for each grid. Result will be returned as file stream.
     * @summary 获取二维统计结果 Get 2D statistic results
     * @param {string} m2DStatisticType 二维统计结果类型 2D statistic type:  0-MaxWaterDepth;  1-FloodDuration;  2-FloodRisk;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dStaticStreamGet(
      m2DStatisticType: string,
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dStaticStreamGet(
        m2DStatisticType,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个网格上的水深时间序列结果数据 Get water depth time series result on a single mesh cell of a scenario.
     * @summary 获取单个网格的时间序列结果 Get time series result on a single cell
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {string} elementID 网格编号 element id or grid id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1Result2dTimeseriesGet(
      m2DDataType: string,
      elementID: string,
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1Result2dTimeseriesGet(
        m2DDataType,
        elementID,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * M2DApi - factory interface
 * @export
 */
export const M2DApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = M2DApiFp(configuration)
  return {
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByRangeTimePost(
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1Result2dByRangeTimePost(m2DByRangeTimeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
     * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
     * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByRangeTimeWithElementsPost(
      m2DByRangeTimeInput?: M2DByRangeTimeInput,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1Result2dByRangeTimeWithElementsPost(m2DByRangeTimeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByTimeGet(
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1Result2dByTimeGet(time, scenarioId, elementIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量，结果以文件流的形式返回 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time. Result will be returned as file stream.
     * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
     * @param {string} time 结果查询的时刻 time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dByTimeStreamGet(
      time: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1Result2dByTimeStreamGet(time, scenarioId, elementIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 已弃用，可使用by-time或by-range-time来替代 Use by-time or by-range-time instead.
     * @summary 获取二维动态结果 Get 2D dynamic results
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {number} frequency 查询结果的时间频率 time frequency used to get result
     * @param {string} startTime 查询结果的开始时间 start time used to get result
     * @param {string} endTime 查询结果的结束时间 end time used to get result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1Result2dDynamicGet(
      m2DDataType: string,
      frequency: number,
      startTime: string,
      endTime: string,
      scenarioId: string,
      elementIds?: Array<string>,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1Result2dDynamicGet(
          m2DDataType,
          frequency,
          startTime,
          endTime,
          scenarioId,
          elementIds,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取所有有出现积水的网格ID列表（三角网格dfsu文件返回的是elementid，正交网格dfs2文件返回的是j,k）Get all element ids(for dfsu) or grid ids (for dfs2,format:j,k), water depth of which are above 0
     * @summary 获取有积水的二维网格的ID列表 Get 2d result model feature ids
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dMuidsGet(scenarioId: string, options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .apiV1Result2dMuidsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取二维网格上的统计结果，包括最大积水深度（单位：米）、积水历时（单位：小时）、最大内涝风险等，结果以文件流的形式返回 Get 2D statistic results including max water depth (unit: m), waterlogging duration (unit: hour), max flood risk, of a flood scenario, return statistic value for each grid. Result will be returned as file stream.
     * @summary 获取二维统计结果 Get 2D statistic results
     * @param {string} m2DStatisticType 二维统计结果类型 2D statistic type:  0-MaxWaterDepth;  1-FloodDuration;  2-FloodRisk;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dStaticStreamGet(
      m2DStatisticType: string,
      scenarioId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1Result2dStaticStreamGet(m2DStatisticType, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个网格上的水深时间序列结果数据 Get water depth time series result on a single mesh cell of a scenario.
     * @summary 获取单个网格的时间序列结果 Get time series result on a single cell
     * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
     * @param {string} elementID 网格编号 element id or grid id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1Result2dTimeseriesGet(
      m2DDataType: string,
      elementID: string,
      scenarioId: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1Result2dTimeseriesGet(m2DDataType, elementID, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * M2DApi - object-oriented interface
 * @export
 * @class M2DApi
 * @extends {BaseAPI}
 */
export class M2DApi extends BaseAPI {
  /**
   * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
   * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
   * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dByRangeTimePost(
    m2DByRangeTimeInput?: M2DByRangeTimeInput,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dByRangeTimePost(m2DByRangeTimeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取特定时间段内的二维动态结果，其中ElementIds用于进一步过滤结果，单次查询不能超过1000个网格，以减少单次访问返回的数据量 Get 2D dynamic results for a specified time range, and ElementIds must be used to filter the result to no more than 1000 elements, thus reduce the data amount returned one time
   * @summary 获取时间段内的二维动态结果 Get 2D dynamic results for a specified time range
   * @param {M2DByRangeTimeInput} [m2DByRangeTimeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dByRangeTimeWithElementsPost(
    m2DByRangeTimeInput?: M2DByRangeTimeInput,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dByRangeTimeWithElementsPost(m2DByRangeTimeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time
   * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
   * @param {string} time 结果查询的时刻 time used to get result
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dByTimeGet(
    time: string,
    scenarioId: string,
    elementIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dByTimeGet(time, scenarioId, elementIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个时刻的二维动态结果，其中ElementIds可用于进一步过滤结果以减少单次访问返回的数据量，结果以文件流的形式返回 Get 2D dynamic results of a single time step, meanwhile element ids can be used to filter the result and reduce the data amount returned one time. Result will be returned as file stream.
   * @summary 获取单个时刻的二维动态结果 Get 2D dynamic results of a single time step
   * @param {string} time 结果查询的时刻 time used to get result
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dByTimeStreamGet(
    time: string,
    scenarioId: string,
    elementIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dByTimeStreamGet(time, scenarioId, elementIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 已弃用，可使用by-time或by-range-time来替代 Use by-time or by-range-time instead.
   * @summary 获取二维动态结果 Get 2D dynamic results
   * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
   * @param {number} frequency 查询结果的时间频率 time frequency used to get result
   * @param {string} startTime 查询结果的开始时间 start time used to get result
   * @param {string} endTime 查询结果的结束时间 end time used to get result
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [elementIds] 搜索的网格编号列表 search element ids or grid ids
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dDynamicGet(
    m2DDataType: string,
    frequency: number,
    startTime: string,
    endTime: string,
    scenarioId: string,
    elementIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dDynamicGet(
        m2DDataType,
        frequency,
        startTime,
        endTime,
        scenarioId,
        elementIds,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取所有有出现积水的网格ID列表（三角网格dfsu文件返回的是elementid，正交网格dfs2文件返回的是j,k）Get all element ids(for dfsu) or grid ids (for dfs2,format:j,k), water depth of which are above 0
   * @summary 获取有积水的二维网格的ID列表 Get 2d result model feature ids
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dMuidsGet(scenarioId: string, options?: AxiosRequestConfig) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dMuidsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取二维网格上的统计结果，包括最大积水深度（单位：米）、积水历时（单位：小时）、最大内涝风险等，结果以文件流的形式返回 Get 2D statistic results including max water depth (unit: m), waterlogging duration (unit: hour), max flood risk, of a flood scenario, return statistic value for each grid. Result will be returned as file stream.
   * @summary 获取二维统计结果 Get 2D statistic results
   * @param {string} m2DStatisticType 二维统计结果类型 2D statistic type:  0-MaxWaterDepth;  1-FloodDuration;  2-FloodRisk;
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dStaticStreamGet(
    m2DStatisticType: string,
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dStaticStreamGet(m2DStatisticType, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个网格上的水深时间序列结果数据 Get water depth time series result on a single mesh cell of a scenario.
   * @summary 获取单个网格的时间序列结果 Get time series result on a single cell
   * @param {string} m2DDataType 二维结果类型 2D result type:  0-WaterDepth
   * @param {string} elementID 网格编号 element id or grid id
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof M2DApi
   */
  public apiV1Result2dTimeseriesGet(
    m2DDataType: string,
    elementID: string,
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return M2DApiFp(this.configuration)
      .apiV1Result2dTimeseriesGet(m2DDataType, elementID, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
