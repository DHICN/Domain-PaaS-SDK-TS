/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CsCurrentModelOutput } from '../models'
// @ts-ignore
import { CsHistoryModelOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * UrbanCsResultAnalysisApi - axios parameter creator
 * @export
 */
export const UrbanCsResultAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流量模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet: async (
      scenarioId?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetAllWaterFillingModelResultFlow`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算充满度模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet: async (
      scenarioId?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetAllWaterFillingModelResult`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流速模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet: async (
      scenarioId?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetAllWaterFillingModelResultVelocity`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内充满度
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet: async (
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetWaterFillingModelResultByMuid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流量
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet: async (
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetWaterFillingModelResultFlowByMuid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流速
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet: async (
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/urban-cs/result-analysis/GetWaterFillingModelResultVelocityByMuid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UrbanCsResultAnalysisApi - functional programming interface
 * @export
 */
export const UrbanCsResultAnalysisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UrbanCsResultAnalysisApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流量模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
      scenarioId?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsCurrentModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
          scenarioId,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算充满度模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
      scenarioId?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsCurrentModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
          scenarioId,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流速模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
      scenarioId?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsCurrentModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
          scenarioId,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内充满度
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsHistoryModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流量
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsHistoryModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流速
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsHistoryModelOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * UrbanCsResultAnalysisApi - factory interface
 * @export
 */
export const UrbanCsResultAnalysisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UrbanCsResultAnalysisApiFp(configuration)
  return {
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流量模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
      scenarioId?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsCurrentModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
          scenarioId,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算充满度模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
      scenarioId?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsCurrentModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
          scenarioId,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 从数据库获取所有节点最近一次充水模型计算流速模拟结果值
     * @param {string} [scenarioId]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
      scenarioId?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsCurrentModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
          scenarioId,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内充满度
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsHistoryModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流量
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsHistoryModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定节点和指标时间段内流速
     * @param {string} [modelId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {number} [frequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
      modelId?: string,
      startTime?: string,
      endTime?: string,
      frequency?: number,
      options?: any,
    ): AxiosPromise<CsHistoryModelOutput> {
      return localVarFp
        .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
          modelId,
          startTime,
          endTime,
          frequency,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UrbanCsResultAnalysisApi - object-oriented interface
 * @export
 * @class UrbanCsResultAnalysisApi
 * @extends {BaseAPI}
 */
export class UrbanCsResultAnalysisApi extends BaseAPI {
  /**
   *
   * @summary 从数据库获取所有节点最近一次充水模型计算流量模拟结果值
   * @param {string} [scenarioId]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
    scenarioId?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultFlowGet(
        scenarioId,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 从数据库获取所有节点最近一次充水模型计算充满度模拟结果值
   * @param {string} [scenarioId]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
    scenarioId?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultGet(
        scenarioId,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 从数据库获取所有节点最近一次充水模型计算流速模拟结果值
   * @param {string} [scenarioId]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
    scenarioId?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetAllWaterFillingModelResultVelocityGet(
        scenarioId,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定节点和指标时间段内充满度
   * @param {string} [modelId]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
    modelId?: string,
    startTime?: string,
    endTime?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultByMuidGet(
        modelId,
        startTime,
        endTime,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定节点和指标时间段内流量
   * @param {string} [modelId]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
    modelId?: string,
    startTime?: string,
    endTime?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultFlowByMuidGet(
        modelId,
        startTime,
        endTime,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定节点和指标时间段内流速
   * @param {string} [modelId]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {number} [frequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCsResultAnalysisApi
   */
  public apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
    modelId?: string,
    startTime?: string,
    endTime?: string,
    frequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCsResultAnalysisApiFp(this.configuration)
      .apiV1ResultUrbanCsResultAnalysisGetWaterFillingModelResultVelocityByMuidGet(
        modelId,
        startTime,
        endTime,
        frequency,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
