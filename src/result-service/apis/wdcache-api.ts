/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { ModelPointDetailInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { WdZoneModelResultInput } from '../models'
// @ts-ignore
import { WdZoneModelResultOutput } from '../models'
/**
 * WDCacheApi - axios parameter creator
 * @export
 */
export const WDCacheApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-demand-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/delete-all-demand-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-pressure-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/delete-all-pressure-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-wd-model-result
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/delete-all-wd-model-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 模糊查找redis key并删除
     * @param {string} [keyPattern]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteGet: async (
      keyPattern?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (keyPattern !== undefined) {
        localVarQueryParameter['keyPattern'] = keyPattern
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-model-points
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet: async (
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/delete-model-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-demand-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost: async (
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/get-all-demand-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-pressure-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost: async (
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/get-all-pressure-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-wd-model-result
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {string} [sysWDDataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      sysWDDataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/get-all-wd-model-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (sysWDDataType !== undefined) {
        localVarQueryParameter['sysWDDataType'] = sysWDDataType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet: async (
      templateId?: string,
      modelPointType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/get-model-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (modelPointType !== undefined) {
        localVarQueryParameter['modelPointType'] = modelPointType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-info-exported
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet: async (
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/model-info-exported`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-result-exported
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/model-result-exported`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-demand-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost: async (
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/set-all-demand-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-pressure-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost: async (
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/set-all-pressure-from-zoneid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-wd-model-result
     * @param {string} [sysWDDataType]
     * @param {BaseDynamicOutput} [baseDynamicOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost: async (
      sysWDDataType?: string,
      baseDynamicOutput?: BaseDynamicOutput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/set-all-wd-model-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sysWDDataType !== undefined) {
        localVarQueryParameter['sysWDDataType'] = sysWDDataType
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        baseDynamicOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {Array<ModelPointDetailInfo>} [modelPointDetailInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost: async (
      templateId?: string,
      modelPointType?: string,
      modelPointDetailInfo?: Array<ModelPointDetailInfo>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/cache/set-model-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (modelPointType !== undefined) {
        localVarQueryParameter['modelPointType'] = modelPointType
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelPointDetailInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDCacheApi - functional programming interface
 * @export
 */
export const WDCacheApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDCacheApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-demand-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-pressure-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-wd-model-result
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 模糊查找redis key并删除
     * @param {string} [keyPattern]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheDeleteGet(
      keyPattern?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheDeleteGet(
          keyPattern,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-model-points
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-demand-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdZoneModelResultOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(
          wdZoneModelResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-pressure-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdZoneModelResultOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(
          wdZoneModelResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-wd-model-result
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {string} [sysWDDataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      sysWDDataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          sysWDDataType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(
      templateId?: string,
      modelPointType?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointDetailInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(
          templateId,
          modelPointType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-info-exported
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-result-exported
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-demand-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(
          wdZoneModelResultOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-pressure-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(
          wdZoneModelResultOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-wd-model-result
     * @param {string} [sysWDDataType]
     * @param {BaseDynamicOutput} [baseDynamicOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
      sysWDDataType?: string,
      baseDynamicOutput?: BaseDynamicOutput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
          sysWDDataType,
          baseDynamicOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {Array<ModelPointDetailInfo>} [modelPointDetailInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
      templateId?: string,
      modelPointType?: string,
      modelPointDetailInfo?: Array<ModelPointDetailInfo>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
          templateId,
          modelPointType,
          modelPointDetailInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDCacheApi - factory interface
 * @export
 */
export const WDCacheApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDCacheApiFp(configuration)
  return {
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-demand-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-pressure-from-zoneid
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-wd-model-result
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 模糊查找redis key并删除
     * @param {string} [keyPattern]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteGet(
      keyPattern?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheDeleteGet(keyPattern, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/delete-model-points
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(
      templateId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-demand-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: any,
    ): AxiosPromise<Array<WdZoneModelResultOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(wdZoneModelResultInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-pressure-from-zoneid
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: any,
    ): AxiosPromise<Array<WdZoneModelResultOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(
          wdZoneModelResultInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-all-wd-model-result
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {string} [sysWDDataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      sysWDDataType?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          sysWDDataType,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/get-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(
      templateId?: string,
      modelPointType?: string,
      options?: any,
    ): AxiosPromise<Array<ModelPointDetailInfo>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(templateId, modelPointType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-info-exported
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(
      templateId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/model-result-exported
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-demand-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(wdZoneModelResultOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-pressure-from-zoneid
     * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(
      wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(
          wdZoneModelResultOutput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-all-wd-model-result
     * @param {string} [sysWDDataType]
     * @param {BaseDynamicOutput} [baseDynamicOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
      sysWDDataType?: string,
      baseDynamicOutput?: BaseDynamicOutput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
          sysWDDataType,
          baseDynamicOutput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/result-analysis/urban-wd/cache/set-model-points
     * @param {string} [templateId]
     * @param {string} [modelPointType]
     * @param {Array<ModelPointDetailInfo>} [modelPointDetailInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
      templateId?: string,
      modelPointType?: string,
      modelPointDetailInfo?: Array<ModelPointDetailInfo>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
          templateId,
          modelPointType,
          modelPointDetailInfo,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDCacheApi - object-oriented interface
 * @export
 * @class WDCacheApi
 * @extends {BaseAPI}
 */
export class WDCacheApi extends BaseAPI {
  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-demand-from-zoneid
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheDeleteAllDemandFromZoneidGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-pressure-from-zoneid
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheDeleteAllPressureFromZoneidGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/delete-all-wd-model-result
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheDeleteAllWdModelResultGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 模糊查找redis key并删除
   * @param {string} [keyPattern]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheDeleteGet(
    keyPattern?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheDeleteGet(keyPattern, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/delete-model-points
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheDeleteModelPointsGet(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/get-all-demand-from-zoneid
   * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(
    wdZoneModelResultInput?: WdZoneModelResultInput,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheGetAllDemandFromZoneidPost(wdZoneModelResultInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/get-all-pressure-from-zoneid
   * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(
    wdZoneModelResultInput?: WdZoneModelResultInput,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheGetAllPressureFromZoneidPost(wdZoneModelResultInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/get-all-wd-model-result
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {string} [sysWDDataType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    sysWDDataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheGetAllWdModelResultGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        sysWDDataType,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/get-model-points
   * @param {string} [templateId]
   * @param {string} [modelPointType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(
    templateId?: string,
    modelPointType?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheGetModelPointsGet(templateId, modelPointType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/model-info-exported
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheModelInfoExportedGet(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/model-result-exported
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheModelResultExportedGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/set-all-demand-from-zoneid
   * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(
    wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheSetAllDemandFromZoneidPost(wdZoneModelResultOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/set-all-pressure-from-zoneid
   * @param {Array<WdZoneModelResultOutput>} [wdZoneModelResultOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(
    wdZoneModelResultOutput?: Array<WdZoneModelResultOutput>,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheSetAllPressureFromZoneidPost(wdZoneModelResultOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/set-all-wd-model-result
   * @param {string} [sysWDDataType]
   * @param {BaseDynamicOutput} [baseDynamicOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
    sysWDDataType?: string,
    baseDynamicOutput?: BaseDynamicOutput,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheSetAllWdModelResultPost(
        sysWDDataType,
        baseDynamicOutput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/result-analysis/urban-wd/cache/set-model-points
   * @param {string} [templateId]
   * @param {string} [modelPointType]
   * @param {Array<ModelPointDetailInfo>} [modelPointDetailInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDCacheApi
   */
  public apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
    templateId?: string,
    modelPointType?: string,
    modelPointDetailInfo?: Array<ModelPointDetailInfo>,
    options?: AxiosRequestConfig,
  ) {
    return WDCacheApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdCacheSetModelPointsPost(
        templateId,
        modelPointType,
        modelPointDetailInfo,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
