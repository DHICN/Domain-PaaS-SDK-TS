/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { BaseTimeseriesBatchOutput } from '../models'
// @ts-ignore
import { BaseTimeseriesOutput } from '../models'
// @ts-ignore
import { FilterModelResultDto } from '../models'
// @ts-ignore
import { FilterModelResultRangeTimeDto } from '../models'
// @ts-ignore
import { FlushingResultEntity } from '../models'
// @ts-ignore
import { GetFilterModelResultInput } from '../models'
// @ts-ignore
import { GetFilterModelResultRangeTime } from '../models'
// @ts-ignore
import { GetStatisticResultInput } from '../models'
// @ts-ignore
import { GetTimeStatisticResultInput } from '../models'
// @ts-ignore
import { NetworkProfile } from '../models'
// @ts-ignore
import { StatisticsModelIdResultDto } from '../models'
// @ts-ignore
import { StatisticsTimeResultDto } from '../models'
// @ts-ignore
import { TraceWqClosePipeResult } from '../models'
// @ts-ignore
import { WdBatchStructureTimeseriesInput } from '../models'
// @ts-ignore
import { WdBatchTimeseriesInput } from '../models'
// @ts-ignore
import { WdDynamicModelResult } from '../models'
// @ts-ignore
import { WdHistoryModelInput } from '../models'
// @ts-ignore
import { WdHistoryModelOutput } from '../models'
// @ts-ignore
import { WdStatisticShutOffUserDto } from '../models'
// @ts-ignore
import { WdZoneModelResultInput } from '../models'
// @ts-ignore
import { WdZoneModelResultOutput } from '../models'
// @ts-ignore
import { WdZoneStatisticsEntity } from '../models'
/**
 * UrbanWdResultAnalysisApi - axios parameter creator
 * @export
 */
export const UrbanWdResultAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/average-water-age-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/average-water-age-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/average-wq-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdAverageWqDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/average-wq-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网平均污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/average-wq-trace-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id批量获取单个结构物模拟结果
     * @param {WdBatchStructureTimeseriesInput} [wdBatchStructureTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost: async (
      wdBatchStructureTimeseriesInput?: WdBatchStructureTimeseriesInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/batch-structure-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdBatchStructureTimeseriesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id批量获取管网模拟结果（查询数量限制在100个以内）
     * @param {WdBatchTimeseriesInput} [wdBatchTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdBatchTimeseriesPost: async (
      wdBatchTimeseriesInput?: WdBatchTimeseriesInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/batch-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdBatchTimeseriesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/demand-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDemandDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdDemandDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/demand-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取DMA分区的流量模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDmaFlowPost: async (
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/dma-flow`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取DMA分区的压力模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDmaPressurePost: async (
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/dma-pressure`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdZoneModelResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水动态播放结果的描述信息（tileserver）
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDynamicGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 按照筛选条件查询模型信息和模拟结果
     * @param {GetFilterModelResultInput} [getFilterModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFilterModelResultPost: async (
      getFilterModelResultInput?: GetFilterModelResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/filter-model-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getFilterModelResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 按照筛选条件查询时段内模型信息和模拟结果
     * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost: async (
      getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/filter-model-result-rangetime`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getFilterModelResultRangeTime,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/flow-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlowDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdFlowDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/flow-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取管道冲洗结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlushingResultGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/flushing-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/head-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdHeadDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/head-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/headloss-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水损模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadlossDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdHeadlossDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/headloss-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/pressure-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdPressureDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdPressureDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/pressure-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取管道剖面图数据
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdProfileTimeseriesGet: async (
      scenarioId: string,
      nodeIDs?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdProfileTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/profile-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nodeIDs !== undefined) {
        localVarQueryParameter['NodeIDs'] = nodeIDs
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取停水关阀用户
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdShutOffUsersGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/shut-off-users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 按照模型id获取统计结果
     * @param {GetStatisticResultInput} [getStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost: async (
      getStatisticResultInput?: GetStatisticResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/statistic-result-modelid-dimension`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getStatisticResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 按照时间获取统计结果
     * @param {GetTimeStatisticResultInput} [getTimeStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost: async (
      getTimeStatisticResultInput?: GetTimeStatisticResultInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/statistic-result-time-dimension`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getTimeStatisticResultInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取单个结构物模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [wDCalculateType] 计算类型：水动力HD、水质WaterQuality、水龄WaterAge、水质追踪SourceTracing、水锤WaterHammer
     * @param {string} [wDFeatureType] 模型要素类型：管线Link、阀门Valve、节点Node、水池Tank
     * @param {string} [wDDataType] 数据类型枚举:流量Flow、流速Velocity、压力Pressure、水头Head等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStructureTimeseriesGet: async (
      modelId: string,
      scenarioId: string,
      wDCalculateType?: string,
      wDFeatureType?: string,
      wDDataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdStructureTimeseriesGet', 'modelId', modelId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdStructureTimeseriesGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/structure-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (wDCalculateType !== undefined) {
        localVarQueryParameter['WDCalculateType'] = wDCalculateType
      }

      if (wDFeatureType !== undefined) {
        localVarQueryParameter['WDFeatureType'] = wDFeatureType
      }

      if (wDDataType !== undefined) {
        localVarQueryParameter['WDDataType'] = wDDataType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取单个管网的模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTimeseriesGet: async (
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdTimeseriesGet', 'modelId', modelId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (dataType !== undefined) {
        localVarQueryParameter['DataType'] = dataType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取供水边界模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/trace-supplyrange-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取边缘管道信息
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/trace-wq-close-pipe`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/velocity-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdVelocityDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdVelocityDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/velocity-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/water-age-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/water-age-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型id获取指定时间范围内的模拟结果值
     * @param {WdHistoryModelInput} [wdHistoryModelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWdresultHistoryPost: async (
      wdHistoryModelInput?: WdHistoryModelInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/wdresult-history`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wdHistoryModelInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdWqDynamicCacheGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/wq-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdWqDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/wq-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result-analysis/urban-wd/wq-trace-dynamic-cache`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqTraceDynamicGet: async (
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultAnalysisUrbanWdWqTraceDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result-analysis/urban-wd/wq-trace-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id获取模型分区统计结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result-analysis/urban-wd/zone-statistics-by-scenarioid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UrbanWdResultAnalysisApi - functional programming interface
 * @export
 */
export const UrbanWdResultAnalysisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UrbanWdResultAnalysisApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网平均污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id批量获取单个结构物模拟结果
     * @param {WdBatchStructureTimeseriesInput} [wdBatchStructureTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
      wdBatchStructureTimeseriesInput?: WdBatchStructureTimeseriesInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaseTimeseriesBatchOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
          wdBatchStructureTimeseriesInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id批量获取管网模拟结果（查询数量限制在100个以内）
     * @param {WdBatchTimeseriesInput} [wdBatchTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(
      wdBatchTimeseriesInput?: WdBatchTimeseriesInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaseTimeseriesBatchOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(
          wdBatchTimeseriesInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdDemandDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdDemandDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取DMA分区的流量模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdDmaFlowPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdZoneModelResultOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdDmaFlowPost(
          wdZoneModelResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取DMA分区的压力模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdDmaPressurePost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdZoneModelResultOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdDmaPressurePost(
          wdZoneModelResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水动态播放结果的描述信息（tileserver）
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdDynamicGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WdDynamicModelResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdDynamicGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 按照筛选条件查询模型信息和模拟结果
     * @param {GetFilterModelResultInput} [getFilterModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdFilterModelResultPost(
      getFilterModelResultInput?: GetFilterModelResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FilterModelResultDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdFilterModelResultPost(
          getFilterModelResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 按照筛选条件查询时段内模型信息和模拟结果
     * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
      getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<FilterModelResultRangeTimeDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
          getFilterModelResultRangeTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdFlowDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdFlowDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取管道冲洗结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdFlushingResultGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlushingResultEntity>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdFlushingResultGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdHeadDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdHeadDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水损模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdPressureDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdPressureDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取管道剖面图数据
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(
      scenarioId: string,
      nodeIDs?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkProfile>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(
          scenarioId,
          nodeIDs,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取停水关阀用户
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdShutOffUsersGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdStatisticShutOffUserDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdShutOffUsersGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 按照模型id获取统计结果
     * @param {GetStatisticResultInput} [getStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
      getStatisticResultInput?: GetStatisticResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatisticsModelIdResultDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
          getStatisticResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 按照时间获取统计结果
     * @param {GetTimeStatisticResultInput} [getTimeStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
      getTimeStatisticResultInput?: GetTimeStatisticResultInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatisticsTimeResultDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
          getTimeStatisticResultInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取单个结构物模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [wDCalculateType] 计算类型：水动力HD、水质WaterQuality、水龄WaterAge、水质追踪SourceTracing、水锤WaterHammer
     * @param {string} [wDFeatureType] 模型要素类型：管线Link、阀门Valve、节点Node、水池Tank
     * @param {string} [wDDataType] 数据类型枚举:流量Flow、流速Velocity、压力Pressure、水头Head等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
      modelId: string,
      scenarioId: string,
      wDCalculateType?: string,
      wDFeatureType?: string,
      wDDataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
          modelId,
          scenarioId,
          wDCalculateType,
          wDFeatureType,
          wDDataType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取单个管网的模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdTimeseriesGet(
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdTimeseriesGet(
          modelId,
          scenarioId,
          dataType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取供水边界模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取边缘管道信息
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TraceWqClosePipeResult>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型id获取指定时间范围内的模拟结果值
     * @param {WdHistoryModelInput} [wdHistoryModelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWdresultHistoryPost(
      wdHistoryModelInput?: WdHistoryModelInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdHistoryModelOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWdresultHistoryPost(
          wdHistoryModelInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWqDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWqDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id获取模型分区统计结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WdZoneStatisticsEntity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * UrbanWdResultAnalysisApi - factory interface
 * @export
 */
export const UrbanWdResultAnalysisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UrbanWdResultAnalysisApiFp(configuration)
  return {
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网平均水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网平均污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id批量获取单个结构物模拟结果
     * @param {WdBatchStructureTimeseriesInput} [wdBatchStructureTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
      wdBatchStructureTimeseriesInput?: WdBatchStructureTimeseriesInput,
      options?: any,
    ): AxiosPromise<Array<BaseTimeseriesBatchOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
          wdBatchStructureTimeseriesInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id批量获取管网模拟结果（查询数量限制在100个以内）
     * @param {WdBatchTimeseriesInput} [wdBatchTimeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(
      wdBatchTimeseriesInput?: WdBatchTimeseriesInput,
      options?: any,
    ): AxiosPromise<Array<BaseTimeseriesBatchOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(wdBatchTimeseriesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网用水量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDemandDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdDemandDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取DMA分区的流量模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDmaFlowPost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: any,
    ): AxiosPromise<Array<WdZoneModelResultOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdDmaFlowPost(wdZoneModelResultInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取DMA分区的压力模拟结果
     * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDmaPressurePost(
      wdZoneModelResultInput?: WdZoneModelResultInput,
      options?: any,
    ): AxiosPromise<Array<WdZoneModelResultOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdDmaPressurePost(wdZoneModelResultInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水动态播放结果的描述信息（tileserver）
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdDynamicGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<WdDynamicModelResult> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdDynamicGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 按照筛选条件查询模型信息和模拟结果
     * @param {GetFilterModelResultInput} [getFilterModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFilterModelResultPost(
      getFilterModelResultInput?: GetFilterModelResultInput,
      options?: any,
    ): AxiosPromise<Array<FilterModelResultDto>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdFilterModelResultPost(getFilterModelResultInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 按照筛选条件查询时段内模型信息和模拟结果
     * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
      getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
      options?: any,
    ): AxiosPromise<Array<FilterModelResultRangeTimeDto>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
          getFilterModelResultRangeTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 返回的数据包含：模型id列表，时间列表，结果值二维数据
     * @summary 根据方案id获取全管网流量模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlowDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdFlowDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取管道冲洗结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdFlushingResultGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<FlushingResultEntity> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdFlushingResultGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdHeadDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水损模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网压力模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdPressureDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdPressureDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取管道剖面图数据
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(
      scenarioId: string,
      nodeIDs?: Array<string>,
      options?: any,
    ): AxiosPromise<NetworkProfile> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(scenarioId, nodeIDs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取停水关阀用户
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdShutOffUsersGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<WdStatisticShutOffUserDto>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdShutOffUsersGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 按照模型id获取统计结果
     * @param {GetStatisticResultInput} [getStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
      getStatisticResultInput?: GetStatisticResultInput,
      options?: any,
    ): AxiosPromise<Array<StatisticsModelIdResultDto>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
          getStatisticResultInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 按照时间获取统计结果
     * @param {GetTimeStatisticResultInput} [getTimeStatisticResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
      getTimeStatisticResultInput?: GetTimeStatisticResultInput,
      options?: any,
    ): AxiosPromise<Array<StatisticsTimeResultDto>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
          getTimeStatisticResultInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取单个结构物模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [wDCalculateType] 计算类型：水动力HD、水质WaterQuality、水龄WaterAge、水质追踪SourceTracing、水锤WaterHammer
     * @param {string} [wDFeatureType] 模型要素类型：管线Link、阀门Valve、节点Node、水池Tank
     * @param {string} [wDDataType] 数据类型枚举:流量Flow、流速Velocity、压力Pressure、水头Head等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
      modelId: string,
      scenarioId: string,
      wDCalculateType?: string,
      wDFeatureType?: string,
      wDDataType?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
          modelId,
          scenarioId,
          wDCalculateType,
          wDFeatureType,
          wDDataType,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取单个管网的模拟结果
     * @param {string} modelId 模型id
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [dataType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTimeseriesGet(
      modelId: string,
      scenarioId: string,
      dataType?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdTimeseriesGet(modelId, scenarioId, dataType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取供水边界模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取边缘管道信息
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<TraceWqClosePipeResult>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网流速模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水龄模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型id获取指定时间范围内的模拟结果值
     * @param {WdHistoryModelInput} [wdHistoryModelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWdresultHistoryPost(
      wdHistoryModelInput?: WdHistoryModelInput,
      options?: any,
    ): AxiosPromise<Array<WdHistoryModelOutput>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWdresultHistoryPost(wdHistoryModelInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网水质模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWqDynamicGet(scenarioId, frequency, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值,适用大模型结果读取
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取全管网污染物扩散模拟结果值
     * @param {string} scenarioId 方案id
     * @param {number} [frequency] 抽样频率
     * @param {string} [startTime] 开始时间
     * @param {string} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
      scenarioId: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
          scenarioId,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id获取模型分区统计结果
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<WdZoneStatisticsEntity>> {
      return localVarFp
        .apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UrbanWdResultAnalysisApi - object-oriented interface
 * @export
 * @class UrbanWdResultAnalysisApi
 * @extends {BaseAPI}
 */
export class UrbanWdResultAnalysisApi extends BaseAPI {
  /**
   *
   * @summary 根据方案id获取全管网平均水龄模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网平均水龄模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdAverageWaterAgeDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网平均水质模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdAverageWqDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网平均水质模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdAverageWqDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网平均污染物扩散模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdAverageWqTraceDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id批量获取单个结构物模拟结果
   * @param {WdBatchStructureTimeseriesInput} [wdBatchStructureTimeseriesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
    wdBatchStructureTimeseriesInput?: WdBatchStructureTimeseriesInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdBatchStructureTimeseriesPost(
        wdBatchStructureTimeseriesInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id批量获取管网模拟结果（查询数量限制在100个以内）
   * @param {WdBatchTimeseriesInput} [wdBatchTimeseriesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(
    wdBatchTimeseriesInput?: WdBatchTimeseriesInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdBatchTimeseriesPost(wdBatchTimeseriesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网用水量模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdDemandDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网用水量模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdDemandDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdDemandDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取DMA分区的流量模拟结果
   * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdDmaFlowPost(
    wdZoneModelResultInput?: WdZoneModelResultInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdDmaFlowPost(wdZoneModelResultInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取DMA分区的压力模拟结果
   * @param {WdZoneModelResultInput} [wdZoneModelResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdDmaPressurePost(
    wdZoneModelResultInput?: WdZoneModelResultInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdDmaPressurePost(wdZoneModelResultInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水动态播放结果的描述信息（tileserver）
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdDynamicGet(scenarioId: string, options?: AxiosRequestConfig) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdDynamicGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 按照筛选条件查询模型信息和模拟结果
   * @param {GetFilterModelResultInput} [getFilterModelResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdFilterModelResultPost(
    getFilterModelResultInput?: GetFilterModelResultInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdFilterModelResultPost(getFilterModelResultInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 按照筛选条件查询时段内模型信息和模拟结果
   * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
    getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdFilterModelResultRangetimePost(
        getFilterModelResultRangeTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 返回的数据包含：模型id列表，时间列表，结果值二维数据
   * @summary 根据方案id获取全管网流量模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdFlowDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 返回的数据包含：模型id列表，时间列表，结果值二维数据
   * @summary 根据方案id获取全管网流量模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdFlowDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdFlowDynamicGet(scenarioId, frequency, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取管道冲洗结果
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdFlushingResultGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdFlushingResultGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdHeadDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水头模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdHeadDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdHeadDynamicGet(scenarioId, frequency, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水头模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdHeadlossDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水损模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdHeadlossDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网压力模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdPressureDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网压力模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdPressureDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdPressureDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取管道剖面图数据
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(
    scenarioId: string,
    nodeIDs?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdProfileTimeseriesGet(scenarioId, nodeIDs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取停水关阀用户
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdShutOffUsersGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdShutOffUsersGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 按照模型id获取统计结果
   * @param {GetStatisticResultInput} [getStatisticResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
    getStatisticResultInput?: GetStatisticResultInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdStatisticResultModelidDimensionPost(
        getStatisticResultInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 按照时间获取统计结果
   * @param {GetTimeStatisticResultInput} [getTimeStatisticResultInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
    getTimeStatisticResultInput?: GetTimeStatisticResultInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdStatisticResultTimeDimensionPost(
        getTimeStatisticResultInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取单个结构物模拟结果
   * @param {string} modelId 模型id
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [wDCalculateType] 计算类型：水动力HD、水质WaterQuality、水龄WaterAge、水质追踪SourceTracing、水锤WaterHammer
   * @param {string} [wDFeatureType] 模型要素类型：管线Link、阀门Valve、节点Node、水池Tank
   * @param {string} [wDDataType] 数据类型枚举:流量Flow、流速Velocity、压力Pressure、水头Head等
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
    modelId: string,
    scenarioId: string,
    wDCalculateType?: string,
    wDFeatureType?: string,
    wDDataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdStructureTimeseriesGet(
        modelId,
        scenarioId,
        wDCalculateType,
        wDFeatureType,
        wDDataType,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取单个管网的模拟结果
   * @param {string} modelId 模型id
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [dataType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdTimeseriesGet(
    modelId: string,
    scenarioId: string,
    dataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdTimeseriesGet(modelId, scenarioId, dataType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取供水边界模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdTraceSupplyrangeDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取边缘管道信息
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdTraceWqClosePipeGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网流速模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdVelocityDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网流速模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdVelocityDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水龄模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWaterAgeDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水龄模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWaterAgeDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型id获取指定时间范围内的模拟结果值
   * @param {WdHistoryModelInput} [wdHistoryModelInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWdresultHistoryPost(
    wdHistoryModelInput?: WdHistoryModelInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWdresultHistoryPost(wdHistoryModelInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水质模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWqDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网水质模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWqDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWqDynamicGet(scenarioId, frequency, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网污染物扩散模拟结果值,适用大模型结果读取
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWqTraceDynamicCacheGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取全管网污染物扩散模拟结果值
   * @param {string} scenarioId 方案id
   * @param {number} [frequency] 抽样频率
   * @param {string} [startTime] 开始时间
   * @param {string} [endTime] 结束时间
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
    scenarioId: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdWqTraceDynamicGet(
        scenarioId,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id获取模型分区统计结果
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanWdResultAnalysisApi
   */
  public apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanWdResultAnalysisApiFp(this.configuration)
      .apiV1ResultAnalysisUrbanWdZoneStatisticsByScenarioidGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
