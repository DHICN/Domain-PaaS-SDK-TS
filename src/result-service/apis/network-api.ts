/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { BaseStaticOutput } from '../models'
// @ts-ignore
import { BaseTimeseriesOutput } from '../models'
// @ts-ignore
import { BatchNetworkTimeseriesQueryInput } from '../models'
// @ts-ignore
import { EarlyWarningDto } from '../models'
// @ts-ignore
import { NetworkProfile } from '../models'
// @ts-ignore
import { NetworkStaticLengthInput } from '../models'
// @ts-ignore
import { NetworkStatisticsOutput } from '../models'
// @ts-ignore
import { PipeStaticLengthOutput } from '../models'
// @ts-ignore
import { ProcessedModelResultOutput } from '../models'
// @ts-ignore
import { PumpStatisticsOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { ValveStatisticsOutput } from '../models'
/**
 * NetworkApi - axios parameter creator
 * @export
 */
export const NetworkApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位、溢流状态等时间序列结果 Get pipe flow, velocity, filling, water level,flood state etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {BatchNetworkTimeseriesQueryInput} [batchNetworkTimeseriesQueryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkBatchTimeseriesPost: async (
      batchNetworkTimeseriesQueryInput?: BatchNetworkTimeseriesQueryInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/network/batch/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        batchNetworkTimeseriesQueryInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get 1D dynamic chainage results of pipe network (pipe)
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkDynamicChainageGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/network/dynamicChainage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkDynamicGet: async (
      scenarioId: string,
      pipeDataType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pipeDataType !== undefined) {
        localVarQueryParameter['PipeDataType'] = pipeDataType
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 管网泵站液位预警
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkEarlyWarningWaterLevelPumpGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/network/early-warning/water-level/pump`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ResultNetworkMultipointTimeseriesGet: async (
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkMultipointTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/multipoint_timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pipeDataType !== undefined) {
        localVarQueryParameter['PipeDataType'] = pipeDataType
      }

      if (pipeID !== undefined) {
        localVarQueryParameter['PipeID'] = pipeID
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
     * @summary 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [overflowNodeType] 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeDynamicGet: async (
      scenarioId: string,
      overflowNodeType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkNodeDynamicGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/node-dynamic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (overflowNodeType !== undefined) {
        localVarQueryParameter['OverflowNodeType'] = overflowNodeType
      }

      if (frequency !== undefined) {
        localVarQueryParameter['Frequency'] = frequency
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
     * @summary 获取管道节点统计结果 Get 1D statistic results for networks (node)
     * @param {string} staticType 节点统计数据类型 node statistic data type
     * @param {string} overflowNodeType 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeStaticGet: async (
      staticType: string,
      overflowNodeType: string,
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'staticType' is not null or undefined
      assertParamExists('apiV1ResultNetworkNodeStaticGet', 'staticType', staticType)
      // verify required parameter 'overflowNodeType' is not null or undefined
      assertParamExists('apiV1ResultNetworkNodeStaticGet', 'overflowNodeType', overflowNodeType)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkNodeStaticGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/node-static`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (staticType !== undefined) {
        localVarQueryParameter['StaticType'] = staticType
      }

      if (overflowNodeType !== undefined) {
        localVarQueryParameter['OverflowNodeType'] = overflowNodeType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
     * @summary 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [nodeDataType] 节点结果类型 node result type:  0-WaterLevel;  1-Overflow;
     * @param {string} [nodeId] 节点ID node ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeTimeseriesGet: async (
      scenarioId: string,
      nodeDataType?: string,
      nodeId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkNodeTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/node-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nodeDataType !== undefined) {
        localVarQueryParameter['NodeDataType'] = nodeDataType
      }

      if (nodeId !== undefined) {
        localVarQueryParameter['NodeId'] = nodeId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个堰高/流量时间序列结果 Get the time series results of single weir height/discharge
     * @summary 获取堰高/流量时间序列结果 Get weir height/flow time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [orificeID] 堰的ID OrificeID
     * @param {string} [orificeDataType] 堰数据类型 OrificeDataType:  Discharge &#x3D; 1,过堰流量  GateLevel &#x3D; 4,堰高
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkOrificeTimeseriesGet: async (
      scenarioId: string,
      orificeID?: string,
      orificeDataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkOrificeTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/orifice-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (orificeID !== undefined) {
        localVarQueryParameter['OrificeID'] = orificeID
      }

      if (orificeDataType !== undefined) {
        localVarQueryParameter['OrificeDataType'] = orificeDataType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取处理后的模型数据 Get time series results of processed
     * @summary 获取处理后的模型数据 Get time series results of processed
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [modelFeatureIds] 模型虚拟IDs model\&#39;s virtual ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkProcessedTimeseriesGet: async (
      scenarioId: string,
      modelFeatureIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkProcessedTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/processed-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelFeatureIds !== undefined) {
        localVarQueryParameter['ModelFeatureIds'] = modelFeatureIds
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
     * @summary 获取管道剖面图数据 Get network profile plot data
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkProfileTimeseriesGet: async (
      scenarioId: string,
      nodeIDs?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkProfileTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/profile-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nodeIDs !== undefined) {
        localVarQueryParameter['NodeIDs'] = nodeIDs
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
     * @summary 获取管道泵站的统计结果 Get statistic results of network pumps
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkPumpStatisticsGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkPumpStatisticsGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/pump-statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
     * @summary 获取管道泵站的时间序列结果 Get time-series results of a network pump
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pumpID] 泵的ID pump ID
     * @param {string} [pumpDataType] 泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkPumpTimeseriesGet: async (
      scenarioId: string,
      pumpID?: string,
      pumpDataType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkPumpTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/pump-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pumpID !== undefined) {
        localVarQueryParameter['PumpID'] = pumpID
      }

      if (pumpDataType !== undefined) {
        localVarQueryParameter['PumpDataType'] = pumpDataType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道统计结果 Get 1D statistic results for networks (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {string} [statisticType] 统计类型 statistic type:  0-Min;  1-Max;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStaticGet: async (
      scenarioId: string,
      pipeDataType?: string,
      statisticType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkStaticGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/static`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pipeDataType !== undefined) {
        localVarQueryParameter['PipeDataType'] = pipeDataType
      }

      if (statisticType !== undefined) {
        localVarQueryParameter['StatisticType'] = statisticType
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据传入的等级数据获取一维管道的长度统计结果，统计依据为流量、流速、充满度、水位等的最大值、最小值, According to the incoming grade data, the length statistics of the one-dimensional pipeline are obtained, and the statistics are based on the maximum and minimum values of flow, flow rate, filling degree, water level, etc
     * @summary 获取一维管道的长度统计结果 Obtain the length statistics of a 1D pipe
     * @param {NetworkStaticLengthInput} [networkStaticLengthInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStaticLengthPost: async (
      networkStaticLengthInput?: NetworkStaticLengthInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/network/static/length`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        networkStaticLengthInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
     * @summary 查询管道溢流的统计结果 Get overflow statistic result of the network
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStatisticsGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkStatisticsGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
     * @summary 获取管道单点时间序列结果 Get pipe network single point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkTimeseriesGet: async (
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pipeDataType !== undefined) {
        localVarQueryParameter['PipeDataType'] = pipeDataType
      }

      if (pipeID !== undefined) {
        localVarQueryParameter['PipeID'] = pipeID
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
     * @summary 获取管道阀门的统计结果 Get statistic results of network valves
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkValveStatisticsGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultNetworkValveStatisticsGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/network/valve-statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NetworkApi - functional programming interface
 * @export
 */
export const NetworkApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NetworkApiAxiosParamCreator(configuration)
  return {
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位、溢流状态等时间序列结果 Get pipe flow, velocity, filling, water level,flood state etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {BatchNetworkTimeseriesQueryInput} [batchNetworkTimeseriesQueryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkBatchTimeseriesPost(
      batchNetworkTimeseriesQueryInput?: BatchNetworkTimeseriesQueryInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkBatchTimeseriesPost(
          batchNetworkTimeseriesQueryInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Get 1D dynamic chainage results of pipe network (pipe)
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkDynamicChainageGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkDynamicChainageGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkDynamicGet(
      scenarioId: string,
      pipeDataType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkDynamicGet(
        scenarioId,
        pipeDataType,
        frequency,
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 管网泵站液位预警
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EarlyWarningDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkMultipointTimeseriesGet(
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkMultipointTimeseriesGet(
          scenarioId,
          pipeDataType,
          pipeID,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
     * @summary 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [overflowNodeType] 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkNodeDynamicGet(
      scenarioId: string,
      overflowNodeType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkNodeDynamicGet(
        scenarioId,
        overflowNodeType,
        frequency,
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
     * @summary 获取管道节点统计结果 Get 1D statistic results for networks (node)
     * @param {string} staticType 节点统计数据类型 node statistic data type
     * @param {string} overflowNodeType 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkNodeStaticGet(
      staticType: string,
      overflowNodeType: string,
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseStaticOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkNodeStaticGet(
        staticType,
        overflowNodeType,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
     * @summary 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [nodeDataType] 节点结果类型 node result type:  0-WaterLevel;  1-Overflow;
     * @param {string} [nodeId] 节点ID node ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkNodeTimeseriesGet(
      scenarioId: string,
      nodeDataType?: string,
      nodeId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkNodeTimeseriesGet(
        scenarioId,
        nodeDataType,
        nodeId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个堰高/流量时间序列结果 Get the time series results of single weir height/discharge
     * @summary 获取堰高/流量时间序列结果 Get weir height/flow time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [orificeID] 堰的ID OrificeID
     * @param {string} [orificeDataType] 堰数据类型 OrificeDataType:  Discharge &#x3D; 1,过堰流量  GateLevel &#x3D; 4,堰高
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkOrificeTimeseriesGet(
      scenarioId: string,
      orificeID?: string,
      orificeDataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkOrificeTimeseriesGet(
          scenarioId,
          orificeID,
          orificeDataType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取处理后的模型数据 Get time series results of processed
     * @summary 获取处理后的模型数据 Get time series results of processed
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [modelFeatureIds] 模型虚拟IDs model\&#39;s virtual ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkProcessedTimeseriesGet(
      scenarioId: string,
      modelFeatureIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessedModelResultOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkProcessedTimeseriesGet(
          scenarioId,
          modelFeatureIds,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
     * @summary 获取管道剖面图数据 Get network profile plot data
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkProfileTimeseriesGet(
      scenarioId: string,
      nodeIDs?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkProfile>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkProfileTimeseriesGet(
          scenarioId,
          nodeIDs,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
     * @summary 获取管道泵站的统计结果 Get statistic results of network pumps
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkPumpStatisticsGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PumpStatisticsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkPumpStatisticsGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
     * @summary 获取管道泵站的时间序列结果 Get time-series results of a network pump
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pumpID] 泵的ID pump ID
     * @param {string} [pumpDataType] 泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkPumpTimeseriesGet(
      scenarioId: string,
      pumpID?: string,
      pumpDataType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkPumpTimeseriesGet(
        scenarioId,
        pumpID,
        pumpDataType,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道统计结果 Get 1D statistic results for networks (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {string} [statisticType] 统计类型 statistic type:  0-Min;  1-Max;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkStaticGet(
      scenarioId: string,
      pipeDataType?: string,
      statisticType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseStaticOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkStaticGet(
        scenarioId,
        pipeDataType,
        statisticType,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据传入的等级数据获取一维管道的长度统计结果，统计依据为流量、流速、充满度、水位等的最大值、最小值, According to the incoming grade data, the length statistics of the one-dimensional pipeline are obtained, and the statistics are based on the maximum and minimum values of flow, flow rate, filling degree, water level, etc
     * @summary 获取一维管道的长度统计结果 Obtain the length statistics of a 1D pipe
     * @param {NetworkStaticLengthInput} [networkStaticLengthInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkStaticLengthPost(
      networkStaticLengthInput?: NetworkStaticLengthInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PipeStaticLengthOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkStaticLengthPost(
        networkStaticLengthInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
     * @summary 查询管道溢流的统计结果 Get overflow statistic result of the network
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkStatisticsGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkStatisticsOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkStatisticsGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
     * @summary 获取管道单点时间序列结果 Get pipe network single point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkTimeseriesGet(
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultNetworkTimeseriesGet(
        scenarioId,
        pipeDataType,
        pipeID,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
     * @summary 获取管道阀门的统计结果 Get statistic results of network valves
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultNetworkValveStatisticsGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ValveStatisticsOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultNetworkValveStatisticsGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * NetworkApi - factory interface
 * @export
 */
export const NetworkApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NetworkApiFp(configuration)
  return {
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位、溢流状态等时间序列结果 Get pipe flow, velocity, filling, water level,flood state etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {BatchNetworkTimeseriesQueryInput} [batchNetworkTimeseriesQueryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkBatchTimeseriesPost(
      batchNetworkTimeseriesQueryInput?: BatchNetworkTimeseriesQueryInput,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultNetworkBatchTimeseriesPost(batchNetworkTimeseriesQueryInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get 1D dynamic chainage results of pipe network (pipe)
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkDynamicChainageGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .apiV1ResultNetworkDynamicChainageGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkDynamicGet(
      scenarioId: string,
      pipeDataType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultNetworkDynamicGet(
          scenarioId,
          pipeDataType,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 管网泵站液位预警
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<EarlyWarningDto>> {
      return localVarFp
        .apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
     * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ResultNetworkMultipointTimeseriesGet(
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultNetworkMultipointTimeseriesGet(scenarioId, pipeDataType, pipeID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
     * @summary 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [overflowNodeType] 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
     * @param {string} [startTime] 查询结果的开始时间 start time used to get result
     * @param {string} [endTime] 查询结果的结束时间 end time used to get result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeDynamicGet(
      scenarioId: string,
      overflowNodeType?: string,
      frequency?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV1ResultNetworkNodeDynamicGet(
          scenarioId,
          overflowNodeType,
          frequency,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
     * @summary 获取管道节点统计结果 Get 1D statistic results for networks (node)
     * @param {string} staticType 节点统计数据类型 node statistic data type
     * @param {string} overflowNodeType 节点类型 node type:  1-Manhole;  3-Outlet;
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeStaticGet(
      staticType: string,
      overflowNodeType: string,
      scenarioId: string,
      options?: any,
    ): AxiosPromise<BaseStaticOutput> {
      return localVarFp
        .apiV1ResultNetworkNodeStaticGet(staticType, overflowNodeType, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
     * @summary 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [nodeDataType] 节点结果类型 node result type:  0-WaterLevel;  1-Overflow;
     * @param {string} [nodeId] 节点ID node ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkNodeTimeseriesGet(
      scenarioId: string,
      nodeDataType?: string,
      nodeId?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultNetworkNodeTimeseriesGet(scenarioId, nodeDataType, nodeId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个堰高/流量时间序列结果 Get the time series results of single weir height/discharge
     * @summary 获取堰高/流量时间序列结果 Get weir height/flow time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [orificeID] 堰的ID OrificeID
     * @param {string} [orificeDataType] 堰数据类型 OrificeDataType:  Discharge &#x3D; 1,过堰流量  GateLevel &#x3D; 4,堰高
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkOrificeTimeseriesGet(
      scenarioId: string,
      orificeID?: string,
      orificeDataType?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultNetworkOrificeTimeseriesGet(scenarioId, orificeID, orificeDataType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取处理后的模型数据 Get time series results of processed
     * @summary 获取处理后的模型数据 Get time series results of processed
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [modelFeatureIds] 模型虚拟IDs model\&#39;s virtual ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkProcessedTimeseriesGet(
      scenarioId: string,
      modelFeatureIds?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<ProcessedModelResultOutput>> {
      return localVarFp
        .apiV1ResultNetworkProcessedTimeseriesGet(scenarioId, modelFeatureIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
     * @summary 获取管道剖面图数据 Get network profile plot data
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkProfileTimeseriesGet(
      scenarioId: string,
      nodeIDs?: Array<string>,
      options?: any,
    ): AxiosPromise<NetworkProfile> {
      return localVarFp
        .apiV1ResultNetworkProfileTimeseriesGet(scenarioId, nodeIDs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
     * @summary 获取管道泵站的统计结果 Get statistic results of network pumps
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkPumpStatisticsGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<PumpStatisticsOutput>> {
      return localVarFp
        .apiV1ResultNetworkPumpStatisticsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
     * @summary 获取管道泵站的时间序列结果 Get time-series results of a network pump
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pumpID] 泵的ID pump ID
     * @param {string} [pumpDataType] 泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkPumpTimeseriesGet(
      scenarioId: string,
      pumpID?: string,
      pumpDataType?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultNetworkPumpTimeseriesGet(scenarioId, pumpID, pumpDataType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
     * @summary 获取管道统计结果 Get 1D statistic results for networks (pipe)
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
     * @param {string} [statisticType] 统计类型 statistic type:  0-Min;  1-Max;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStaticGet(
      scenarioId: string,
      pipeDataType?: string,
      statisticType?: string,
      options?: any,
    ): AxiosPromise<BaseStaticOutput> {
      return localVarFp
        .apiV1ResultNetworkStaticGet(scenarioId, pipeDataType, statisticType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据传入的等级数据获取一维管道的长度统计结果，统计依据为流量、流速、充满度、水位等的最大值、最小值, According to the incoming grade data, the length statistics of the one-dimensional pipeline are obtained, and the statistics are based on the maximum and minimum values of flow, flow rate, filling degree, water level, etc
     * @summary 获取一维管道的长度统计结果 Obtain the length statistics of a 1D pipe
     * @param {NetworkStaticLengthInput} [networkStaticLengthInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStaticLengthPost(
      networkStaticLengthInput?: NetworkStaticLengthInput,
      options?: any,
    ): AxiosPromise<Array<PipeStaticLengthOutput>> {
      return localVarFp
        .apiV1ResultNetworkStaticLengthPost(networkStaticLengthInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
     * @summary 查询管道溢流的统计结果 Get overflow statistic result of the network
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkStatisticsGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<NetworkStatisticsOutput> {
      return localVarFp
        .apiV1ResultNetworkStatisticsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
     * @summary 获取管道单点时间序列结果 Get pipe network single point time series results
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
     * @param {string} [pipeID] 管道ID pipe ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkTimeseriesGet(
      scenarioId: string,
      pipeDataType?: string,
      pipeID?: string,
      options?: any,
    ): AxiosPromise<BaseTimeseriesOutput> {
      return localVarFp
        .apiV1ResultNetworkTimeseriesGet(scenarioId, pipeDataType, pipeID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
     * @summary 获取管道阀门的统计结果 Get statistic results of network valves
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultNetworkValveStatisticsGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<ValveStatisticsOutput>> {
      return localVarFp
        .apiV1ResultNetworkValveStatisticsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
export class NetworkApi extends BaseAPI {
  /**
   * 获取管道多个计算点上的流量、流速、充满度、水位、溢流状态等时间序列结果 Get pipe flow, velocity, filling, water level,flood state etc. time series result on multiple points of a scenario.
   * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
   * @param {BatchNetworkTimeseriesQueryInput} [batchNetworkTimeseriesQueryInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkBatchTimeseriesPost(
    batchNetworkTimeseriesQueryInput?: BatchNetworkTimeseriesQueryInput,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkBatchTimeseriesPost(batchNetworkTimeseriesQueryInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get 1D dynamic chainage results of pipe network (pipe)
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkDynamicChainageGet(scenarioId?: string, options?: AxiosRequestConfig) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkDynamicChainageGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
   * @summary 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
   * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
   * @param {string} [startTime] 查询结果的开始时间 start time used to get result
   * @param {string} [endTime] 查询结果的结束时间 end time used to get result
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkDynamicGet(
    scenarioId: string,
    pipeDataType?: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkDynamicGet(
        scenarioId,
        pipeDataType,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 管网泵站液位预警
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkEarlyWarningWaterLevelPumpGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
   * @summary 获取管道多点时间序列结果 Get pipe network multi-point time series results
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
   * @param {string} [pipeID] 管道ID pipe ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkMultipointTimeseriesGet(
    scenarioId: string,
    pipeDataType?: string,
    pipeID?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkMultipointTimeseriesGet(scenarioId, pipeDataType, pipeID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
   * @summary 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [overflowNodeType] 节点类型 node type:  1-Manhole;  3-Outlet;
   * @param {number} [frequency] 查询结果的时间频率 time frequency used to get result
   * @param {string} [startTime] 查询结果的开始时间 start time used to get result
   * @param {string} [endTime] 查询结果的结束时间 end time used to get result
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkNodeDynamicGet(
    scenarioId: string,
    overflowNodeType?: string,
    frequency?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkNodeDynamicGet(
        scenarioId,
        overflowNodeType,
        frequency,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
   * @summary 获取管道节点统计结果 Get 1D statistic results for networks (node)
   * @param {string} staticType 节点统计数据类型 node statistic data type
   * @param {string} overflowNodeType 节点类型 node type:  1-Manhole;  3-Outlet;
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkNodeStaticGet(
    staticType: string,
    overflowNodeType: string,
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkNodeStaticGet(staticType, overflowNodeType, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
   * @summary 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [nodeDataType] 节点结果类型 node result type:  0-WaterLevel;  1-Overflow;
   * @param {string} [nodeId] 节点ID node ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkNodeTimeseriesGet(
    scenarioId: string,
    nodeDataType?: string,
    nodeId?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkNodeTimeseriesGet(scenarioId, nodeDataType, nodeId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个堰高/流量时间序列结果 Get the time series results of single weir height/discharge
   * @summary 获取堰高/流量时间序列结果 Get weir height/flow time series results
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [orificeID] 堰的ID OrificeID
   * @param {string} [orificeDataType] 堰数据类型 OrificeDataType:  Discharge &#x3D; 1,过堰流量  GateLevel &#x3D; 4,堰高
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkOrificeTimeseriesGet(
    scenarioId: string,
    orificeID?: string,
    orificeDataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkOrificeTimeseriesGet(scenarioId, orificeID, orificeDataType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取处理后的模型数据 Get time series results of processed
   * @summary 获取处理后的模型数据 Get time series results of processed
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [modelFeatureIds] 模型虚拟IDs model\&#39;s virtual ids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkProcessedTimeseriesGet(
    scenarioId: string,
    modelFeatureIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkProcessedTimeseriesGet(scenarioId, modelFeatureIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
   * @summary 获取管道剖面图数据 Get network profile plot data
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {Array<string>} [nodeIDs] 沿着管段的节点ID列表 node IDs along the pipes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkProfileTimeseriesGet(
    scenarioId: string,
    nodeIDs?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkProfileTimeseriesGet(scenarioId, nodeIDs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
   * @summary 获取管道泵站的统计结果 Get statistic results of network pumps
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkPumpStatisticsGet(scenarioId: string, options?: AxiosRequestConfig) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkPumpStatisticsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
   * @summary 获取管道泵站的时间序列结果 Get time-series results of a network pump
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [pumpID] 泵的ID pump ID
   * @param {string} [pumpDataType] 泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkPumpTimeseriesGet(
    scenarioId: string,
    pumpID?: string,
    pumpDataType?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkPumpTimeseriesGet(scenarioId, pumpID, pumpDataType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
   * @summary 获取管道统计结果 Get 1D statistic results for networks (pipe)
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel
   * @param {string} [statisticType] 统计类型 statistic type:  0-Min;  1-Max;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkStaticGet(
    scenarioId: string,
    pipeDataType?: string,
    statisticType?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkStaticGet(scenarioId, pipeDataType, statisticType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据传入的等级数据获取一维管道的长度统计结果，统计依据为流量、流速、充满度、水位等的最大值、最小值, According to the incoming grade data, the length statistics of the one-dimensional pipeline are obtained, and the statistics are based on the maximum and minimum values of flow, flow rate, filling degree, water level, etc
   * @summary 获取一维管道的长度统计结果 Obtain the length statistics of a 1D pipe
   * @param {NetworkStaticLengthInput} [networkStaticLengthInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkStaticLengthPost(
    networkStaticLengthInput?: NetworkStaticLengthInput,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkStaticLengthPost(networkStaticLengthInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
   * @summary 查询管道溢流的统计结果 Get overflow statistic result of the network
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkStatisticsGet(scenarioId: string, options?: AxiosRequestConfig) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkStatisticsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
   * @summary 获取管道单点时间序列结果 Get pipe network single point time series results
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {string} [pipeDataType] 管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterDepth  4-PipeWaterLevel  5-PipeFlood
   * @param {string} [pipeID] 管道ID pipe ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkTimeseriesGet(
    scenarioId: string,
    pipeDataType?: string,
    pipeID?: string,
    options?: AxiosRequestConfig,
  ) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkTimeseriesGet(scenarioId, pipeDataType, pipeID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
   * @summary 获取管道阀门的统计结果 Get statistic results of network valves
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetworkApi
   */
  public apiV1ResultNetworkValveStatisticsGet(scenarioId: string, options?: AxiosRequestConfig) {
    return NetworkApiFp(this.configuration)
      .apiV1ResultNetworkValveStatisticsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
