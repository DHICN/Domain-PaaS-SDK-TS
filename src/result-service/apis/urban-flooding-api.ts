/* eslint-disable */
/**
 * result-analysis-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { FloodingRiskInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SensitivePointsStatistic } from '../models'
// @ts-ignore
import { StringPage } from '../models'
/**
 * UrbanFloodingApi - axios parameter creator
 * @export
 */
export const UrbanFloodingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 分页查询内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息Get elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.  order by elements id
     * @summary 分页查询内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [pageIndex] 分页的序号，从1开始 page index, start from 1
     * @param {number} [pageSize] 分页的大小 page size
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingAreaByPageGet: async (
      scenarioId: string,
      pageIndex?: number,
      pageSize?: number,
      threshold?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultUrbanFloodingFloodingAreaByPageGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/urban-flooding/flooding-area/by-page`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (pageIndex !== undefined) {
        localVarQueryParameter['PageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['PageSize'] = pageSize
      }

      if (threshold !== undefined) {
        localVarQueryParameter['Threshold'] = threshold
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息 Get all the elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.
     * @summary 获取内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingAreaGet: async (
      scenarioId: string,
      threshold?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultUrbanFloodingFloodingAreaGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/urban-flooding/flooding-area`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (threshold !== undefined) {
        localVarQueryParameter['Threshold'] = threshold
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取内涝方案的不同等级洪水风险区域信息，包括风险区域的几何形状和面积等 Get flood risk area information, including geometry and area of a flood scenario.
     * @summary 获取洪水风险信息 Get Flood risk  result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingRiskGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ResultUrbanFloodingFloodingRiskGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/result/urban-flooding/flooding-risk`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取内涝方案的易涝点统计结果，每个易涝点返回一组平均水深、最小水深、最大水深的时间序列 Get average water depth,min water depth and max water depth of all the flood sensitive points of a flood scenario.
     * @summary 获取易涝点统计信息 Get flood sensitive points statistics
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingSensitivePointsStatisticsGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists(
        'apiV1ResultUrbanFloodingSensitivePointsStatisticsGet',
        'scenarioId',
        scenarioId,
      )
      const localVarPath = `/api/v1/result/urban-flooding/sensitive-points-statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UrbanFloodingApi - functional programming interface
 * @export
 */
export const UrbanFloodingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UrbanFloodingApiAxiosParamCreator(configuration)
  return {
    /**
     * 分页查询内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息Get elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.  order by elements id
     * @summary 分页查询内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [pageIndex] 分页的序号，从1开始 page index, start from 1
     * @param {number} [pageSize] 分页的大小 page size
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanFloodingFloodingAreaByPageGet(
      scenarioId: string,
      pageIndex?: number,
      pageSize?: number,
      threshold?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringPage>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanFloodingFloodingAreaByPageGet(
          scenarioId,
          pageIndex,
          pageSize,
          threshold,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息 Get all the elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.
     * @summary 获取内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanFloodingFloodingAreaGet(
      scenarioId: string,
      threshold?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanFloodingFloodingAreaGet(
          scenarioId,
          threshold,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取内涝方案的不同等级洪水风险区域信息，包括风险区域的几何形状和面积等 Get flood risk area information, including geometry and area of a flood scenario.
     * @summary 获取洪水风险信息 Get Flood risk  result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanFloodingFloodingRiskGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FloodingRiskInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanFloodingFloodingRiskGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取内涝方案的易涝点统计结果，每个易涝点返回一组平均水深、最小水深、最大水深的时间序列 Get average water depth,min water depth and max water depth of all the flood sensitive points of a flood scenario.
     * @summary 获取易涝点统计信息 Get flood sensitive points statistics
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SensitivePointsStatistic>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * UrbanFloodingApi - factory interface
 * @export
 */
export const UrbanFloodingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UrbanFloodingApiFp(configuration)
  return {
    /**
     * 分页查询内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息Get elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.  order by elements id
     * @summary 分页查询内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [pageIndex] 分页的序号，从1开始 page index, start from 1
     * @param {number} [pageSize] 分页的大小 page size
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingAreaByPageGet(
      scenarioId: string,
      pageIndex?: number,
      pageSize?: number,
      threshold?: number,
      options?: any,
    ): AxiosPromise<StringPage> {
      return localVarFp
        .apiV1ResultUrbanFloodingFloodingAreaByPageGet(
          scenarioId,
          pageIndex,
          pageSize,
          threshold,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息 Get all the elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.
     * @summary 获取内涝积水区域信息 Get flooding area
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingAreaGet(
      scenarioId: string,
      threshold?: number,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .apiV1ResultUrbanFloodingFloodingAreaGet(scenarioId, threshold, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取内涝方案的不同等级洪水风险区域信息，包括风险区域的几何形状和面积等 Get flood risk area information, including geometry and area of a flood scenario.
     * @summary 获取洪水风险信息 Get Flood risk  result
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingFloodingRiskGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<FloodingRiskInfo>> {
      return localVarFp
        .apiV1ResultUrbanFloodingFloodingRiskGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取内涝方案的易涝点统计结果，每个易涝点返回一组平均水深、最小水深、最大水深的时间序列 Get average water depth,min water depth and max water depth of all the flood sensitive points of a flood scenario.
     * @summary 获取易涝点统计信息 Get flood sensitive points statistics
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<SensitivePointsStatistic>> {
      return localVarFp
        .apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UrbanFloodingApi - object-oriented interface
 * @export
 * @class UrbanFloodingApi
 * @extends {BaseAPI}
 */
export class UrbanFloodingApi extends BaseAPI {
  /**
   * 分页查询内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息Get elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.  order by elements id
   * @summary 分页查询内涝积水区域信息 Get flooding area
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {number} [pageIndex] 分页的序号，从1开始 page index, start from 1
   * @param {number} [pageSize] 分页的大小 page size
   * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanFloodingApi
   */
  public apiV1ResultUrbanFloodingFloodingAreaByPageGet(
    scenarioId: string,
    pageIndex?: number,
    pageSize?: number,
    threshold?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanFloodingApiFp(this.configuration)
      .apiV1ResultUrbanFloodingFloodingAreaByPageGet(
        scenarioId,
        pageIndex,
        pageSize,
        threshold,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取内涝方案的结果中，所有最大积水深度大于指定水深阈值的网格信息 Get all the elements in the flooding area whose maximum water depth are above the specified threshold of a flood scenario.
   * @summary 获取内涝积水区域信息 Get flooding area
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {number} [threshold] 内涝积水深度阈值 flood water depth threshold
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanFloodingApi
   */
  public apiV1ResultUrbanFloodingFloodingAreaGet(
    scenarioId: string,
    threshold?: number,
    options?: AxiosRequestConfig,
  ) {
    return UrbanFloodingApiFp(this.configuration)
      .apiV1ResultUrbanFloodingFloodingAreaGet(scenarioId, threshold, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取内涝方案的不同等级洪水风险区域信息，包括风险区域的几何形状和面积等 Get flood risk area information, including geometry and area of a flood scenario.
   * @summary 获取洪水风险信息 Get Flood risk  result
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanFloodingApi
   */
  public apiV1ResultUrbanFloodingFloodingRiskGet(scenarioId: string, options?: AxiosRequestConfig) {
    return UrbanFloodingApiFp(this.configuration)
      .apiV1ResultUrbanFloodingFloodingRiskGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取内涝方案的易涝点统计结果，每个易涝点返回一组平均水深、最小水深、最大水深的时间序列 Get average water depth,min water depth and max water depth of all the flood sensitive points of a flood scenario.
   * @summary 获取易涝点统计信息 Get flood sensitive points statistics
   * @param {string} scenarioId 方案的ID scenario’s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanFloodingApi
   */
  public apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return UrbanFloodingApiFp(this.configuration)
      .apiV1ResultUrbanFloodingSensitivePointsStatisticsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
