/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ProcessDataDto } from '../models'
// @ts-ignore
import { QueryProcessDataByDataTyeInput } from '../models'
// @ts-ignore
import { QueryProcessDataByModelFeatureIdInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { TimeseriesProcessDataDto } from '../models'
/**
 * ProcessResultApi - axios parameter creator
 * @export
 */
export const ProcessResultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 通过数据类型查询结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessByDataTypePost: async (
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/process/by-data-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryProcessDataByDataTyeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过来查询对应的数据类型的数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessByModelFeatureIdPost: async (
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/process/by-model-feature-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryProcessDataByModelFeatureIdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过数据类型来查询二次处理的时序结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessTimeseriesByDataTypePost: async (
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/process/timeseries/by-data-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryProcessDataByDataTyeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过点位来查询二次处理结果的时序数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessTimeseriesByModelFeatureIdPost: async (
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/process/timeseries/by-model-feature-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryProcessDataByModelFeatureIdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProcessResultApi - functional programming interface
 * @export
 */
export const ProcessResultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProcessResultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 通过数据类型查询结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultProcessByDataTypePost(
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessDataDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultProcessByDataTypePost(
        queryProcessDataByDataTyeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过来查询对应的数据类型的数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultProcessByModelFeatureIdPost(
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessDataDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultProcessByModelFeatureIdPost(
          queryProcessDataByModelFeatureIdInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过数据类型来查询二次处理的时序结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultProcessTimeseriesByDataTypePost(
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeseriesProcessDataDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultProcessTimeseriesByDataTypePost(
          queryProcessDataByDataTyeInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过点位来查询二次处理结果的时序数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultProcessTimeseriesByModelFeatureIdPost(
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeseriesProcessDataDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ResultProcessTimeseriesByModelFeatureIdPost(
          queryProcessDataByModelFeatureIdInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ProcessResultApi - factory interface
 * @export
 */
export const ProcessResultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProcessResultApiFp(configuration)
  return {
    /**
     *
     * @summary 通过数据类型查询结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessByDataTypePost(
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options?: any,
    ): AxiosPromise<Array<ProcessDataDto>> {
      return localVarFp
        .apiV1ResultProcessByDataTypePost(queryProcessDataByDataTyeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过来查询对应的数据类型的数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessByModelFeatureIdPost(
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options?: any,
    ): AxiosPromise<Array<ProcessDataDto>> {
      return localVarFp
        .apiV1ResultProcessByModelFeatureIdPost(queryProcessDataByModelFeatureIdInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过数据类型来查询二次处理的时序结果数据
     * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessTimeseriesByDataTypePost(
      queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
      options?: any,
    ): AxiosPromise<Array<TimeseriesProcessDataDto>> {
      return localVarFp
        .apiV1ResultProcessTimeseriesByDataTypePost(queryProcessDataByDataTyeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过点位来查询二次处理结果的时序数据
     * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultProcessTimeseriesByModelFeatureIdPost(
      queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
      options?: any,
    ): AxiosPromise<Array<TimeseriesProcessDataDto>> {
      return localVarFp
        .apiV1ResultProcessTimeseriesByModelFeatureIdPost(
          queryProcessDataByModelFeatureIdInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProcessResultApi - object-oriented interface
 * @export
 * @class ProcessResultApi
 * @extends {BaseAPI}
 */
export class ProcessResultApi extends BaseAPI {
  /**
   *
   * @summary 通过数据类型查询结果数据
   * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProcessResultApi
   */
  public apiV1ResultProcessByDataTypePost(
    queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
    options?: AxiosRequestConfig,
  ) {
    return ProcessResultApiFp(this.configuration)
      .apiV1ResultProcessByDataTypePost(queryProcessDataByDataTyeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过来查询对应的数据类型的数据
   * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProcessResultApi
   */
  public apiV1ResultProcessByModelFeatureIdPost(
    queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
    options?: AxiosRequestConfig,
  ) {
    return ProcessResultApiFp(this.configuration)
      .apiV1ResultProcessByModelFeatureIdPost(queryProcessDataByModelFeatureIdInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过数据类型来查询二次处理的时序结果数据
   * @param {QueryProcessDataByDataTyeInput} [queryProcessDataByDataTyeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProcessResultApi
   */
  public apiV1ResultProcessTimeseriesByDataTypePost(
    queryProcessDataByDataTyeInput?: QueryProcessDataByDataTyeInput,
    options?: AxiosRequestConfig,
  ) {
    return ProcessResultApiFp(this.configuration)
      .apiV1ResultProcessTimeseriesByDataTypePost(queryProcessDataByDataTyeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过点位来查询二次处理结果的时序数据
   * @param {QueryProcessDataByModelFeatureIdInput} [queryProcessDataByModelFeatureIdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProcessResultApi
   */
  public apiV1ResultProcessTimeseriesByModelFeatureIdPost(
    queryProcessDataByModelFeatureIdInput?: QueryProcessDataByModelFeatureIdInput,
    options?: AxiosRequestConfig,
  ) {
    return ProcessResultApiFp(this.configuration)
      .apiV1ResultProcessTimeseriesByModelFeatureIdPost(
        queryProcessDataByModelFeatureIdInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
