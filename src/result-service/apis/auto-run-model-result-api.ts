/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddModelResultInput } from '../models';
// @ts-ignore
import { DeleteModelResultInput } from '../models';
// @ts-ignore
import { ModelResultInput } from '../models';
// @ts-ignore
import { ModelResultOutput } from '../models';
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models';
/**
 * AutoRunModelResultApi - axios parameter creator
 * @export
 */
export const AutoRunModelResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除滚动方案模型结果
         * @param {DeleteModelResultInput} [deleteModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultDeletePost: async (deleteModelResultInput?: DeleteModelResultInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auto-run/result/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteModelResultInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取滚动方案模型结果
         * @param {Array<ModelResultInput>} [modelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultPost: async (modelResultInput?: Array<ModelResultInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auto-run/result`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelResultInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存滚动方案模型结果
         * @param {Array<AddModelResultInput>} [addModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultSavePost: async (addModelResultInput?: Array<AddModelResultInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auto-run/result/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addModelResultInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoRunModelResultApi - functional programming interface
 * @export
 */
export const AutoRunModelResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutoRunModelResultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除滚动方案模型结果
         * @param {DeleteModelResultInput} [deleteModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AutoRunResultDeletePost(deleteModelResultInput?: DeleteModelResultInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoRunResultDeletePost(deleteModelResultInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取滚动方案模型结果
         * @param {Array<ModelResultInput>} [modelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AutoRunResultPost(modelResultInput?: Array<ModelResultInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoRunResultPost(modelResultInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 保存滚动方案模型结果
         * @param {Array<AddModelResultInput>} [addModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AutoRunResultSavePost(addModelResultInput?: Array<AddModelResultInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AutoRunResultSavePost(addModelResultInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutoRunModelResultApi - factory interface
 * @export
 */
export const AutoRunModelResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutoRunModelResultApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除滚动方案模型结果
         * @param {DeleteModelResultInput} [deleteModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultDeletePost(deleteModelResultInput?: DeleteModelResultInput, options?: any): AxiosPromise<object> {
            return localVarFp.v1AutoRunResultDeletePost(deleteModelResultInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取滚动方案模型结果
         * @param {Array<ModelResultInput>} [modelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultPost(modelResultInput?: Array<ModelResultInput>, options?: any): AxiosPromise<Array<ModelResultOutput>> {
            return localVarFp.v1AutoRunResultPost(modelResultInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存滚动方案模型结果
         * @param {Array<AddModelResultInput>} [addModelResultInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AutoRunResultSavePost(addModelResultInput?: Array<AddModelResultInput>, options?: any): AxiosPromise<object> {
            return localVarFp.v1AutoRunResultSavePost(addModelResultInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutoRunModelResultApi - object-oriented interface
 * @export
 * @class AutoRunModelResultApi
 * @extends {BaseAPI}
 */
export class AutoRunModelResultApi extends BaseAPI {
    /**
     * 
     * @summary 删除滚动方案模型结果
     * @param {DeleteModelResultInput} [deleteModelResultInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoRunModelResultApi
     */
    public v1AutoRunResultDeletePost(deleteModelResultInput?: DeleteModelResultInput, options?: AxiosRequestConfig) {
        return AutoRunModelResultApiFp(this.configuration).v1AutoRunResultDeletePost(deleteModelResultInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取滚动方案模型结果
     * @param {Array<ModelResultInput>} [modelResultInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoRunModelResultApi
     */
    public v1AutoRunResultPost(modelResultInput?: Array<ModelResultInput>, options?: AxiosRequestConfig) {
        return AutoRunModelResultApiFp(this.configuration).v1AutoRunResultPost(modelResultInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存滚动方案模型结果
     * @param {Array<AddModelResultInput>} [addModelResultInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoRunModelResultApi
     */
    public v1AutoRunResultSavePost(addModelResultInput?: Array<AddModelResultInput>, options?: AxiosRequestConfig) {
        return AutoRunModelResultApiFp(this.configuration).v1AutoRunResultSavePost(addModelResultInput, options).then((request) => request(this.axios, this.basePath));
    }
}
