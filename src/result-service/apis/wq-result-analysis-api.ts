/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseDynamicOutput } from '../models';
// @ts-ignore
import { BaseTimeseriesOutput } from '../models';
// @ts-ignore
import { ModelResultBranchAffectedInfoOutput } from '../models';
// @ts-ignore
import { ModelResultPipeDispatchStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipePumpStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipePumpVolumeStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSewagePlantAvgStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSewagePlantInstantStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSewagePlantStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSmartWellOverFlowStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSmartWellStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeSmartWellTotalLoadStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeStorageStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeValveStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultPipeWQsOutput } from '../models';
// @ts-ignore
import { ModelResultPipeWqInput } from '../models';
// @ts-ignore
import { ModelResultPipeWqOutput } from '../models';
// @ts-ignore
import { ModelResultRiverControlStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverDamStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverGatePumpStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverGateStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverGateTotalStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverPumpStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverPumpTotalStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverQualifiedStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultRiverWQsOutput } from '../models';
// @ts-ignore
import { ModelResultRiverWqInput } from '../models';
// @ts-ignore
import { ModelResultRiverWqOutput } from '../models';
// @ts-ignore
import { ModelResultRiverWqStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultStationWqStatisticInput } from '../models';
// @ts-ignore
import { ModelResultStationWqStatisticOutput } from '../models';
// @ts-ignore
import { ModelResultTimesOutput } from '../models';
// @ts-ignore
import { ModelResultWqTimeseriesInput } from '../models';
// @ts-ignore
import { ModelResultWqTimeseriesOutput } from '../models';
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models';
/**
 * WqResultAnalysisApi - axios parameter creator
 * @export
 */
export const WqResultAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取管道基础水质结果数据 Get network basic water quality result
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkBasicAllGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/basic-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取管道水质的动态变化时间序列结果 Get the dynamic change time series results of pipeline water quality.
         * @summary 管道水质动态结果 Get dynamic results of pipeline water quality
         * @param {ModelResultPipeWqInput} [modelResultPipeWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkDynamicPost: async (modelResultPipeWqInput?: ModelResultPipeWqInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/dynamic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelResultPipeWqInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取所有节点时间范围内的指定水质项数据 Get the specified water quality item data within the time range of all nodes
         * @summary 获取所有节点的水质数据 Get water quality data of all nodes
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项
         * @param {string} [startTime] 开始时间 start time
         * @param {string} [endTime] 结束时间 end time
         * @param {number} [frequency] 频率 frequency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkNodeDynamicGet: async (scenarioId: string, qualityCode?: string, startTime?: string, endTime?: string, frequency?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioId' is not null or undefined
            assertParamExists('apiV1ResultAnalysisWqNetworkNodeDynamicGet', 'scenarioId', scenarioId)
            const localVarPath = `/api/v1/result-analysis/wq/network/node-dynamic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (qualityCode !== undefined) {
                localVarQueryParameter['QualityCode'] = qualityCode;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = endTime;
            }

            if (frequency !== undefined) {
                localVarQueryParameter['Frequency'] = frequency;
            }

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取单个节点指定水质项数据 Get the data of the specified water quality item of a single node
         * @summary 获取单个节点的水质数据 Get water quality data of a single node
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项 water quality item
         * @param {string} [modelFeatureId] 模型ID modelfeature id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkNodeTimeseriesGet: async (scenarioId: string, qualityCode?: string, modelFeatureId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioId' is not null or undefined
            assertParamExists('apiV1ResultAnalysisWqNetworkNodeTimeseriesGet', 'scenarioId', scenarioId)
            const localVarPath = `/api/v1/result-analysis/wq/network/node-timeseries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (qualityCode !== undefined) {
                localVarQueryParameter['QualityCode'] = qualityCode;
            }

            if (modelFeatureId !== undefined) {
                localVarQueryParameter['ModelFeatureId'] = modelFeatureId;
            }

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取管网泵的开启时长与补水总量的统计信息 Get the statistical information of the starting time and total make-up water of the pipe network pump of a scenario.
         * @summary 管网泵的开启时长与补水总量 Get the starting time and total make-up water of the pipe network pump
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkPumpStatisticGet: async (scenarioid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/pump-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioid !== undefined) {
                localVarQueryParameter['Scenarioid'] = scenarioid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取管网污水处理厂进水总量和水质平均浓度预估统计信息 Get the estimated statistics of total inflow and average concentration of water quality of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂平均浓度统计 statistics of average concentration of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/sewageplant-avg-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取管网污水处理厂瞬时水质浓度统计信息 Get statistical information of instantaneous water quality concentration of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂瞬时浓度统计 Get instantaneous concentration statistics of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/sewageplant-instantaneous-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取污水处理厂进水总量、水质平均浓度和瞬时浓度的统计信息 Get statistical information of total inflow, average water quality concentration and instantaneous concentration of sewage treatment plant of a scenario.
         * @summary 污水处理厂运行统计 Get operation statistics of sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/sewageplant-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取智能分流井个数，水质项，水质的负荷量的统计信息 Get statistical information on the number of intelligent diversion wells, water quality items and water quality load of a scenario.
         * @summary 智能分流排放负荷总量，包含分流井个数，水质项，水质的负荷量。 Get the total amount of intelligent shunt discharge load
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/smartwell-load-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/v1/result-analysis/wq/network/smartwell-overflow-statistic
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/smartwell-overflow-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get the status of drain valve and drain valve, cumulative opening time of drain valve, and sump liquid level of a scenario.
         * @summary 智能分流井运行统计，包含排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get statistics of intelligent diverter well valves
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/smartwell-valve-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取调蓄管道调蓄总量和出水量信息 Get the information of the total storage volume and water yield of the storage pipeline of a scenario.
         * @summary 调蓄管道调蓄量统计 Get statistics of storage capacity of storage pipeline
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/storagepipe-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取调蓄泵站调蓄量信息 Get the storage capacity information of the storage pump of a scenario.
         * @summary 管网调蓄泵站调蓄量统计 Get statistics of the storage capacity of the pipe network storage pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/storagepump-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长，泵的开启时长与补水总量的统计信息 Get the statistics of the maximum opening and opening duration of pipe network valves, the opening duration of pumps and the total amount of make-up water of a scenario.
         * @summary 管网阀门的最大开度与开启时长，泵的开启时长与补水总量 Get statistics of pipe network valves and pumps
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStructureControlStatisticGet: async (scenarioid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/structure-control-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioid !== undefined) {
                localVarQueryParameter['Scenarioid'] = scenarioid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长统计信息 Get statistics of maximum opening and opening duration of pipe network valves of a scenario.
         * @summary 管网阀门的最大开度与开启时长 Get the maximum opening and opening duration of pipe network valves
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkValveStatisticGet: async (scenarioid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/network/valve-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioid !== undefined) {
                localVarQueryParameter['Scenarioid'] = scenarioid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取突发水污染事故所有河道是否受影响 Get whether all rivers are affected by sudden water pollution accidents of a scenario.
         * @summary 突发水污染事故，统计受影响的河道 Get the river affected by sudden water pollution accident
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverAffectedzoneGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/affectedzone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取河道基础水质结果数据 Get river basic water quality result
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverBasicAllGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/basic-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位 Get the maximum control water level and minimum control water level of the dam of a scenario.
         * @summary 坝的最高控制水位与最低控制水位 Get maximum and minimum control water levels of the dam
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverDamControlStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/dam-control-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取河道水质的动态变化时间序列结果 Get the dynamic change time series results of river water quality.
         * @summary 河道水质动态结果 Get dynamic results of river water quality
         * @param {ModelResultRiverWqInput} [modelResultRiverWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverDynamicPost: async (modelResultRiverWqInput?: ModelResultRiverWqInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/dynamic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelResultRiverWqInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取闸的开停次数与开启时长 Get the opening and closing times and opening duration of the gate of a scenario.
         * @summary 闸的总开停次数与开启时长 Get the total opening and closing times and opening duration of the brake
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverGateControlStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/gate-control-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取河网闸运行情况统计，包含开关状态、开启时长补水量、补水时长、开启次数等信息 Get operation statistics of river network gate of a scenario, including switch status, opening duration, water supplement amount, water supplement duration, opening times and other information.
         * @summary 河网闸运行情况统计 Get statistics of river network gate
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverGateStatisticGet: async (sceanrioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/gate-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sceanrioId !== undefined) {
                localVarQueryParameter['SceanrioId'] = sceanrioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取河网断面达标率调度统计，包含考核断面、水质达标率列表等信息 Get the dispatching statistics of the standard rate of river network section of a scenario, including assessment section, water quality compliance rate list and other information.
         * @summary 河网断面达标率调度统计 Get the dispatching statistics of the standard rate of river network section
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverKeysectionStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/keysection-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取泵的补水时长与补水总量 Get the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 泵的总补水时长和补水总量 Get total make-up water duration and total make-up water volume of the pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverPumpControlStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/pump-control-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取河网泵运行情况信息统计，包含补水量、补水时长等信息 Get the operation information statistics of river network pumps of a scenario， including the water make-up amount, water make-up duration and other information .
         * @summary 河网泵运行情况统计 Get statistics of river network pump operation
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverPumpStatisticGet: async (sceanrioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/pump-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sceanrioId !== undefined) {
                localVarQueryParameter['SceanrioId'] = sceanrioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID、水质项、考核断面，获取统计该断面上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 According to the scheme ID, water quality item and assessment section, obtain the pollutant concentration change curve on the section, as well as the arrival time, departure time and maximum concentration value of pollutants.
         * @summary 突发水污染事故，统计某个计算点上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 Get information on sudden water pollution accidents
         * @param {ModelResultStationWqStatisticInput} [modelResultStationWqStatisticInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStationStatisticPost: async (modelResultStationWqStatisticInput?: ModelResultStationWqStatisticInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/station-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelResultStationWqStatisticInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取河道水质达标率、超标时长，水质项浓度最大值统计 Get the statistics of river water quality compliance rate, exceeding standard duration and maximum concentration of water quality items of a scenario .
         * @summary 获取河道水质预报统计 river water quality forecast statistics
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get the maximum control water level and minimum control water level of the dam, the opening and closing times and opening duration of the gate, the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get statistical information of dam, gate and pump of structures
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStructureControlStatisticGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/structure-control-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据方案ID，获取河网闸门、泵站的运行统计信息，包含开启时长，开关状态、补水量等信息 Get the operation statistics of river network gates and pump stations, including the opening duration, switch status, water supplement amount and other information of a scenario .
         * @summary 河网闸门、泵运行预报统计 Get the operation forecast statistical information of river network gates and pumps
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStructureStatisticGet: async (sceanrioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/structure-statistic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sceanrioId !== undefined) {
                localVarQueryParameter['SceanrioId'] = sceanrioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取方案中单个河道里程的时间序列数据 Get time series data of single river Chainage in the scenario.
         * @summary 获取河道单点时间序列结果 Get single point time series results of river
         * @param {ModelResultWqTimeseriesInput} [modelResultWqTimeseriesInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverTimeseriesPost: async (modelResultWqTimeseriesInput?: ModelResultWqTimeseriesInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/river/timeseries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelResultWqTimeseriesInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取方案模型的时间信息 Get model time info of a scenario
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqTimeinfoGet: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/result-analysis/wq/timeinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenarioId !== undefined) {
                localVarQueryParameter['ScenarioId'] = scenarioId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WqResultAnalysisApi - functional programming interface
 * @export
 */
export const WqResultAnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WqResultAnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取管道基础水质结果数据 Get network basic water quality result
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeWqOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取管道水质的动态变化时间序列结果 Get the dynamic change time series results of pipeline water quality.
         * @summary 管道水质动态结果 Get dynamic results of pipeline water quality
         * @param {ModelResultPipeWqInput} [modelResultPipeWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput?: ModelResultPipeWqInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultPipeWQsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取所有节点时间范围内的指定水质项数据 Get the specified water quality item data within the time range of all nodes
         * @summary 获取所有节点的水质数据 Get water quality data of all nodes
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项
         * @param {string} [startTime] 开始时间 start time
         * @param {string} [endTime] 结束时间 end time
         * @param {number} [frequency] 频率 frequency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId: string, qualityCode?: string, startTime?: string, endTime?: string, frequency?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId, qualityCode, startTime, endTime, frequency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取单个节点指定水质项数据 Get the data of the specified water quality item of a single node
         * @summary 获取单个节点的水质数据 Get water quality data of a single node
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项 water quality item
         * @param {string} [modelFeatureId] 模型ID modelfeature id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId: string, qualityCode?: string, modelFeatureId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseTimeseriesOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId, qualityCode, modelFeatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取管网泵的开启时长与补水总量的统计信息 Get the statistical information of the starting time and total make-up water of the pipe network pump of a scenario.
         * @summary 管网泵的开启时长与补水总量 Get the starting time and total make-up water of the pipe network pump
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipePumpStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取管网污水处理厂进水总量和水质平均浓度预估统计信息 Get the estimated statistics of total inflow and average concentration of water quality of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂平均浓度统计 statistics of average concentration of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeSewagePlantAvgStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取管网污水处理厂瞬时水质浓度统计信息 Get statistical information of instantaneous water quality concentration of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂瞬时浓度统计 Get instantaneous concentration statistics of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeSewagePlantInstantStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取污水处理厂进水总量、水质平均浓度和瞬时浓度的统计信息 Get statistical information of total inflow, average water quality concentration and instantaneous concentration of sewage treatment plant of a scenario.
         * @summary 污水处理厂运行统计 Get operation statistics of sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultPipeSewagePlantStatisticOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取智能分流井个数，水质项，水质的负荷量的统计信息 Get statistical information on the number of intelligent diversion wells, water quality items and water quality load of a scenario.
         * @summary 智能分流排放负荷总量，包含分流井个数，水质项，水质的负荷量。 Get the total amount of intelligent shunt discharge load
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeSmartWellTotalLoadStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/v1/result-analysis/wq/network/smartwell-overflow-statistic
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultPipeSmartWellOverFlowStatisticOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get the status of drain valve and drain valve, cumulative opening time of drain valve, and sump liquid level of a scenario.
         * @summary 智能分流井运行统计，包含排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get statistics of intelligent diverter well valves
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeSmartWellStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取调蓄管道调蓄总量和出水量信息 Get the information of the total storage volume and water yield of the storage pipeline of a scenario.
         * @summary 调蓄管道调蓄量统计 Get statistics of storage capacity of storage pipeline
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeStorageStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取调蓄泵站调蓄量信息 Get the storage capacity information of the storage pump of a scenario.
         * @summary 管网调蓄泵站调蓄量统计 Get statistics of the storage capacity of the pipe network storage pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipePumpVolumeStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长，泵的开启时长与补水总量的统计信息 Get the statistics of the maximum opening and opening duration of pipe network valves, the opening duration of pumps and the total amount of make-up water of a scenario.
         * @summary 管网阀门的最大开度与开启时长，泵的开启时长与补水总量 Get statistics of pipe network valves and pumps
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultPipeDispatchStatisticOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长统计信息 Get statistics of maximum opening and opening duration of pipe network valves of a scenario.
         * @summary 管网阀门的最大开度与开启时长 Get the maximum opening and opening duration of pipe network valves
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultPipeValveStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取突发水污染事故所有河道是否受影响 Get whether all rivers are affected by sudden water pollution accidents of a scenario.
         * @summary 突发水污染事故，统计受影响的河道 Get the river affected by sudden water pollution accident
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultBranchAffectedInfoOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取河道基础水质结果数据 Get river basic water quality result
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverWqOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位 Get the maximum control water level and minimum control water level of the dam of a scenario.
         * @summary 坝的最高控制水位与最低控制水位 Get maximum and minimum control water levels of the dam
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverDamStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取河道水质的动态变化时间序列结果 Get the dynamic change time series results of river water quality.
         * @summary 河道水质动态结果 Get dynamic results of river water quality
         * @param {ModelResultRiverWqInput} [modelResultRiverWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput?: ModelResultRiverWqInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultRiverWQsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取闸的开停次数与开启时长 Get the opening and closing times and opening duration of the gate of a scenario.
         * @summary 闸的总开停次数与开启时长 Get the total opening and closing times and opening duration of the brake
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverGateTotalStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取河网闸运行情况统计，包含开关状态、开启时长补水量、补水时长、开启次数等信息 Get operation statistics of river network gate of a scenario, including switch status, opening duration, water supplement amount, water supplement duration, opening times and other information.
         * @summary 河网闸运行情况统计 Get statistics of river network gate
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverGateStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取河网断面达标率调度统计，包含考核断面、水质达标率列表等信息 Get the dispatching statistics of the standard rate of river network section of a scenario, including assessment section, water quality compliance rate list and other information.
         * @summary 河网断面达标率调度统计 Get the dispatching statistics of the standard rate of river network section
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverQualifiedStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取泵的补水时长与补水总量 Get the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 泵的总补水时长和补水总量 Get total make-up water duration and total make-up water volume of the pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverPumpTotalStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取河网泵运行情况信息统计，包含补水量、补水时长等信息 Get the operation information statistics of river network pumps of a scenario， including the water make-up amount, water make-up duration and other information .
         * @summary 河网泵运行情况统计 Get statistics of river network pump operation
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverPumpStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID、水质项、考核断面，获取统计该断面上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 According to the scheme ID, water quality item and assessment section, obtain the pollutant concentration change curve on the section, as well as the arrival time, departure time and maximum concentration value of pollutants.
         * @summary 突发水污染事故，统计某个计算点上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 Get information on sudden water pollution accidents
         * @param {ModelResultStationWqStatisticInput} [modelResultStationWqStatisticInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput?: ModelResultStationWqStatisticInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultStationWqStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取河道水质达标率、超标时长，水质项浓度最大值统计 Get the statistics of river water quality compliance rate, exceeding standard duration and maximum concentration of water quality items of a scenario .
         * @summary 获取河道水质预报统计 river water quality forecast statistics
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverWqStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get the maximum control water level and minimum control water level of the dam, the opening and closing times and opening duration of the gate, the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get statistical information of dam, gate and pump of structures
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultRiverControlStatisticOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 根据方案ID，获取河网闸门、泵站的运行统计信息，包含开启时长，开关状态、补水量等信息 Get the operation statistics of river network gates and pump stations, including the opening duration, switch status, water supplement amount and other information of a scenario .
         * @summary 河网闸门、泵运行预报统计 Get the operation forecast statistical information of river network gates and pumps
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultRiverGatePumpStatisticOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取方案中单个河道里程的时间序列数据 Get time series data of single river Chainage in the scenario.
         * @summary 获取河道单点时间序列结果 Get single point time series results of river
         * @param {ModelResultWqTimeseriesInput} [modelResultWqTimeseriesInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput?: ModelResultWqTimeseriesInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelResultWqTimeseriesOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取方案模型的时间信息 Get model time info of a scenario
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultAnalysisWqTimeinfoGet(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelResultTimesOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultAnalysisWqTimeinfoGet(scenarioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WqResultAnalysisApi - factory interface
 * @export
 */
export const WqResultAnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WqResultAnalysisApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取管道基础水质结果数据 Get network basic water quality result
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeWqOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取管道水质的动态变化时间序列结果 Get the dynamic change time series results of pipeline water quality.
         * @summary 管道水质动态结果 Get dynamic results of pipeline water quality
         * @param {ModelResultPipeWqInput} [modelResultPipeWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput?: ModelResultPipeWqInput, options?: any): AxiosPromise<ModelResultPipeWQsOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取所有节点时间范围内的指定水质项数据 Get the specified water quality item data within the time range of all nodes
         * @summary 获取所有节点的水质数据 Get water quality data of all nodes
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项
         * @param {string} [startTime] 开始时间 start time
         * @param {string} [endTime] 结束时间 end time
         * @param {number} [frequency] 频率 frequency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId: string, qualityCode?: string, startTime?: string, endTime?: string, frequency?: number, options?: any): AxiosPromise<BaseDynamicOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId, qualityCode, startTime, endTime, frequency, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取单个节点指定水质项数据 Get the data of the specified water quality item of a single node
         * @summary 获取单个节点的水质数据 Get water quality data of a single node
         * @param {string} scenarioId 方案的ID scenario’s ID
         * @param {string} [qualityCode] 水质项 water quality item
         * @param {string} [modelFeatureId] 模型ID modelfeature id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId: string, qualityCode?: string, modelFeatureId?: string, options?: any): AxiosPromise<BaseTimeseriesOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId, qualityCode, modelFeatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取管网泵的开启时长与补水总量的统计信息 Get the statistical information of the starting time and total make-up water of the pipe network pump of a scenario.
         * @summary 管网泵的开启时长与补水总量 Get the starting time and total make-up water of the pipe network pump
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid?: string, options?: any): AxiosPromise<Array<ModelResultPipePumpStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取管网污水处理厂进水总量和水质平均浓度预估统计信息 Get the estimated statistics of total inflow and average concentration of water quality of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂平均浓度统计 statistics of average concentration of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeSewagePlantAvgStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取管网污水处理厂瞬时水质浓度统计信息 Get statistical information of instantaneous water quality concentration of pipe network sewage treatment plant of a scenario.
         * @summary 管网污水处理厂瞬时浓度统计 Get instantaneous concentration statistics of pipe network sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeSewagePlantInstantStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取污水处理厂进水总量、水质平均浓度和瞬时浓度的统计信息 Get statistical information of total inflow, average water quality concentration and instantaneous concentration of sewage treatment plant of a scenario.
         * @summary 污水处理厂运行统计 Get operation statistics of sewage treatment plant
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId?: string, options?: any): AxiosPromise<ModelResultPipeSewagePlantStatisticOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取智能分流井个数，水质项，水质的负荷量的统计信息 Get statistical information on the number of intelligent diversion wells, water quality items and water quality load of a scenario.
         * @summary 智能分流排放负荷总量，包含分流井个数，水质项，水质的负荷量。 Get the total amount of intelligent shunt discharge load
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeSmartWellTotalLoadStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/v1/result-analysis/wq/network/smartwell-overflow-statistic
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId?: string, options?: any): AxiosPromise<ModelResultPipeSmartWellOverFlowStatisticOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get the status of drain valve and drain valve, cumulative opening time of drain valve, and sump liquid level of a scenario.
         * @summary 智能分流井运行统计，包含排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get statistics of intelligent diverter well valves
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeSmartWellStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取调蓄管道调蓄总量和出水量信息 Get the information of the total storage volume and water yield of the storage pipeline of a scenario.
         * @summary 调蓄管道调蓄量统计 Get statistics of storage capacity of storage pipeline
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipeStorageStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取调蓄泵站调蓄量信息 Get the storage capacity information of the storage pump of a scenario.
         * @summary 管网调蓄泵站调蓄量统计 Get statistics of the storage capacity of the pipe network storage pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultPipePumpVolumeStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长，泵的开启时长与补水总量的统计信息 Get the statistics of the maximum opening and opening duration of pipe network valves, the opening duration of pumps and the total amount of make-up water of a scenario.
         * @summary 管网阀门的最大开度与开启时长，泵的开启时长与补水总量 Get statistics of pipe network valves and pumps
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid?: string, options?: any): AxiosPromise<ModelResultPipeDispatchStatisticOutput> {
            return localVarFp.apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取管网阀门的最大开度与开启时长统计信息 Get statistics of maximum opening and opening duration of pipe network valves of a scenario.
         * @summary 管网阀门的最大开度与开启时长 Get the maximum opening and opening duration of pipe network valves
         * @param {string} [scenarioid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid?: string, options?: any): AxiosPromise<Array<ModelResultPipeValveStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取突发水污染事故所有河道是否受影响 Get whether all rivers are affected by sudden water pollution accidents of a scenario.
         * @summary 突发水污染事故，统计受影响的河道 Get the river affected by sudden water pollution accident
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultBranchAffectedInfoOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取河道基础水质结果数据 Get river basic water quality result
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverWqOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位 Get the maximum control water level and minimum control water level of the dam of a scenario.
         * @summary 坝的最高控制水位与最低控制水位 Get maximum and minimum control water levels of the dam
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverDamStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取河道水质的动态变化时间序列结果 Get the dynamic change time series results of river water quality.
         * @summary 河道水质动态结果 Get dynamic results of river water quality
         * @param {ModelResultRiverWqInput} [modelResultRiverWqInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput?: ModelResultRiverWqInput, options?: any): AxiosPromise<ModelResultRiverWQsOutput> {
            return localVarFp.apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取闸的开停次数与开启时长 Get the opening and closing times and opening duration of the gate of a scenario.
         * @summary 闸的总开停次数与开启时长 Get the total opening and closing times and opening duration of the brake
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverGateTotalStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取河网闸运行情况统计，包含开关状态、开启时长补水量、补水时长、开启次数等信息 Get operation statistics of river network gate of a scenario, including switch status, opening duration, water supplement amount, water supplement duration, opening times and other information.
         * @summary 河网闸运行情况统计 Get statistics of river network gate
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverGateStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取河网断面达标率调度统计，包含考核断面、水质达标率列表等信息 Get the dispatching statistics of the standard rate of river network section of a scenario, including assessment section, water quality compliance rate list and other information.
         * @summary 河网断面达标率调度统计 Get the dispatching statistics of the standard rate of river network section
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverQualifiedStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取泵的补水时长与补水总量 Get the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 泵的总补水时长和补水总量 Get total make-up water duration and total make-up water volume of the pump
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverPumpTotalStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取河网泵运行情况信息统计，包含补水量、补水时长等信息 Get the operation information statistics of river network pumps of a scenario， including the water make-up amount, water make-up duration and other information .
         * @summary 河网泵运行情况统计 Get statistics of river network pump operation
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverPumpStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID、水质项、考核断面，获取统计该断面上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 According to the scheme ID, water quality item and assessment section, obtain the pollutant concentration change curve on the section, as well as the arrival time, departure time and maximum concentration value of pollutants.
         * @summary 突发水污染事故，统计某个计算点上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 Get information on sudden water pollution accidents
         * @param {ModelResultStationWqStatisticInput} [modelResultStationWqStatisticInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput?: ModelResultStationWqStatisticInput, options?: any): AxiosPromise<Array<ModelResultStationWqStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取河道水质达标率、超标时长，水质项浓度最大值统计 Get the statistics of river water quality compliance rate, exceeding standard duration and maximum concentration of water quality items of a scenario .
         * @summary 获取河道水质预报统计 river water quality forecast statistics
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverWqStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get the maximum control water level and minimum control water level of the dam, the opening and closing times and opening duration of the gate, the water make-up duration of the pump and the total water make-up of a scenario.
         * @summary 坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get statistical information of dam, gate and pump of structures
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultRiverControlStatisticOutput>> {
            return localVarFp.apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据方案ID，获取河网闸门、泵站的运行统计信息，包含开启时长，开关状态、补水量等信息 Get the operation statistics of river network gates and pump stations, including the opening duration, switch status, water supplement amount and other information of a scenario .
         * @summary 河网闸门、泵运行预报统计 Get the operation forecast statistical information of river network gates and pumps
         * @param {string} [sceanrioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId?: string, options?: any): AxiosPromise<ModelResultRiverGatePumpStatisticOutput> {
            return localVarFp.apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取方案中单个河道里程的时间序列数据 Get time series data of single river Chainage in the scenario.
         * @summary 获取河道单点时间序列结果 Get single point time series results of river
         * @param {ModelResultWqTimeseriesInput} [modelResultWqTimeseriesInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput?: ModelResultWqTimeseriesInput, options?: any): AxiosPromise<ModelResultWqTimeseriesOutput> {
            return localVarFp.apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取方案模型的时间信息 Get model time info of a scenario
         * @param {string} [scenarioId] 方案ID scenario id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultAnalysisWqTimeinfoGet(scenarioId?: string, options?: any): AxiosPromise<Array<ModelResultTimesOutput>> {
            return localVarFp.apiV1ResultAnalysisWqTimeinfoGet(scenarioId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WqResultAnalysisApi - object-oriented interface
 * @export
 * @class WqResultAnalysisApi
 * @extends {BaseAPI}
 */
export class WqResultAnalysisApi extends BaseAPI {
    /**
     * 
     * @summary 获取管道基础水质结果数据 Get network basic water quality result
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkBasicAllGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取管道水质的动态变化时间序列结果 Get the dynamic change time series results of pipeline water quality.
     * @summary 管道水质动态结果 Get dynamic results of pipeline water quality
     * @param {ModelResultPipeWqInput} [modelResultPipeWqInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput?: ModelResultPipeWqInput, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkDynamicPost(modelResultPipeWqInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取所有节点时间范围内的指定水质项数据 Get the specified water quality item data within the time range of all nodes
     * @summary 获取所有节点的水质数据 Get water quality data of all nodes
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [qualityCode] 水质项
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {number} [frequency] 频率 frequency
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId: string, qualityCode?: string, startTime?: string, endTime?: string, frequency?: number, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkNodeDynamicGet(scenarioId, qualityCode, startTime, endTime, frequency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取单个节点指定水质项数据 Get the data of the specified water quality item of a single node
     * @summary 获取单个节点的水质数据 Get water quality data of a single node
     * @param {string} scenarioId 方案的ID scenario’s ID
     * @param {string} [qualityCode] 水质项 water quality item
     * @param {string} [modelFeatureId] 模型ID modelfeature id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId: string, qualityCode?: string, modelFeatureId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkNodeTimeseriesGet(scenarioId, qualityCode, modelFeatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取管网泵的开启时长与补水总量的统计信息 Get the statistical information of the starting time and total make-up water of the pipe network pump of a scenario.
     * @summary 管网泵的开启时长与补水总量 Get the starting time and total make-up water of the pipe network pump
     * @param {string} [scenarioid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkPumpStatisticGet(scenarioid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取管网污水处理厂进水总量和水质平均浓度预估统计信息 Get the estimated statistics of total inflow and average concentration of water quality of pipe network sewage treatment plant of a scenario.
     * @summary 管网污水处理厂平均浓度统计 statistics of average concentration of pipe network sewage treatment plant
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSewageplantAvgStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取管网污水处理厂瞬时水质浓度统计信息 Get statistical information of instantaneous water quality concentration of pipe network sewage treatment plant of a scenario.
     * @summary 管网污水处理厂瞬时浓度统计 Get instantaneous concentration statistics of pipe network sewage treatment plant
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSewageplantInstantaneousStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取污水处理厂进水总量、水质平均浓度和瞬时浓度的统计信息 Get statistical information of total inflow, average water quality concentration and instantaneous concentration of sewage treatment plant of a scenario.
     * @summary 污水处理厂运行统计 Get operation statistics of sewage treatment plant
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSewageplantStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取智能分流井个数，水质项，水质的负荷量的统计信息 Get statistical information on the number of intelligent diversion wells, water quality items and water quality load of a scenario.
     * @summary 智能分流排放负荷总量，包含分流井个数，水质项，水质的负荷量。 Get the total amount of intelligent shunt discharge load
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSmartwellLoadStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/v1/result-analysis/wq/network/smartwell-overflow-statistic
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSmartwellOverflowStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get the status of drain valve and drain valve, cumulative opening time of drain valve, and sump liquid level of a scenario.
     * @summary 智能分流井运行统计，包含排污阀、排河阀状态，排河阀累计开启时间，井仓液位 Get statistics of intelligent diverter well valves
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkSmartwellValveStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取调蓄管道调蓄总量和出水量信息 Get the information of the total storage volume and water yield of the storage pipeline of a scenario.
     * @summary 调蓄管道调蓄量统计 Get statistics of storage capacity of storage pipeline
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkStoragepipeStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取调蓄泵站调蓄量信息 Get the storage capacity information of the storage pump of a scenario.
     * @summary 管网调蓄泵站调蓄量统计 Get statistics of the storage capacity of the pipe network storage pump
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkStoragepumpStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取管网阀门的最大开度与开启时长，泵的开启时长与补水总量的统计信息 Get the statistics of the maximum opening and opening duration of pipe network valves, the opening duration of pumps and the total amount of make-up water of a scenario.
     * @summary 管网阀门的最大开度与开启时长，泵的开启时长与补水总量 Get statistics of pipe network valves and pumps
     * @param {string} [scenarioid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkStructureControlStatisticGet(scenarioid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取管网阀门的最大开度与开启时长统计信息 Get statistics of maximum opening and opening duration of pipe network valves of a scenario.
     * @summary 管网阀门的最大开度与开启时长 Get the maximum opening and opening duration of pipe network valves
     * @param {string} [scenarioid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqNetworkValveStatisticGet(scenarioid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取突发水污染事故所有河道是否受影响 Get whether all rivers are affected by sudden water pollution accidents of a scenario.
     * @summary 突发水污染事故，统计受影响的河道 Get the river affected by sudden water pollution accident
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverAffectedzoneGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取河道基础水质结果数据 Get river basic water quality result
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverBasicAllGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取坝的最高控制水位与最低控制水位 Get the maximum control water level and minimum control water level of the dam of a scenario.
     * @summary 坝的最高控制水位与最低控制水位 Get maximum and minimum control water levels of the dam
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverDamControlStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取河道水质的动态变化时间序列结果 Get the dynamic change time series results of river water quality.
     * @summary 河道水质动态结果 Get dynamic results of river water quality
     * @param {ModelResultRiverWqInput} [modelResultRiverWqInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput?: ModelResultRiverWqInput, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverDynamicPost(modelResultRiverWqInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取闸的开停次数与开启时长 Get the opening and closing times and opening duration of the gate of a scenario.
     * @summary 闸的总开停次数与开启时长 Get the total opening and closing times and opening duration of the brake
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverGateControlStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取河网闸运行情况统计，包含开关状态、开启时长补水量、补水时长、开启次数等信息 Get operation statistics of river network gate of a scenario, including switch status, opening duration, water supplement amount, water supplement duration, opening times and other information.
     * @summary 河网闸运行情况统计 Get statistics of river network gate
     * @param {string} [sceanrioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverGateStatisticGet(sceanrioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取河网断面达标率调度统计，包含考核断面、水质达标率列表等信息 Get the dispatching statistics of the standard rate of river network section of a scenario, including assessment section, water quality compliance rate list and other information.
     * @summary 河网断面达标率调度统计 Get the dispatching statistics of the standard rate of river network section
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverKeysectionStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取泵的补水时长与补水总量 Get the water make-up duration of the pump and the total water make-up of a scenario.
     * @summary 泵的总补水时长和补水总量 Get total make-up water duration and total make-up water volume of the pump
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverPumpControlStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取河网泵运行情况信息统计，包含补水量、补水时长等信息 Get the operation information statistics of river network pumps of a scenario， including the water make-up amount, water make-up duration and other information .
     * @summary 河网泵运行情况统计 Get statistics of river network pump operation
     * @param {string} [sceanrioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverPumpStatisticGet(sceanrioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID、水质项、考核断面，获取统计该断面上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 According to the scheme ID, water quality item and assessment section, obtain the pollutant concentration change curve on the section, as well as the arrival time, departure time and maximum concentration value of pollutants.
     * @summary 突发水污染事故，统计某个计算点上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值 Get information on sudden water pollution accidents
     * @param {ModelResultStationWqStatisticInput} [modelResultStationWqStatisticInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput?: ModelResultStationWqStatisticInput, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverStationStatisticPost(modelResultStationWqStatisticInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取河道水质达标率、超标时长，水质项浓度最大值统计 Get the statistics of river water quality compliance rate, exceeding standard duration and maximum concentration of water quality items of a scenario .
     * @summary 获取河道水质预报统计 river water quality forecast statistics
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get the maximum control water level and minimum control water level of the dam, the opening and closing times and opening duration of the gate, the water make-up duration of the pump and the total water make-up of a scenario.
     * @summary 坝的最高控制水位与最低控制水位，闸的开停次数与开启时长，泵的补水时长与补水总量 Get statistical information of dam, gate and pump of structures
     * @param {string} [scenarioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverStructureControlStatisticGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据方案ID，获取河网闸门、泵站的运行统计信息，包含开启时长，开关状态、补水量等信息 Get the operation statistics of river network gates and pump stations, including the opening duration, switch status, water supplement amount and other information of a scenario .
     * @summary 河网闸门、泵运行预报统计 Get the operation forecast statistical information of river network gates and pumps
     * @param {string} [sceanrioId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverStructureStatisticGet(sceanrioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取方案中单个河道里程的时间序列数据 Get time series data of single river Chainage in the scenario.
     * @summary 获取河道单点时间序列结果 Get single point time series results of river
     * @param {ModelResultWqTimeseriesInput} [modelResultWqTimeseriesInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput?: ModelResultWqTimeseriesInput, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqRiverTimeseriesPost(modelResultWqTimeseriesInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取方案模型的时间信息 Get model time info of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WqResultAnalysisApi
     */
    public apiV1ResultAnalysisWqTimeinfoGet(scenarioId?: string, options?: AxiosRequestConfig) {
        return WqResultAnalysisApiFp(this.configuration).apiV1ResultAnalysisWqTimeinfoGet(scenarioId, options).then((request) => request(this.axios, this.basePath));
    }
}
