/* eslint-disable */
/**
 * 模型结果服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { QueryRainOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * RainLogApi - axios parameter creator
 * @export
 */
export const RainLogApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 根据ID查询降雨记录 Get rainfall log by id
     * @param {string} [rainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainGetGet: async (
      rainId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/result/rain/get`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (rainId !== undefined) {
        localVarQueryParameter['rainId'] = rainId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨记录 Get rainfall record by time
     * @param {string} rainTime 查询时刻 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainListBySingleTimeGet: async (
      rainTime: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'rainTime' is not null or undefined
      assertParamExists('apiV1ResultRainListBySingleTimeGet', 'rainTime', rainTime)
      const localVarPath = `/api/v1/result/rain/list-by-single-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (rainTime !== undefined) {
        localVarQueryParameter['RainTime'] = rainTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨的记录 Query rainfall records
     * @param {string} startTime 查询的开始时刻 query start time
     * @param {string} endTime 查询的结束时刻 query end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainListGet: async (
      startTime: string,
      endTime: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'startTime' is not null or undefined
      assertParamExists('apiV1ResultRainListGet', 'startTime', startTime)
      // verify required parameter 'endTime' is not null or undefined
      assertParamExists('apiV1ResultRainListGet', 'endTime', endTime)
      const localVarPath = `/api/v1/result/rain/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RainLogApi - functional programming interface
 * @export
 */
export const RainLogApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RainLogApiAxiosParamCreator(configuration)
  return {
    /**
     * 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 根据ID查询降雨记录 Get rainfall log by id
     * @param {string} [rainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultRainGetGet(
      rainId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryRainOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultRainGetGet(
        rainId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨记录 Get rainfall record by time
     * @param {string} rainTime 查询时刻 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultRainListBySingleTimeGet(
      rainTime: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryRainOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultRainListBySingleTimeGet(
        rainTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨的记录 Query rainfall records
     * @param {string} startTime 查询的开始时刻 query start time
     * @param {string} endTime 查询的结束时刻 query end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ResultRainListGet(
      startTime: string,
      endTime: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryRainOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ResultRainListGet(
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * RainLogApi - factory interface
 * @export
 */
export const RainLogApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RainLogApiFp(configuration)
  return {
    /**
     * 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 根据ID查询降雨记录 Get rainfall log by id
     * @param {string} [rainId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainGetGet(rainId?: string, options?: any): AxiosPromise<QueryRainOutput> {
      return localVarFp
        .apiV1ResultRainGetGet(rainId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨记录 Get rainfall record by time
     * @param {string} rainTime 查询时刻 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainListBySingleTimeGet(
      rainTime: string,
      options?: any,
    ): AxiosPromise<Array<QueryRainOutput>> {
      return localVarFp
        .apiV1ResultRainListBySingleTimeGet(rainTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
     * @summary 查询降雨的记录 Query rainfall records
     * @param {string} startTime 查询的开始时刻 query start time
     * @param {string} endTime 查询的结束时刻 query end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ResultRainListGet(
      startTime: string,
      endTime: string,
      options?: any,
    ): AxiosPromise<Array<QueryRainOutput>> {
      return localVarFp
        .apiV1ResultRainListGet(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RainLogApi - object-oriented interface
 * @export
 * @class RainLogApi
 * @extends {BaseAPI}
 */
export class RainLogApi extends BaseAPI {
  /**
   * 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
   * @summary 根据ID查询降雨记录 Get rainfall log by id
   * @param {string} [rainId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RainLogApi
   */
  public apiV1ResultRainGetGet(rainId?: string, options?: AxiosRequestConfig) {
    return RainLogApiFp(this.configuration)
      .apiV1ResultRainGetGet(rainId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
   * @summary 查询降雨记录 Get rainfall record by time
   * @param {string} rainTime 查询时刻 time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RainLogApi
   */
  public apiV1ResultRainListBySingleTimeGet(rainTime: string, options?: AxiosRequestConfig) {
    return RainLogApiFp(this.configuration)
      .apiV1ResultRainListBySingleTimeGet(rainTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
   * @summary 查询降雨的记录 Query rainfall records
   * @param {string} startTime 查询的开始时刻 query start time
   * @param {string} endTime 查询的结束时刻 query end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RainLogApi
   */
  public apiV1ResultRainListGet(startTime: string, endTime: string, options?: AxiosRequestConfig) {
    return RainLogApiFp(this.configuration)
      .apiV1ResultRainListGet(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
