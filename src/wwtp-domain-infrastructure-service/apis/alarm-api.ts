/* eslint-disable */
/**
 * wwtp-paas-infrastructure-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AlarmConfigInOut } from '../models'
// @ts-ignore
import { AlarmLogInout } from '../models'
// @ts-ignore
import { AlarmLogInput } from '../models'
// @ts-ignore
import { DosageBasicInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * AlarmApi - axios parameter creator
 * @export
 */
export const AlarmApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加报警配置 Add alarm config
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmAddAlarmConfigsPost: async (
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/AddAlarmConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        alarmConfigInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加报警日志 Add alarm logs
     * @param {Array<AlarmLogInout>} [alarmLogInout]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmAddAlarmLogsPost: async (
      alarmLogInout?: Array<AlarmLogInout>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/AddAlarmLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        alarmLogInout,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除报警配置信息 Delete alarm config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmDeleteAlarmConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/DeleteAlarmConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除报警日志 Delete alarm logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmDeleteAlarmLogsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/DeleteAlarmLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过等级和指标获取报警配置信息 Get alarm config by grade and indicator
     * @param {number} [grade] 等级 grade
     * @param {string} [indicator] 指标 indicator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmConfigsByGradeAndIndicatorGet: async (
      grade?: number,
      indicator?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAlarmConfigsByGradeAndIndicator`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (grade !== undefined) {
        localVarQueryParameter['grade'] = grade
      }

      if (indicator !== undefined) {
        localVarQueryParameter['indicator'] = indicator
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过等级获取报警配置信息 Get alarm config by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmConfigsByGradeGet: async (
      grade?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAlarmConfigsByGrade`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (grade !== undefined) {
        localVarQueryParameter['grade'] = grade
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过时间、报警类型等获取报警日志 Get alarm logs by time and alarm type
     * @summary 通过条件获取报警日志 Get alarm logs by condition
     * @param {AlarmLogInput} [alarmLogInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmLogsByConditionPost: async (
      alarmLogInput?: AlarmLogInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAlarmLogsByCondition`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        alarmLogInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过等级获取报警日志 Get alarm logs by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmLogsByGradeGet: async (
      grade?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAlarmLogsByGrade`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (grade !== undefined) {
        localVarQueryParameter['grade'] = grade
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有报警配置 Get all alarm config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAllAlarmConfigsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAllAlarmConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有报警日志 Get all alarm logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAllAlarmLogsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/GetAllAlarmLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosing alarm logs based on dosage data
     * @param {Array<DosageBasicInfo>} [dosageBasicInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmJudgeDosagePost: async (
      dosageBasicInfo?: Array<DosageBasicInfo>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/JudgeDosage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosageBasicInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新报警配置信息 Update alarm config data
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmUpdateAlarmConfigsPost: async (
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Alarm/UpdateAlarmConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        alarmConfigInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AlarmApi - functional programming interface
 * @export
 */
export const AlarmApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AlarmApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加报警配置 Add alarm config
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmAddAlarmConfigsPost(
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmAddAlarmConfigsPost(
        alarmConfigInOut,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加报警日志 Add alarm logs
     * @param {Array<AlarmLogInout>} [alarmLogInout]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmAddAlarmLogsPost(
      alarmLogInout?: Array<AlarmLogInout>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmAddAlarmLogsPost(
        alarmLogInout,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除报警配置信息 Delete alarm config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmDeleteAlarmConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmDeleteAlarmConfigsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除报警日志 Delete alarm logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmDeleteAlarmLogsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmDeleteAlarmLogsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过等级和指标获取报警配置信息 Get alarm config by grade and indicator
     * @param {number} [grade] 等级 grade
     * @param {string} [indicator] 指标 indicator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(
      grade?: number,
      indicator?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmConfigInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(
          grade,
          indicator,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过等级获取报警配置信息 Get alarm config by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAlarmConfigsByGradeGet(
      grade?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmConfigInOut>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmGetAlarmConfigsByGradeGet(
        grade,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过时间、报警类型等获取报警日志 Get alarm logs by time and alarm type
     * @summary 通过条件获取报警日志 Get alarm logs by condition
     * @param {AlarmLogInput} [alarmLogInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAlarmLogsByConditionPost(
      alarmLogInput?: AlarmLogInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmLogInout>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmGetAlarmLogsByConditionPost(
        alarmLogInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过等级获取报警日志 Get alarm logs by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAlarmLogsByGradeGet(
      grade?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmLogInout>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmGetAlarmLogsByGradeGet(
        grade,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有报警配置 Get all alarm config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAllAlarmConfigsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmConfigInOut>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmGetAllAlarmConfigsGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有报警日志 Get all alarm logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmGetAllAlarmLogsGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmLogInout>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmGetAllAlarmLogsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosing alarm logs based on dosage data
     * @param {Array<DosageBasicInfo>} [dosageBasicInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmJudgeDosagePost(
      dosageBasicInfo?: Array<DosageBasicInfo>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmJudgeDosagePost(
        dosageBasicInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新报警配置信息 Update alarm config data
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAlarmUpdateAlarmConfigsPost(
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAlarmUpdateAlarmConfigsPost(
        alarmConfigInOut,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AlarmApi - factory interface
 * @export
 */
export const AlarmApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AlarmApiFp(configuration)
  return {
    /**
     *
     * @summary 添加报警配置 Add alarm config
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmAddAlarmConfigsPost(
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAlarmAddAlarmConfigsPost(alarmConfigInOut, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加报警日志 Add alarm logs
     * @param {Array<AlarmLogInout>} [alarmLogInout]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmAddAlarmLogsPost(
      alarmLogInout?: Array<AlarmLogInout>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAlarmAddAlarmLogsPost(alarmLogInout, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除报警配置信息 Delete alarm config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmDeleteAlarmConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAlarmDeleteAlarmConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除报警日志 Delete alarm logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmDeleteAlarmLogsPost(requestBody?: Array<string>, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAlarmDeleteAlarmLogsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过等级和指标获取报警配置信息 Get alarm config by grade and indicator
     * @param {number} [grade] 等级 grade
     * @param {string} [indicator] 指标 indicator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(
      grade?: number,
      indicator?: string,
      options?: any,
    ): AxiosPromise<Array<AlarmConfigInOut>> {
      return localVarFp
        .apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(grade, indicator, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过等级获取报警配置信息 Get alarm config by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmConfigsByGradeGet(
      grade?: number,
      options?: any,
    ): AxiosPromise<Array<AlarmConfigInOut>> {
      return localVarFp
        .apiAlarmGetAlarmConfigsByGradeGet(grade, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过时间、报警类型等获取报警日志 Get alarm logs by time and alarm type
     * @summary 通过条件获取报警日志 Get alarm logs by condition
     * @param {AlarmLogInput} [alarmLogInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmLogsByConditionPost(
      alarmLogInput?: AlarmLogInput,
      options?: any,
    ): AxiosPromise<Array<AlarmLogInout>> {
      return localVarFp
        .apiAlarmGetAlarmLogsByConditionPost(alarmLogInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过等级获取报警日志 Get alarm logs by grade
     * @param {number} [grade] 等级 grade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAlarmLogsByGradeGet(
      grade?: number,
      options?: any,
    ): AxiosPromise<Array<AlarmLogInout>> {
      return localVarFp
        .apiAlarmGetAlarmLogsByGradeGet(grade, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有报警配置 Get all alarm config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAllAlarmConfigsGet(options?: any): AxiosPromise<Array<AlarmConfigInOut>> {
      return localVarFp
        .apiAlarmGetAllAlarmConfigsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有报警日志 Get all alarm logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmGetAllAlarmLogsGet(options?: any): AxiosPromise<Array<AlarmLogInout>> {
      return localVarFp
        .apiAlarmGetAllAlarmLogsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosing alarm logs based on dosage data
     * @param {Array<DosageBasicInfo>} [dosageBasicInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmJudgeDosagePost(
      dosageBasicInfo?: Array<DosageBasicInfo>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAlarmJudgeDosagePost(dosageBasicInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新报警配置信息 Update alarm config data
     * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAlarmUpdateAlarmConfigsPost(
      alarmConfigInOut?: Array<AlarmConfigInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAlarmUpdateAlarmConfigsPost(alarmConfigInOut, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AlarmApi - object-oriented interface
 * @export
 * @class AlarmApi
 * @extends {BaseAPI}
 */
export class AlarmApi extends BaseAPI {
  /**
   *
   * @summary 添加报警配置 Add alarm config
   * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmAddAlarmConfigsPost(
    alarmConfigInOut?: Array<AlarmConfigInOut>,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmAddAlarmConfigsPost(alarmConfigInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加报警日志 Add alarm logs
   * @param {Array<AlarmLogInout>} [alarmLogInout]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmAddAlarmLogsPost(
    alarmLogInout?: Array<AlarmLogInout>,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmAddAlarmLogsPost(alarmLogInout, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除报警配置信息 Delete alarm config data by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmDeleteAlarmConfigsPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmDeleteAlarmConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除报警日志 Delete alarm logs by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmDeleteAlarmLogsPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmDeleteAlarmLogsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过等级和指标获取报警配置信息 Get alarm config by grade and indicator
   * @param {number} [grade] 等级 grade
   * @param {string} [indicator] 指标 indicator
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(
    grade?: number,
    indicator?: string,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAlarmConfigsByGradeAndIndicatorGet(grade, indicator, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过等级获取报警配置信息 Get alarm config by grade
   * @param {number} [grade] 等级 grade
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAlarmConfigsByGradeGet(grade?: number, options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAlarmConfigsByGradeGet(grade, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过时间、报警类型等获取报警日志 Get alarm logs by time and alarm type
   * @summary 通过条件获取报警日志 Get alarm logs by condition
   * @param {AlarmLogInput} [alarmLogInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAlarmLogsByConditionPost(
    alarmLogInput?: AlarmLogInput,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAlarmLogsByConditionPost(alarmLogInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过等级获取报警日志 Get alarm logs by grade
   * @param {number} [grade] 等级 grade
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAlarmLogsByGradeGet(grade?: number, options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAlarmLogsByGradeGet(grade, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有报警配置 Get all alarm config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAllAlarmConfigsGet(options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAllAlarmConfigsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有报警日志 Get all alarm logs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmGetAllAlarmLogsGet(options?: AxiosRequestConfig) {
    return AlarmApiFp(this.configuration)
      .apiAlarmGetAllAlarmLogsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 判断加药量，写入报警日志 Write dosing alarm logs based on dosage data
   * @param {Array<DosageBasicInfo>} [dosageBasicInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmJudgeDosagePost(
    dosageBasicInfo?: Array<DosageBasicInfo>,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmJudgeDosagePost(dosageBasicInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新报警配置信息 Update alarm config data
   * @param {Array<AlarmConfigInOut>} [alarmConfigInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmApi
   */
  public apiAlarmUpdateAlarmConfigsPost(
    alarmConfigInOut?: Array<AlarmConfigInOut>,
    options?: AxiosRequestConfig,
  ) {
    return AlarmApiFp(this.configuration)
      .apiAlarmUpdateAlarmConfigsPost(alarmConfigInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
