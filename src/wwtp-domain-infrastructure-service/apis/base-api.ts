/* eslint-disable */
/**
 * wwtp-paas-infrastructure-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseProductLineInOut } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * BaseApi - axios parameter creator
 * @export
 */
export const BaseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加工艺线配置信息 Add product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseAddBaseProductLinePost: async (
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Base/AddBaseProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        baseProductLineInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除工艺线配置信息 Delete product line config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseDeleteBaseProductLinePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Base/DeleteBaseProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模板模型名称获取所有工艺线配置信息 Get all product line config data by template model name
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseGetAllBaseProductLineByModelGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Base/GetAllBaseProductLineByModel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有工艺线配置信息 Get all product line config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseGetAllBaseProductLineGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Base/GetAllBaseProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新工艺线配置信息 Update product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseUpdateBaseProductLinePost: async (
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Base/UpdateBaseProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        baseProductLineInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BaseApi - functional programming interface
 * @export
 */
export const BaseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BaseApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加工艺线配置信息 Add product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBaseAddBaseProductLinePost(
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBaseAddBaseProductLinePost(
        baseProductLineInOut,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除工艺线配置信息 Delete product line config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBaseDeleteBaseProductLinePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBaseDeleteBaseProductLinePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模板模型名称获取所有工艺线配置信息 Get all product line config data by template model name
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBaseGetAllBaseProductLineByModelGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaseProductLineInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiBaseGetAllBaseProductLineByModelGet(modelName, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有工艺线配置信息 Get all product line config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBaseGetAllBaseProductLineGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaseProductLineInOut>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBaseGetAllBaseProductLineGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新工艺线配置信息 Update product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBaseUpdateBaseProductLinePost(
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBaseUpdateBaseProductLinePost(
        baseProductLineInOut,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * BaseApi - factory interface
 * @export
 */
export const BaseApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BaseApiFp(configuration)
  return {
    /**
     *
     * @summary 添加工艺线配置信息 Add product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseAddBaseProductLinePost(
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiBaseAddBaseProductLinePost(baseProductLineInOut, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除工艺线配置信息 Delete product line config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseDeleteBaseProductLinePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiBaseDeleteBaseProductLinePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模板模型名称获取所有工艺线配置信息 Get all product line config data by template model name
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseGetAllBaseProductLineByModelGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<BaseProductLineInOut>> {
      return localVarFp
        .apiBaseGetAllBaseProductLineByModelGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有工艺线配置信息 Get all product line config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseGetAllBaseProductLineGet(options?: any): AxiosPromise<Array<BaseProductLineInOut>> {
      return localVarFp
        .apiBaseGetAllBaseProductLineGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新工艺线配置信息 Update product line config data
     * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBaseUpdateBaseProductLinePost(
      baseProductLineInOut?: Array<BaseProductLineInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiBaseUpdateBaseProductLinePost(baseProductLineInOut, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * BaseApi - object-oriented interface
 * @export
 * @class BaseApi
 * @extends {BaseAPI}
 */
export class BaseApi extends BaseAPI {
  /**
   *
   * @summary 添加工艺线配置信息 Add product line config data
   * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BaseApi
   */
  public apiBaseAddBaseProductLinePost(
    baseProductLineInOut?: Array<BaseProductLineInOut>,
    options?: AxiosRequestConfig,
  ) {
    return BaseApiFp(this.configuration)
      .apiBaseAddBaseProductLinePost(baseProductLineInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除工艺线配置信息 Delete product line config data by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BaseApi
   */
  public apiBaseDeleteBaseProductLinePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return BaseApiFp(this.configuration)
      .apiBaseDeleteBaseProductLinePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模板模型名称获取所有工艺线配置信息 Get all product line config data by template model name
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BaseApi
   */
  public apiBaseGetAllBaseProductLineByModelGet(modelName?: string, options?: AxiosRequestConfig) {
    return BaseApiFp(this.configuration)
      .apiBaseGetAllBaseProductLineByModelGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有工艺线配置信息 Get all product line config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BaseApi
   */
  public apiBaseGetAllBaseProductLineGet(options?: AxiosRequestConfig) {
    return BaseApiFp(this.configuration)
      .apiBaseGetAllBaseProductLineGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新工艺线配置信息 Update product line config data
   * @param {Array<BaseProductLineInOut>} [baseProductLineInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BaseApi
   */
  public apiBaseUpdateBaseProductLinePost(
    baseProductLineInOut?: Array<BaseProductLineInOut>,
    options?: AxiosRequestConfig,
  ) {
    return BaseApiFp(this.configuration)
      .apiBaseUpdateBaseProductLinePost(baseProductLineInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
