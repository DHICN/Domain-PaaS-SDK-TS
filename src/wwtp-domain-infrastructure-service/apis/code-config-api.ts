/* eslint-disable */
/**
 * wwtp-paas-infrastructure-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AssemblyConfigOutput } from '../models'
// @ts-ignore
import { GetAssemblyConfigInput } from '../models'
// @ts-ignore
import { MappingConfigInputOutput } from '../models'
// @ts-ignore
import { ModelNodeConfigInputOutput } from '../models'
// @ts-ignore
import { OnlinePointConfigInputOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SysCodeConfigInputOutput } from '../models'
/**
 * CodeConfigApi - axios parameter creator
 * @export
 */
export const CodeConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 添加系统点位和在线点位，或者模型点位之间的映射关系 Add mapping relation config between system point and online point/model node
     * @summary 添加系统点位匹配信息 Add mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddMappingConfigsPost: async (
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/AddMappingConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mappingConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加模型点位配置信息 Add model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddModelNodeConfigsPost: async (
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/AddModelNodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelNodeConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加在线点位 Add online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddOnlinePointsPost: async (
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/AddOnlinePoints`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        onlinePointConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加系统点位 Add system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddSysCodeConfigsPost: async (
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/AddSysCodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sysCodeConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据映射ID，删除系统点位和在线点位，或者模型点位之间的映射关系 Delete mapping relation config between system point and online point/model node by mapping ids
     * @summary 删除系统点位匹配信息 Delete mapping config data
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteMappingConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/DeleteMappingConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据点位编码删除模型点位配置信息 Delete model node config data by node codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteModelNodeConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/DeleteModelNodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据点位编码删除在线点位 Delete online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteOnlinePointsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/DeleteOnlinePoints`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID列表删除系统点位 Delete system point config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteSysCodeConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/DeleteSysCodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取所有的系统点位和在线点位，或者模型点位之间的映射关系 Get all mapping relation config between system point and online point/model node
     * @summary 获取所有点位匹配表信息 Get all mapping config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllMappingConfigsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetAllMappingConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的模型点位配置信息 Get all model node config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllModelNodeConfigsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetAllModelNodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有在线点位 Get all online point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllOnlinePointsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetAllOnlinePoints`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有点位配置信息 Get all system point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllSysCodeConfigsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetAllSysCodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 联合查询-根据模板模型名称、点位类型、点位编码、是否输入、工艺线、生化池等条件获取系统点位表、在线点位表、模型点位表、点位匹配表信息 Union query, get system point, online point, model node, and their mapping relations by conditions like template model name, point type, system point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required, while others can be null.
     * @summary 联合查询 Union query
     * @param {Array<GetAssemblyConfigInput>} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAssemblyConfigByConditionsPost: async (
      getAssemblyConfigInput?: Array<GetAssemblyConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetAssemblyConfigByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAssemblyConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过系统点位ID获取系统点位和在线点位，或者模型点位之间的映射关系 Get mapping relation config between system point and online point/model node by system point ids
     * @summary 通过系统点位ID获取点位匹配信息 Get mapping config data by system point ids
     * @param {Array<string>} [sysIds] 系统点位ID列表 system point id list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetMappingConfigBySysIdGet: async (
      sysIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetMappingConfigBySysId`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sysIds !== undefined) {
        localVarQueryParameter['sysIds'] = sysIds
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询映射配置信息，其中模板模型名称是必填项，其余可为空 Get mapping config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取映射配置信息 Get mapping config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetNodeCodesBySubTypePost: async (
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetNodeCodesBySubType`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAssemblyConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据站点获取在线点位 Get online point config data by station code
     * @param {string} [stationCode] 站点编码 station code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetOnlinePointsByStationCodeGet: async (
      stationCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetOnlinePointsByStationCode`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (stationCode !== undefined) {
        localVarQueryParameter['stationCode'] = stationCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据点位代码获取在线点位 Get online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetOnlinePointsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetOnlinePoints`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询系统点位信息，其中模板模型名称是必填项，其余可为空 Get system point config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取系统点位信息 Get system point config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetSysCodeConfigByConditionsPost: async (
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/GetSysCodeConfigByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAssemblyConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 更新系统点位和在线点位，或者模型点位之间的映射关系 Update mapping relation config between system point and online point/model node
     * @summary 更新系统点位匹配信息 Update mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateMappingConfigsPost: async (
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/UpdateMappingConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mappingConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新模型点位配置信息 Update model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateModelNodeConfigsPost: async (
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/UpdateModelNodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelNodeConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改在线点位 Update online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateOnlinePointsPost: async (
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/UpdateOnlinePoints`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        onlinePointConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新系统点位 Update system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateSysCodeConfigsPost: async (
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CodeConfig/UpdateSysCodeConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sysCodeConfigInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CodeConfigApi - functional programming interface
 * @export
 */
export const CodeConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CodeConfigApiAxiosParamCreator(configuration)
  return {
    /**
     * 添加系统点位和在线点位，或者模型点位之间的映射关系 Add mapping relation config between system point and online point/model node
     * @summary 添加系统点位匹配信息 Add mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigAddMappingConfigsPost(
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigAddMappingConfigsPost(
        mappingConfigInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加模型点位配置信息 Add model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigAddModelNodeConfigsPost(
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigAddModelNodeConfigsPost(
          modelNodeConfigInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加在线点位 Add online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigAddOnlinePointsPost(
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigAddOnlinePointsPost(
        onlinePointConfigInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加系统点位 Add system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigAddSysCodeConfigsPost(
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigAddSysCodeConfigsPost(
        sysCodeConfigInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据映射ID，删除系统点位和在线点位，或者模型点位之间的映射关系 Delete mapping relation config between system point and online point/model node by mapping ids
     * @summary 删除系统点位匹配信息 Delete mapping config data
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigDeleteMappingConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigDeleteMappingConfigsPost(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据点位编码删除模型点位配置信息 Delete model node config data by node codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigDeleteModelNodeConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigDeleteModelNodeConfigsPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据点位编码删除在线点位 Delete online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigDeleteOnlinePointsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigDeleteOnlinePointsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID列表删除系统点位 Delete system point config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigDeleteSysCodeConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigDeleteSysCodeConfigsPost(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取所有的系统点位和在线点位，或者模型点位之间的映射关系 Get all mapping relation config between system point and online point/model node
     * @summary 获取所有点位匹配表信息 Get all mapping config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetAllMappingConfigsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MappingConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetAllMappingConfigsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的模型点位配置信息 Get all model node config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetAllModelNodeConfigsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelNodeConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetAllModelNodeConfigsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有在线点位 Get all online point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetAllOnlinePointsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OnlinePointConfigInputOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigGetAllOnlinePointsGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有点位配置信息 Get all system point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetAllSysCodeConfigsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysCodeConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetAllSysCodeConfigsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 联合查询-根据模板模型名称、点位类型、点位编码、是否输入、工艺线、生化池等条件获取系统点位表、在线点位表、模型点位表、点位匹配表信息 Union query, get system point, online point, model node, and their mapping relations by conditions like template model name, point type, system point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required, while others can be null.
     * @summary 联合查询 Union query
     * @param {Array<GetAssemblyConfigInput>} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetAssemblyConfigByConditionsPost(
      getAssemblyConfigInput?: Array<GetAssemblyConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssemblyConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetAssemblyConfigByConditionsPost(
          getAssemblyConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过系统点位ID获取系统点位和在线点位，或者模型点位之间的映射关系 Get mapping relation config between system point and online point/model node by system point ids
     * @summary 通过系统点位ID获取点位匹配信息 Get mapping config data by system point ids
     * @param {Array<string>} [sysIds] 系统点位ID列表 system point id list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetMappingConfigBySysIdGet(
      sysIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MappingConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetMappingConfigBySysIdGet(sysIds, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询映射配置信息，其中模板模型名称是必填项，其余可为空 Get mapping config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取映射配置信息 Get mapping config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetNodeCodesBySubTypePost(
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MappingConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetNodeCodesBySubTypePost(
          getAssemblyConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据站点获取在线点位 Get online point config data by station code
     * @param {string} [stationCode] 站点编码 station code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetOnlinePointsByStationCodeGet(
      stationCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OnlinePointConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetOnlinePointsByStationCodeGet(
          stationCode,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据点位代码获取在线点位 Get online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetOnlinePointsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OnlinePointConfigInputOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigGetOnlinePointsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询系统点位信息，其中模板模型名称是必填项，其余可为空 Get system point config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取系统点位信息 Get system point config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigGetSysCodeConfigByConditionsPost(
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysCodeConfigInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigGetSysCodeConfigByConditionsPost(
          getAssemblyConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 更新系统点位和在线点位，或者模型点位之间的映射关系 Update mapping relation config between system point and online point/model node
     * @summary 更新系统点位匹配信息 Update mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigUpdateMappingConfigsPost(
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigUpdateMappingConfigsPost(
          mappingConfigInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新模型点位配置信息 Update model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigUpdateModelNodeConfigsPost(
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigUpdateModelNodeConfigsPost(
          modelNodeConfigInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改在线点位 Update online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigUpdateOnlinePointsPost(
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCodeConfigUpdateOnlinePointsPost(
        onlinePointConfigInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新系统点位 Update system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCodeConfigUpdateSysCodeConfigsPost(
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCodeConfigUpdateSysCodeConfigsPost(
          sysCodeConfigInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * CodeConfigApi - factory interface
 * @export
 */
export const CodeConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CodeConfigApiFp(configuration)
  return {
    /**
     * 添加系统点位和在线点位，或者模型点位之间的映射关系 Add mapping relation config between system point and online point/model node
     * @summary 添加系统点位匹配信息 Add mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddMappingConfigsPost(
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigAddMappingConfigsPost(mappingConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加模型点位配置信息 Add model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddModelNodeConfigsPost(
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigAddModelNodeConfigsPost(modelNodeConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加在线点位 Add online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddOnlinePointsPost(
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigAddOnlinePointsPost(onlinePointConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加系统点位 Add system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigAddSysCodeConfigsPost(
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigAddSysCodeConfigsPost(sysCodeConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据映射ID，删除系统点位和在线点位，或者模型点位之间的映射关系 Delete mapping relation config between system point and online point/model node by mapping ids
     * @summary 删除系统点位匹配信息 Delete mapping config data
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteMappingConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigDeleteMappingConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据点位编码删除模型点位配置信息 Delete model node config data by node codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteModelNodeConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigDeleteModelNodeConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据点位编码删除在线点位 Delete online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteOnlinePointsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigDeleteOnlinePointsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID列表删除系统点位 Delete system point config data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigDeleteSysCodeConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigDeleteSysCodeConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取所有的系统点位和在线点位，或者模型点位之间的映射关系 Get all mapping relation config between system point and online point/model node
     * @summary 获取所有点位匹配表信息 Get all mapping config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllMappingConfigsGet(
      options?: any,
    ): AxiosPromise<Array<MappingConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetAllMappingConfigsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的模型点位配置信息 Get all model node config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllModelNodeConfigsGet(
      options?: any,
    ): AxiosPromise<Array<ModelNodeConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetAllModelNodeConfigsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有在线点位 Get all online point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllOnlinePointsGet(
      options?: any,
    ): AxiosPromise<Array<OnlinePointConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetAllOnlinePointsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有点位配置信息 Get all system point config data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAllSysCodeConfigsGet(
      options?: any,
    ): AxiosPromise<Array<SysCodeConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetAllSysCodeConfigsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 联合查询-根据模板模型名称、点位类型、点位编码、是否输入、工艺线、生化池等条件获取系统点位表、在线点位表、模型点位表、点位匹配表信息 Union query, get system point, online point, model node, and their mapping relations by conditions like template model name, point type, system point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required, while others can be null.
     * @summary 联合查询 Union query
     * @param {Array<GetAssemblyConfigInput>} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetAssemblyConfigByConditionsPost(
      getAssemblyConfigInput?: Array<GetAssemblyConfigInput>,
      options?: any,
    ): AxiosPromise<Array<AssemblyConfigOutput>> {
      return localVarFp
        .apiCodeConfigGetAssemblyConfigByConditionsPost(getAssemblyConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过系统点位ID获取系统点位和在线点位，或者模型点位之间的映射关系 Get mapping relation config between system point and online point/model node by system point ids
     * @summary 通过系统点位ID获取点位匹配信息 Get mapping config data by system point ids
     * @param {Array<string>} [sysIds] 系统点位ID列表 system point id list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetMappingConfigBySysIdGet(
      sysIds?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<MappingConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetMappingConfigBySysIdGet(sysIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询映射配置信息，其中模板模型名称是必填项，其余可为空 Get mapping config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取映射配置信息 Get mapping config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetNodeCodesBySubTypePost(
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options?: any,
    ): AxiosPromise<Array<MappingConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetNodeCodesBySubTypePost(getAssemblyConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据站点获取在线点位 Get online point config data by station code
     * @param {string} [stationCode] 站点编码 station code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetOnlinePointsByStationCodeGet(
      stationCode?: string,
      options?: any,
    ): AxiosPromise<Array<OnlinePointConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetOnlinePointsByStationCodeGet(stationCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据点位代码获取在线点位 Get online point config data by point codes
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetOnlinePointsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<OnlinePointConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetOnlinePointsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询系统点位信息，其中模板模型名称是必填项，其余可为空 Get system point config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
     * @summary 通过条件获取系统点位信息 Get system point config data by condition
     * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigGetSysCodeConfigByConditionsPost(
      getAssemblyConfigInput?: GetAssemblyConfigInput,
      options?: any,
    ): AxiosPromise<Array<SysCodeConfigInputOutput>> {
      return localVarFp
        .apiCodeConfigGetSysCodeConfigByConditionsPost(getAssemblyConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 更新系统点位和在线点位，或者模型点位之间的映射关系 Update mapping relation config between system point and online point/model node
     * @summary 更新系统点位匹配信息 Update mapping config data
     * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateMappingConfigsPost(
      mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigUpdateMappingConfigsPost(mappingConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新模型点位配置信息 Update model node config data
     * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateModelNodeConfigsPost(
      modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigUpdateModelNodeConfigsPost(modelNodeConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改在线点位 Update online point config data
     * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateOnlinePointsPost(
      onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigUpdateOnlinePointsPost(onlinePointConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新系统点位 Update system point config data
     * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCodeConfigUpdateSysCodeConfigsPost(
      sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCodeConfigUpdateSysCodeConfigsPost(sysCodeConfigInputOutput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CodeConfigApi - object-oriented interface
 * @export
 * @class CodeConfigApi
 * @extends {BaseAPI}
 */
export class CodeConfigApi extends BaseAPI {
  /**
   * 添加系统点位和在线点位，或者模型点位之间的映射关系 Add mapping relation config between system point and online point/model node
   * @summary 添加系统点位匹配信息 Add mapping config data
   * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigAddMappingConfigsPost(
    mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigAddMappingConfigsPost(mappingConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加模型点位配置信息 Add model node config data
   * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigAddModelNodeConfigsPost(
    modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigAddModelNodeConfigsPost(modelNodeConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加在线点位 Add online point config data
   * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigAddOnlinePointsPost(
    onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigAddOnlinePointsPost(onlinePointConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加系统点位 Add system point config data
   * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigAddSysCodeConfigsPost(
    sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigAddSysCodeConfigsPost(sysCodeConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据映射ID，删除系统点位和在线点位，或者模型点位之间的映射关系 Delete mapping relation config between system point and online point/model node by mapping ids
   * @summary 删除系统点位匹配信息 Delete mapping config data
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigDeleteMappingConfigsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigDeleteMappingConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据点位编码删除模型点位配置信息 Delete model node config data by node codes
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigDeleteModelNodeConfigsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigDeleteModelNodeConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据点位编码删除在线点位 Delete online point config data by point codes
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigDeleteOnlinePointsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigDeleteOnlinePointsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID列表删除系统点位 Delete system point config data by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigDeleteSysCodeConfigsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigDeleteSysCodeConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取所有的系统点位和在线点位，或者模型点位之间的映射关系 Get all mapping relation config between system point and online point/model node
   * @summary 获取所有点位匹配表信息 Get all mapping config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetAllMappingConfigsGet(options?: AxiosRequestConfig) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetAllMappingConfigsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的模型点位配置信息 Get all model node config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetAllModelNodeConfigsGet(options?: AxiosRequestConfig) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetAllModelNodeConfigsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有在线点位 Get all online point config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetAllOnlinePointsGet(options?: AxiosRequestConfig) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetAllOnlinePointsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有点位配置信息 Get all system point config data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetAllSysCodeConfigsGet(options?: AxiosRequestConfig) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetAllSysCodeConfigsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 联合查询-根据模板模型名称、点位类型、点位编码、是否输入、工艺线、生化池等条件获取系统点位表、在线点位表、模型点位表、点位匹配表信息 Union query, get system point, online point, model node, and their mapping relations by conditions like template model name, point type, system point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required, while others can be null.
   * @summary 联合查询 Union query
   * @param {Array<GetAssemblyConfigInput>} [getAssemblyConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetAssemblyConfigByConditionsPost(
    getAssemblyConfigInput?: Array<GetAssemblyConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetAssemblyConfigByConditionsPost(getAssemblyConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过系统点位ID获取系统点位和在线点位，或者模型点位之间的映射关系 Get mapping relation config between system point and online point/model node by system point ids
   * @summary 通过系统点位ID获取点位匹配信息 Get mapping config data by system point ids
   * @param {Array<string>} [sysIds] 系统点位ID列表 system point id list
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetMappingConfigBySysIdGet(
    sysIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetMappingConfigBySysIdGet(sysIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询映射配置信息，其中模板模型名称是必填项，其余可为空 Get mapping config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
   * @summary 通过条件获取映射配置信息 Get mapping config data by condition
   * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetNodeCodesBySubTypePost(
    getAssemblyConfigInput?: GetAssemblyConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetNodeCodesBySubTypePost(getAssemblyConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据站点获取在线点位 Get online point config data by station code
   * @param {string} [stationCode] 站点编码 station code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetOnlinePointsByStationCodeGet(
    stationCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetOnlinePointsByStationCodeGet(stationCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据点位代码获取在线点位 Get online point config data by point codes
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetOnlinePointsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetOnlinePointsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过模板模型名称、点位类型、点位编码、是否输入点位、工艺线、生化池序号等条件查询系统点位信息，其中模板模型名称是必填项，其余可为空 Get system point config data by template model name, point type, point codes, input or output, product line and biochemical pool index. Thereinto, template model name is required while others can be null.
   * @summary 通过条件获取系统点位信息 Get system point config data by condition
   * @param {GetAssemblyConfigInput} [getAssemblyConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigGetSysCodeConfigByConditionsPost(
    getAssemblyConfigInput?: GetAssemblyConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigGetSysCodeConfigByConditionsPost(getAssemblyConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 更新系统点位和在线点位，或者模型点位之间的映射关系 Update mapping relation config between system point and online point/model node
   * @summary 更新系统点位匹配信息 Update mapping config data
   * @param {Array<MappingConfigInputOutput>} [mappingConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigUpdateMappingConfigsPost(
    mappingConfigInputOutput?: Array<MappingConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigUpdateMappingConfigsPost(mappingConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新模型点位配置信息 Update model node config data
   * @param {Array<ModelNodeConfigInputOutput>} [modelNodeConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigUpdateModelNodeConfigsPost(
    modelNodeConfigInputOutput?: Array<ModelNodeConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigUpdateModelNodeConfigsPost(modelNodeConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改在线点位 Update online point config data
   * @param {Array<OnlinePointConfigInputOutput>} [onlinePointConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigUpdateOnlinePointsPost(
    onlinePointConfigInputOutput?: Array<OnlinePointConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigUpdateOnlinePointsPost(onlinePointConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新系统点位 Update system point config data
   * @param {Array<SysCodeConfigInputOutput>} [sysCodeConfigInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CodeConfigApi
   */
  public apiCodeConfigUpdateSysCodeConfigsPost(
    sysCodeConfigInputOutput?: Array<SysCodeConfigInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return CodeConfigApiFp(this.configuration)
      .apiCodeConfigUpdateSysCodeConfigsPost(sysCodeConfigInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
