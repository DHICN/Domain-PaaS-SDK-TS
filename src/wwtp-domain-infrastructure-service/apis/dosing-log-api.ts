/* eslint-disable */
/**
 * wwtp-paas-infrastructure-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DosingLogDto } from '../models'
// @ts-ignore
import { QueryByTime } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * DosingLogApi - axios parameter creator
 * @export
 */
export const DosingLogApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加加药日志 Add dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogAddDosingLogsPost: async (
      dosingLogDto?: Array<DosingLogDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/AddDosingLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingLogDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除加药日志 Delete dosing logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogDeleteDosingLogsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/DeleteDosingLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有加药日志 Get all dosing logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetAllDosingLogsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/GetAllDosingLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
     * @summary 通过条件获取加药日志 Get dosing logs by conditions
     * @param {string} [productLine] 生产线 product line code
     * @param {number} [category] 药剂类型 chemical category
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetDosingLogsByConditionsGet: async (
      productLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/GetDosingLogsByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['ProductLine'] = productLine
      }

      if (category !== undefined) {
        localVarQueryParameter['Category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过时间获取加药日志 Get dosing logs by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetDosingLogsByTimePost: async (
      queryByTime?: QueryByTime,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/GetDosingLogsByTime`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryByTime,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新加药日志 Update dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogUpdateDosingLogsPost: async (
      dosingLogDto?: Array<DosingLogDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingLog/UpdateDosingLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingLogDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DosingLogApi - functional programming interface
 * @export
 */
export const DosingLogApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DosingLogApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加加药日志 Add dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogAddDosingLogsPost(
      dosingLogDto?: Array<DosingLogDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosingLogAddDosingLogsPost(
        dosingLogDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除加药日志 Delete dosing logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogDeleteDosingLogsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosingLogDeleteDosingLogsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有加药日志 Get all dosing logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogGetAllDosingLogsGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingLogDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosingLogGetAllDosingLogsGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
     * @summary 通过条件获取加药日志 Get dosing logs by conditions
     * @param {string} [productLine] 生产线 product line code
     * @param {number} [category] 药剂类型 chemical category
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogGetDosingLogsByConditionsGet(
      productLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingLogDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingLogGetDosingLogsByConditionsGet(
          productLine,
          category,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过时间获取加药日志 Get dosing logs by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogGetDosingLogsByTimePost(
      queryByTime?: QueryByTime,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingLogDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosingLogGetDosingLogsByTimePost(
        queryByTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新加药日志 Update dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingLogUpdateDosingLogsPost(
      dosingLogDto?: Array<DosingLogDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDosingLogUpdateDosingLogsPost(
        dosingLogDto,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DosingLogApi - factory interface
 * @export
 */
export const DosingLogApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DosingLogApiFp(configuration)
  return {
    /**
     *
     * @summary 添加加药日志 Add dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogAddDosingLogsPost(
      dosingLogDto?: Array<DosingLogDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingLogAddDosingLogsPost(dosingLogDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除加药日志 Delete dosing logs by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogDeleteDosingLogsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingLogDeleteDosingLogsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有加药日志 Get all dosing logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetAllDosingLogsGet(options?: any): AxiosPromise<Array<DosingLogDto>> {
      return localVarFp
        .apiDosingLogGetAllDosingLogsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
     * @summary 通过条件获取加药日志 Get dosing logs by conditions
     * @param {string} [productLine] 生产线 product line code
     * @param {number} [category] 药剂类型 chemical category
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetDosingLogsByConditionsGet(
      productLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DosingLogDto>> {
      return localVarFp
        .apiDosingLogGetDosingLogsByConditionsGet(
          productLine,
          category,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过时间获取加药日志 Get dosing logs by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogGetDosingLogsByTimePost(
      queryByTime?: QueryByTime,
      options?: any,
    ): AxiosPromise<Array<DosingLogDto>> {
      return localVarFp
        .apiDosingLogGetDosingLogsByTimePost(queryByTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新加药日志 Update dosing logs
     * @param {Array<DosingLogDto>} [dosingLogDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingLogUpdateDosingLogsPost(
      dosingLogDto?: Array<DosingLogDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingLogUpdateDosingLogsPost(dosingLogDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DosingLogApi - object-oriented interface
 * @export
 * @class DosingLogApi
 * @extends {BaseAPI}
 */
export class DosingLogApi extends BaseAPI {
  /**
   *
   * @summary 添加加药日志 Add dosing logs
   * @param {Array<DosingLogDto>} [dosingLogDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogAddDosingLogsPost(
    dosingLogDto?: Array<DosingLogDto>,
    options?: AxiosRequestConfig,
  ) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogAddDosingLogsPost(dosingLogDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除加药日志 Delete dosing logs by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogDeleteDosingLogsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogDeleteDosingLogsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有加药日志 Get all dosing logs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogGetAllDosingLogsGet(options?: AxiosRequestConfig) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogGetAllDosingLogsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
   * @summary 通过条件获取加药日志 Get dosing logs by conditions
   * @param {string} [productLine] 生产线 product line code
   * @param {number} [category] 药剂类型 chemical category
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogGetDosingLogsByConditionsGet(
    productLine?: string,
    category?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogGetDosingLogsByConditionsGet(productLine, category, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过时间获取加药日志 Get dosing logs by time
   * @param {QueryByTime} [queryByTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogGetDosingLogsByTimePost(
    queryByTime?: QueryByTime,
    options?: AxiosRequestConfig,
  ) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogGetDosingLogsByTimePost(queryByTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新加药日志 Update dosing logs
   * @param {Array<DosingLogDto>} [dosingLogDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingLogApi
   */
  public apiDosingLogUpdateDosingLogsPost(
    dosingLogDto?: Array<DosingLogDto>,
    options?: AxiosRequestConfig,
  ) {
    return DosingLogApiFp(this.configuration)
      .apiDosingLogUpdateDosingLogsPost(dosingLogDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
