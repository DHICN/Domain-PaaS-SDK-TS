/* eslint-disable */
/**
 * 污水业务中台基础服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DataCleanTagConfigOutput } from '../models'
// @ts-ignore
import { ModelInputFileConfigOutput } from '../models'
// @ts-ignore
import { ModelParameterConfigOutput } from '../models'
// @ts-ignore
import { ModifyModelParameterConfigValueInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * ModelConfigApi - axios parameter creator
 * @export
 */
export const ModelConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取数据清洗标签的配置信息 Get data clean tags configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigDataCleanTagGetAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/data-clean-tag/get-all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询所有的模型输入文件配置项 Get all model input file configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelInputGetAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/model-input/get-all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型名称查询模型输入文件配置项 Get model input file configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelInputGetByModelGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/model-input/get-by-model`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询所有的模型参数配置项 Get all model parameter configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaGetAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/model-para/get-all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型名称查询模型参数配置项 Get model parameter configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaGetByModelGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/model-para/get-by-model`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改模型参数配置项 Modify the value of model parameter configs
     * @param {Array<ModifyModelParameterConfigValueInput>} [modifyModelParameterConfigValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaModifyValuesPost: async (
      modifyModelParameterConfigValueInput?: Array<ModifyModelParameterConfigValueInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/code-config/model-para/modify-values`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modifyModelParameterConfigValueInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModelConfigApi - functional programming interface
 * @export
 */
export const ModelConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModelConfigApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取数据清洗标签的配置信息 Get data clean tags configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigDataCleanTagGetAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCleanTagConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2CodeConfigDataCleanTagGetAllGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询所有的模型输入文件配置项 Get all model input file configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigModelInputGetAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelInputFileConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2CodeConfigModelInputGetAllGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型名称查询模型输入文件配置项 Get model input file configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigModelInputGetByModelGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelInputFileConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2CodeConfigModelInputGetByModelGet(modelName, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询所有的模型参数配置项 Get all model parameter configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigModelParaGetAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelParameterConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2CodeConfigModelParaGetAllGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型名称查询模型参数配置项 Get model parameter configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigModelParaGetByModelGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelParameterConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2CodeConfigModelParaGetByModelGet(modelName, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改模型参数配置项 Modify the value of model parameter configs
     * @param {Array<ModifyModelParameterConfigValueInput>} [modifyModelParameterConfigValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2CodeConfigModelParaModifyValuesPost(
      modifyModelParameterConfigValueInput?: Array<ModifyModelParameterConfigValueInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2CodeConfigModelParaModifyValuesPost(
          modifyModelParameterConfigValueInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ModelConfigApi - factory interface
 * @export
 */
export const ModelConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModelConfigApiFp(configuration)
  return {
    /**
     *
     * @summary 获取数据清洗标签的配置信息 Get data clean tags configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigDataCleanTagGetAllGet(
      options?: any,
    ): AxiosPromise<Array<DataCleanTagConfigOutput>> {
      return localVarFp
        .apiV2CodeConfigDataCleanTagGetAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询所有的模型输入文件配置项 Get all model input file configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelInputGetAllGet(
      options?: any,
    ): AxiosPromise<Array<ModelInputFileConfigOutput>> {
      return localVarFp
        .apiV2CodeConfigModelInputGetAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型名称查询模型输入文件配置项 Get model input file configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelInputGetByModelGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<ModelInputFileConfigOutput>> {
      return localVarFp
        .apiV2CodeConfigModelInputGetByModelGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询所有的模型参数配置项 Get all model parameter configs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaGetAllGet(
      options?: any,
    ): AxiosPromise<Array<ModelParameterConfigOutput>> {
      return localVarFp
        .apiV2CodeConfigModelParaGetAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型名称查询模型参数配置项 Get model parameter configs by model name
     * @param {string} [modelName] 模板模型名称 template scenario name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaGetByModelGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<ModelParameterConfigOutput>> {
      return localVarFp
        .apiV2CodeConfigModelParaGetByModelGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改模型参数配置项 Modify the value of model parameter configs
     * @param {Array<ModifyModelParameterConfigValueInput>} [modifyModelParameterConfigValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CodeConfigModelParaModifyValuesPost(
      modifyModelParameterConfigValueInput?: Array<ModifyModelParameterConfigValueInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2CodeConfigModelParaModifyValuesPost(modifyModelParameterConfigValueInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModelConfigApi - object-oriented interface
 * @export
 * @class ModelConfigApi
 * @extends {BaseAPI}
 */
export class ModelConfigApi extends BaseAPI {
  /**
   *
   * @summary 获取数据清洗标签的配置信息 Get data clean tags configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigDataCleanTagGetAllGet(options?: AxiosRequestConfig) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigDataCleanTagGetAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询所有的模型输入文件配置项 Get all model input file configs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigModelInputGetAllGet(options?: AxiosRequestConfig) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigModelInputGetAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型名称查询模型输入文件配置项 Get model input file configs by model name
   * @param {string} [modelName] 模板模型名称 template scenario name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigModelInputGetByModelGet(modelName?: string, options?: AxiosRequestConfig) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigModelInputGetByModelGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询所有的模型参数配置项 Get all model parameter configs
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigModelParaGetAllGet(options?: AxiosRequestConfig) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigModelParaGetAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型名称查询模型参数配置项 Get model parameter configs by model name
   * @param {string} [modelName] 模板模型名称 template scenario name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigModelParaGetByModelGet(modelName?: string, options?: AxiosRequestConfig) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigModelParaGetByModelGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改模型参数配置项 Modify the value of model parameter configs
   * @param {Array<ModifyModelParameterConfigValueInput>} [modifyModelParameterConfigValueInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelConfigApi
   */
  public apiV2CodeConfigModelParaModifyValuesPost(
    modifyModelParameterConfigValueInput?: Array<ModifyModelParameterConfigValueInput>,
    options?: AxiosRequestConfig,
  ) {
    return ModelConfigApiFp(this.configuration)
      .apiV2CodeConfigModelParaModifyValuesPost(modifyModelParameterConfigValueInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
