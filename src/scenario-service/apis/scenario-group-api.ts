/* eslint-disable */
/**
 * scenario-manager-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CreateRootScenarioGroupPara } from '../models'
// @ts-ignore
import { CreateScenarioGroupPara } from '../models'
// @ts-ignore
import { DeleteScenarioGroupPara } from '../models'
// @ts-ignore
import { Group } from '../models'
// @ts-ignore
import { RenameScenarioGroupPara } from '../models'
// @ts-ignore
import { Scenario } from '../models'
/**
 * ScenarioGroupApi - axios parameter creator
 * @export
 */
export const ScenarioGroupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group\'s Id
     * @param {string} version
     * @param {string} [parentGroupId] 父方案组ID Parent group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupChildrenGet: async (
      version: string,
      parentGroupId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupChildrenGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/children`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (parentGroupId !== undefined) {
        localVarQueryParameter['parentGroupId'] = parentGroupId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建一个新的方案组 Create a new scenario group
     * @param {string} version
     * @param {CreateScenarioGroupPara} [createScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupCreatePost: async (
      version: string,
      createScenarioGroupPara?: CreateScenarioGroupPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupCreatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/create`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createScenarioGroupPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建一个新的根方案组 Create a new root scenario group
     * @param {string} version
     * @param {CreateRootScenarioGroupPara} [createRootScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupCreateRootPost: async (
      version: string,
      createRootScenarioGroupPara?: CreateRootScenarioGroupPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupCreateRootPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/create-root`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRootScenarioGroupPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupDeletePost: async (
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupDeletePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/delete`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteScenarioGroupPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupDfsDeletePost: async (
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupDfsDeletePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/dfs/delete`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteScenarioGroupPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 重命名方案组 Rename a scenario group
     * @param {string} version
     * @param {RenameScenarioGroupPara} [renameScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupRenamePost: async (
      version: string,
      renameScenarioGroupPara?: RenameScenarioGroupPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupRenamePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/rename`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        renameScenarioGroupPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的根方案组 Get all the root scenario groups
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupRootGet: async (
      version: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupRootGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/root`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID获取其对应的方案组 Get scenario group by scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupScenarioGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupScenarioGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/scenario`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案组ID获取对应的方案列表 Get scenarios by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupScenariolistGet: async (
      version: string,
      groupId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupScenariolistGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/scenariolist`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupTemplateGet: async (
      version: string,
      groupId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenariogroupTemplateGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenariogroup/template`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScenarioGroupApi - functional programming interface
 * @export
 */
export const ScenarioGroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioGroupApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group\'s Id
     * @param {string} version
     * @param {string} [parentGroupId] 父方案组ID Parent group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupChildrenGet(
      version: string,
      parentGroupId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupChildrenGet(
          version,
          parentGroupId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建一个新的方案组 Create a new scenario group
     * @param {string} version
     * @param {CreateScenarioGroupPara} [createScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupCreatePost(
      version: string,
      createScenarioGroupPara?: CreateScenarioGroupPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupCreatePost(
          version,
          createScenarioGroupPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建一个新的根方案组 Create a new root scenario group
     * @param {string} version
     * @param {CreateRootScenarioGroupPara} [createRootScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupCreateRootPost(
      version: string,
      createRootScenarioGroupPara?: CreateRootScenarioGroupPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupCreateRootPost(
          version,
          createRootScenarioGroupPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupDeletePost(
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupDeletePost(
          version,
          deleteScenarioGroupPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupDfsDeletePost(
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupDfsDeletePost(
          version,
          deleteScenarioGroupPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 重命名方案组 Rename a scenario group
     * @param {string} version
     * @param {RenameScenarioGroupPara} [renameScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupRenamePost(
      version: string,
      renameScenarioGroupPara?: RenameScenarioGroupPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupRenamePost(
          version,
          renameScenarioGroupPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的根方案组 Get all the root scenario groups
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupRootGet(
      version: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupRootGet(version, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID获取其对应的方案组 Get scenario group by scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupScenarioGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupScenarioGet(
          version,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案组ID获取对应的方案列表 Get scenarios by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupScenariolistGet(
      version: string,
      groupId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupScenariolistGet(
          version,
          groupId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenariogroupTemplateGet(
      version: string,
      groupId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenariogroupTemplateGet(
          version,
          groupId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScenarioGroupApi - factory interface
 * @export
 */
export const ScenarioGroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScenarioGroupApiFp(configuration)
  return {
    /**
     *
     * @summary 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group\'s Id
     * @param {string} version
     * @param {string} [parentGroupId] 父方案组ID Parent group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupChildrenGet(
      version: string,
      parentGroupId?: string,
      options?: any,
    ): AxiosPromise<Array<Group>> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupChildrenGet(version, parentGroupId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建一个新的方案组 Create a new scenario group
     * @param {string} version
     * @param {CreateScenarioGroupPara} [createScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupCreatePost(
      version: string,
      createScenarioGroupPara?: CreateScenarioGroupPara,
      options?: any,
    ): AxiosPromise<Group> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupCreatePost(version, createScenarioGroupPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建一个新的根方案组 Create a new root scenario group
     * @param {string} version
     * @param {CreateRootScenarioGroupPara} [createRootScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupCreateRootPost(
      version: string,
      createRootScenarioGroupPara?: CreateRootScenarioGroupPara,
      options?: any,
    ): AxiosPromise<Group> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupCreateRootPost(
          version,
          createRootScenarioGroupPara,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupDeletePost(
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupDeletePost(version, deleteScenarioGroupPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupDfsDeletePost(
      version: string,
      deleteScenarioGroupPara?: DeleteScenarioGroupPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupDfsDeletePost(version, deleteScenarioGroupPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 重命名方案组 Rename a scenario group
     * @param {string} version
     * @param {RenameScenarioGroupPara} [renameScenarioGroupPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupRenamePost(
      version: string,
      renameScenarioGroupPara?: RenameScenarioGroupPara,
      options?: any,
    ): AxiosPromise<Group> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupRenamePost(version, renameScenarioGroupPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的根方案组 Get all the root scenario groups
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupRootGet(
      version: string,
      options?: any,
    ): AxiosPromise<Array<Group>> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupRootGet(version, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID获取其对应的方案组 Get scenario group by scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupScenarioGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Group> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupScenarioGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案组ID获取对应的方案列表 Get scenarios by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupScenariolistGet(
      version: string,
      groupId?: string,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupScenariolistGet(version, groupId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group\'s Id
     * @param {string} version
     * @param {string} [groupId] 方案组ID Group\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenariogroupTemplateGet(
      version: string,
      groupId?: string,
      options?: any,
    ): AxiosPromise<Array<Group>> {
      return localVarFp
        .apiV2ScenarioManagerScenariogroupTemplateGet(version, groupId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScenarioGroupApi - object-oriented interface
 * @export
 * @class ScenarioGroupApi
 * @extends {BaseAPI}
 */
export class ScenarioGroupApi extends BaseAPI {
  /**
   *
   * @summary 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group\'s Id
   * @param {string} version
   * @param {string} [parentGroupId] 父方案组ID Parent group\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupChildrenGet(
    version: string,
    parentGroupId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupChildrenGet(version, parentGroupId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建一个新的方案组 Create a new scenario group
   * @param {string} version
   * @param {CreateScenarioGroupPara} [createScenarioGroupPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupCreatePost(
    version: string,
    createScenarioGroupPara?: CreateScenarioGroupPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupCreatePost(version, createScenarioGroupPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建一个新的根方案组 Create a new root scenario group
   * @param {string} version
   * @param {CreateRootScenarioGroupPara} [createRootScenarioGroupPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupCreateRootPost(
    version: string,
    createRootScenarioGroupPara?: CreateRootScenarioGroupPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupCreateRootPost(
        version,
        createRootScenarioGroupPara,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios
   * @param {string} version
   * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupDeletePost(
    version: string,
    deleteScenarioGroupPara?: DeleteScenarioGroupPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupDeletePost(version, deleteScenarioGroupPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it\'s scenarios based on the distributed file system
   * @param {string} version
   * @param {DeleteScenarioGroupPara} [deleteScenarioGroupPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupDfsDeletePost(
    version: string,
    deleteScenarioGroupPara?: DeleteScenarioGroupPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupDfsDeletePost(version, deleteScenarioGroupPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 重命名方案组 Rename a scenario group
   * @param {string} version
   * @param {RenameScenarioGroupPara} [renameScenarioGroupPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupRenamePost(
    version: string,
    renameScenarioGroupPara?: RenameScenarioGroupPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupRenamePost(version, renameScenarioGroupPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的根方案组 Get all the root scenario groups
   * @param {string} version
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupRootGet(version: string, options?: AxiosRequestConfig) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupRootGet(version, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID获取其对应的方案组 Get scenario group by scenario\'s Id
   * @param {string} version
   * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupScenarioGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupScenarioGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案组ID获取对应的方案列表 Get scenarios by group\'s Id
   * @param {string} version
   * @param {string} [groupId] 方案组ID Group\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupScenariolistGet(
    version: string,
    groupId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupScenariolistGet(version, groupId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group\'s Id
   * @param {string} version
   * @param {string} [groupId] 方案组ID Group\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioGroupApi
   */
  public apiV2ScenarioManagerScenariogroupTemplateGet(
    version: string,
    groupId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioGroupApiFp(this.configuration)
      .apiV2ScenarioManagerScenariogroupTemplateGet(version, groupId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
