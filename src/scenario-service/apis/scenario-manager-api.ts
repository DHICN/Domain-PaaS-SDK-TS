/* eslint-disable */
/**
 * scenario-manager-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CreateScenarioByGroupPara2 } from '../models'
// @ts-ignore
import { CreateScenarioFromFilePara2 } from '../models'
// @ts-ignore
import { CreateScenarioPara2 } from '../models'
// @ts-ignore
import { CreateTemplateScenarioByMinIoPara2 } from '../models'
// @ts-ignore
import { CreateTemplateScenarioPara2 } from '../models'
// @ts-ignore
import { DeleteScenarioPara } from '../models'
// @ts-ignore
import { ModelFileResult } from '../models'
// @ts-ignore
import { RenameScenarioPara } from '../models'
// @ts-ignore
import { Scenario } from '../models'
// @ts-ignore
import { UpdateScenarioPara } from '../models'
/**
 * ScenarioManagerApi - axios parameter creator
 * @export
 */
export const ScenarioManagerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取方案的计算状态 Get scenario\'s calculate status
     * @param {string} version
     * @param {string} [scenarioCode] 方案的代码 scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCalculatedstatusGet: async (
      version: string,
      scenarioCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCalculatedstatusGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/calculatedstatus`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioCode !== undefined) {
        localVarQueryParameter['scenarioCode'] = scenarioCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据父方案ID获取其下子方案的列表 Get child scenarios by parent scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 父方案ID Parent scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioChildrenGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioChildrenGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/children`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案代码获取方案基本信息 Get scenario information by code
     * @param {string} version
     * @param {string} [scenarioCode] 方案代码 Scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCodeGet: async (
      version: string,
      scenarioCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCodeGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/code`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioCode !== undefined) {
        localVarQueryParameter['scenarioCode'] = scenarioCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于本地模型文件创建一个新的方案 Create a new scenario with a local model file
     * @param {string} version
     * @param {CreateScenarioFromFilePara2} [createScenarioFromFilePara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateByFilePost: async (
      version: string,
      createScenarioFromFilePara2?: CreateScenarioFromFilePara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCreateByFilePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/create-by-file`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createScenarioFromFilePara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 在指定方案组下创建一个新的方案 Create a new scenario under a specified group
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateByGroupPost: async (
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCreateByGroupPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/create-by-group`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createScenarioByGroupPara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建一个新的方案 Create a new scenario
     * @param {string} version
     * @param {CreateScenarioPara2} [createScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreatePost: async (
      version: string,
      createScenarioPara2?: CreateScenarioPara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCreatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/create`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createScenarioPara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建一个新的模板方案 Create a new template scenario
     * @param {string} version
     * @param {CreateTemplateScenarioPara2} [createTemplateScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateTemplatePost: async (
      version: string,
      createTemplateScenarioPara2?: CreateTemplateScenarioPara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioCreateTemplatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/create-template`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTemplateScenarioPara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID删除方案 Delete scenario by Id
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDeletePost: async (
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioDeletePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/delete`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteScenarioPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于分布式文件系统，在指定方案组下创建一个新的方案 Create a new scenario under a specified group based on the distributed file system
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsCreateByGroupPost: async (
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioDfsCreateByGroupPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/dfs/create-by-group`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createScenarioByGroupPara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于分布式文件系统，创建模板方案 Create a new template scenario based on the distributed file system
     * @param {string} version
     * @param {CreateTemplateScenarioByMinIoPara2} [createTemplateScenarioByMinIoPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsCreateTemplatePost: async (
      version: string,
      createTemplateScenarioByMinIoPara2?: CreateTemplateScenarioByMinIoPara2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioDfsCreateTemplatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/dfs/create-template`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTemplateScenarioByMinIoPara2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于分布式文件系统，根据方案ID删除方案 Delete scenario by Id based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsDeletePost: async (
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioDfsDeletePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/dfs/delete`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteScenarioPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID获取方案基本信息 Get scenario information by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID获取方案的主模型文件绝对路径 Get scenario\'s absolute model file path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioModelfileGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioModelfileGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/modelfile`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 重命名方案 Rename a scenario
     * @param {string} version
     * @param {RenameScenarioPara} [renameScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioRenamePost: async (
      version: string,
      renameScenarioPara?: RenameScenarioPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioRenamePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/rename`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        renameScenarioPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID获取方案文件夹的绝对路径 Get scenario\'s absolute folder path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioScenariopathGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioScenariopathGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/scenariopath`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据子类型获取方案列表 Get scenarios by subtype
     * @param {string} version
     * @param {string} [subType] 方案子类型 Scenario\&#39;s subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioSubtypeGet: async (
      version: string,
      subType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioSubtypeGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/subtype`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (subType !== undefined) {
        localVarQueryParameter['subType'] = subType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案ID获取其对应的模板方案 Get template scenario (is_template=1) of a scenario
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioTemplateGet: async (
      version: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioTemplateGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/template`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的模板方案 Get all the template scenarios
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioTemplatelistGet: async (
      version: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioTemplatelistGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/templatelist`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新方案基本信息 Update Scenarios
     * @param {string} version
     * @param {UpdateScenarioPara} [updateScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioUpdatePost: async (
      version: string,
      updateScenarioPara?: UpdateScenarioPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioUpdatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/update`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateScenarioPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新方案，同时更新其对应的模型文件 Update scenario along with it\'s model files
     * @param {string} version
     * @param {Scenario} [scenario]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioUpdateScenarioModelPost: async (
      version: string,
      scenario?: Scenario,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerScenarioUpdateScenarioModelPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/scenario/update-scenario-model`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenario,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScenarioManagerApi - functional programming interface
 * @export
 */
export const ScenarioManagerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioManagerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取方案的计算状态 Get scenario\'s calculate status
     * @param {string} version
     * @param {string} [scenarioCode] 方案的代码 scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCalculatedstatusGet(
      version: string,
      scenarioCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCalculatedstatusGet(
          version,
          scenarioCode,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据父方案ID获取其下子方案的列表 Get child scenarios by parent scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 父方案ID Parent scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioChildrenGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioChildrenGet(
          version,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案代码获取方案基本信息 Get scenario information by code
     * @param {string} version
     * @param {string} [scenarioCode] 方案代码 Scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCodeGet(
      version: string,
      scenarioCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCodeGet(
        version,
        scenarioCode,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于本地模型文件创建一个新的方案 Create a new scenario with a local model file
     * @param {string} version
     * @param {CreateScenarioFromFilePara2} [createScenarioFromFilePara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCreateByFilePost(
      version: string,
      createScenarioFromFilePara2?: CreateScenarioFromFilePara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCreateByFilePost(
          version,
          createScenarioFromFilePara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 在指定方案组下创建一个新的方案 Create a new scenario under a specified group
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCreateByGroupPost(
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCreateByGroupPost(
          version,
          createScenarioByGroupPara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建一个新的方案 Create a new scenario
     * @param {string} version
     * @param {CreateScenarioPara2} [createScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCreatePost(
      version: string,
      createScenarioPara2?: CreateScenarioPara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCreatePost(
          version,
          createScenarioPara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建一个新的模板方案 Create a new template scenario
     * @param {string} version
     * @param {CreateTemplateScenarioPara2} [createTemplateScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioCreateTemplatePost(
      version: string,
      createTemplateScenarioPara2?: CreateTemplateScenarioPara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioCreateTemplatePost(
          version,
          createTemplateScenarioPara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID删除方案 Delete scenario by Id
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioDeletePost(
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioDeletePost(
          version,
          deleteScenarioPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于分布式文件系统，在指定方案组下创建一个新的方案 Create a new scenario under a specified group based on the distributed file system
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
          version,
          createScenarioByGroupPara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于分布式文件系统，创建模板方案 Create a new template scenario based on the distributed file system
     * @param {string} version
     * @param {CreateTemplateScenarioByMinIoPara2} [createTemplateScenarioByMinIoPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
      version: string,
      createTemplateScenarioByMinIoPara2?: CreateTemplateScenarioByMinIoPara2,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
          version,
          createTemplateScenarioByMinIoPara2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于分布式文件系统，根据方案ID删除方案 Delete scenario by Id based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioDfsDeletePost(
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioDfsDeletePost(
          version,
          deleteScenarioPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID获取方案基本信息 Get scenario information by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioGet(
        version,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID获取方案的主模型文件绝对路径 Get scenario\'s absolute model file path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioModelfileGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelFileResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioModelfileGet(
          version,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 重命名方案 Rename a scenario
     * @param {string} version
     * @param {RenameScenarioPara} [renameScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioRenamePost(
      version: string,
      renameScenarioPara?: RenameScenarioPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioRenamePost(
          version,
          renameScenarioPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID获取方案文件夹的绝对路径 Get scenario\'s absolute folder path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioScenariopathGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelFileResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioScenariopathGet(
          version,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据子类型获取方案列表 Get scenarios by subtype
     * @param {string} version
     * @param {string} [subType] 方案子类型 Scenario\&#39;s subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioSubtypeGet(
      version: string,
      subType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioSubtypeGet(
          version,
          subType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案ID获取其对应的模板方案 Get template scenario (is_template=1) of a scenario
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioTemplateGet(
      version: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioTemplateGet(
          version,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的模板方案 Get all the template scenarios
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioTemplatelistGet(
      version: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioTemplatelistGet(
          version,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新方案基本信息 Update Scenarios
     * @param {string} version
     * @param {UpdateScenarioPara} [updateScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioUpdatePost(
      version: string,
      updateScenarioPara?: UpdateScenarioPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioUpdatePost(
          version,
          updateScenarioPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新方案，同时更新其对应的模型文件 Update scenario along with it\'s model files
     * @param {string} version
     * @param {Scenario} [scenario]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerScenarioUpdateScenarioModelPost(
      version: string,
      scenario?: Scenario,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerScenarioUpdateScenarioModelPost(
          version,
          scenario,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScenarioManagerApi - factory interface
 * @export
 */
export const ScenarioManagerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScenarioManagerApiFp(configuration)
  return {
    /**
     *
     * @summary 获取方案的计算状态 Get scenario\'s calculate status
     * @param {string} version
     * @param {string} [scenarioCode] 方案的代码 scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCalculatedstatusGet(
      version: string,
      scenarioCode?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCalculatedstatusGet(version, scenarioCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据父方案ID获取其下子方案的列表 Get child scenarios by parent scenario\'s Id
     * @param {string} version
     * @param {string} [scenarioId] 父方案ID Parent scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioChildrenGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerScenarioChildrenGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案代码获取方案基本信息 Get scenario information by code
     * @param {string} version
     * @param {string} [scenarioCode] 方案代码 Scenario\&#39;s code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCodeGet(
      version: string,
      scenarioCode?: string,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCodeGet(version, scenarioCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于本地模型文件创建一个新的方案 Create a new scenario with a local model file
     * @param {string} version
     * @param {CreateScenarioFromFilePara2} [createScenarioFromFilePara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateByFilePost(
      version: string,
      createScenarioFromFilePara2?: CreateScenarioFromFilePara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCreateByFilePost(version, createScenarioFromFilePara2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 在指定方案组下创建一个新的方案 Create a new scenario under a specified group
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateByGroupPost(
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCreateByGroupPost(version, createScenarioByGroupPara2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建一个新的方案 Create a new scenario
     * @param {string} version
     * @param {CreateScenarioPara2} [createScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreatePost(
      version: string,
      createScenarioPara2?: CreateScenarioPara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCreatePost(version, createScenarioPara2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建一个新的模板方案 Create a new template scenario
     * @param {string} version
     * @param {CreateTemplateScenarioPara2} [createTemplateScenarioPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioCreateTemplatePost(
      version: string,
      createTemplateScenarioPara2?: CreateTemplateScenarioPara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioCreateTemplatePost(
          version,
          createTemplateScenarioPara2,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID删除方案 Delete scenario by Id
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDeletePost(
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenarioDeletePost(version, deleteScenarioPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于分布式文件系统，在指定方案组下创建一个新的方案 Create a new scenario under a specified group based on the distributed file system
     * @param {string} version
     * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
      version: string,
      createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
          version,
          createScenarioByGroupPara2,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于分布式文件系统，创建模板方案 Create a new template scenario based on the distributed file system
     * @param {string} version
     * @param {CreateTemplateScenarioByMinIoPara2} [createTemplateScenarioByMinIoPara2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
      version: string,
      createTemplateScenarioByMinIoPara2?: CreateTemplateScenarioByMinIoPara2,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
          version,
          createTemplateScenarioByMinIoPara2,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于分布式文件系统，根据方案ID删除方案 Delete scenario by Id based on the distributed file system
     * @param {string} version
     * @param {DeleteScenarioPara} [deleteScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioDfsDeletePost(
      version: string,
      deleteScenarioPara?: DeleteScenarioPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenarioDfsDeletePost(version, deleteScenarioPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID获取方案基本信息 Get scenario information by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID获取方案的主模型文件绝对路径 Get scenario\'s absolute model file path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioModelfileGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<ModelFileResult> {
      return localVarFp
        .apiV2ScenarioManagerScenarioModelfileGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 重命名方案 Rename a scenario
     * @param {string} version
     * @param {RenameScenarioPara} [renameScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioRenamePost(
      version: string,
      renameScenarioPara?: RenameScenarioPara,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioRenamePost(version, renameScenarioPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID获取方案文件夹的绝对路径 Get scenario\'s absolute folder path by Id
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioScenariopathGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<ModelFileResult> {
      return localVarFp
        .apiV2ScenarioManagerScenarioScenariopathGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据子类型获取方案列表 Get scenarios by subtype
     * @param {string} version
     * @param {string} [subType] 方案子类型 Scenario\&#39;s subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioSubtypeGet(
      version: string,
      subType?: string,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerScenarioSubtypeGet(version, subType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案ID获取其对应的模板方案 Get template scenario (is_template=1) of a scenario
     * @param {string} version
     * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioTemplateGet(
      version: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerScenarioTemplateGet(version, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的模板方案 Get all the template scenarios
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioTemplatelistGet(
      version: string,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerScenarioTemplatelistGet(version, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新方案基本信息 Update Scenarios
     * @param {string} version
     * @param {UpdateScenarioPara} [updateScenarioPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioUpdatePost(
      version: string,
      updateScenarioPara?: UpdateScenarioPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenarioUpdatePost(version, updateScenarioPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新方案，同时更新其对应的模型文件 Update scenario along with it\'s model files
     * @param {string} version
     * @param {Scenario} [scenario]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerScenarioUpdateScenarioModelPost(
      version: string,
      scenario?: Scenario,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerScenarioUpdateScenarioModelPost(version, scenario, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScenarioManagerApi - object-oriented interface
 * @export
 * @class ScenarioManagerApi
 * @extends {BaseAPI}
 */
export class ScenarioManagerApi extends BaseAPI {
  /**
   *
   * @summary 获取方案的计算状态 Get scenario\'s calculate status
   * @param {string} version
   * @param {string} [scenarioCode] 方案的代码 scenario\&#39;s code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCalculatedstatusGet(
    version: string,
    scenarioCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCalculatedstatusGet(version, scenarioCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据父方案ID获取其下子方案的列表 Get child scenarios by parent scenario\'s Id
   * @param {string} version
   * @param {string} [scenarioId] 父方案ID Parent scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioChildrenGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioChildrenGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案代码获取方案基本信息 Get scenario information by code
   * @param {string} version
   * @param {string} [scenarioCode] 方案代码 Scenario\&#39;s code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCodeGet(
    version: string,
    scenarioCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCodeGet(version, scenarioCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于本地模型文件创建一个新的方案 Create a new scenario with a local model file
   * @param {string} version
   * @param {CreateScenarioFromFilePara2} [createScenarioFromFilePara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCreateByFilePost(
    version: string,
    createScenarioFromFilePara2?: CreateScenarioFromFilePara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCreateByFilePost(version, createScenarioFromFilePara2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 在指定方案组下创建一个新的方案 Create a new scenario under a specified group
   * @param {string} version
   * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCreateByGroupPost(
    version: string,
    createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCreateByGroupPost(version, createScenarioByGroupPara2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建一个新的方案 Create a new scenario
   * @param {string} version
   * @param {CreateScenarioPara2} [createScenarioPara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCreatePost(
    version: string,
    createScenarioPara2?: CreateScenarioPara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCreatePost(version, createScenarioPara2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建一个新的模板方案 Create a new template scenario
   * @param {string} version
   * @param {CreateTemplateScenarioPara2} [createTemplateScenarioPara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioCreateTemplatePost(
    version: string,
    createTemplateScenarioPara2?: CreateTemplateScenarioPara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioCreateTemplatePost(version, createTemplateScenarioPara2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID删除方案 Delete scenario by Id
   * @param {string} version
   * @param {DeleteScenarioPara} [deleteScenarioPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioDeletePost(
    version: string,
    deleteScenarioPara?: DeleteScenarioPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioDeletePost(version, deleteScenarioPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于分布式文件系统，在指定方案组下创建一个新的方案 Create a new scenario under a specified group based on the distributed file system
   * @param {string} version
   * @param {CreateScenarioByGroupPara2} [createScenarioByGroupPara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
    version: string,
    createScenarioByGroupPara2?: CreateScenarioByGroupPara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioDfsCreateByGroupPost(
        version,
        createScenarioByGroupPara2,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于分布式文件系统，创建模板方案 Create a new template scenario based on the distributed file system
   * @param {string} version
   * @param {CreateTemplateScenarioByMinIoPara2} [createTemplateScenarioByMinIoPara2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
    version: string,
    createTemplateScenarioByMinIoPara2?: CreateTemplateScenarioByMinIoPara2,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioDfsCreateTemplatePost(
        version,
        createTemplateScenarioByMinIoPara2,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于分布式文件系统，根据方案ID删除方案 Delete scenario by Id based on the distributed file system
   * @param {string} version
   * @param {DeleteScenarioPara} [deleteScenarioPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioDfsDeletePost(
    version: string,
    deleteScenarioPara?: DeleteScenarioPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioDfsDeletePost(version, deleteScenarioPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID获取方案基本信息 Get scenario information by Id
   * @param {string} version
   * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID获取方案的主模型文件绝对路径 Get scenario\'s absolute model file path by Id
   * @param {string} version
   * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioModelfileGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioModelfileGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 重命名方案 Rename a scenario
   * @param {string} version
   * @param {RenameScenarioPara} [renameScenarioPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioRenamePost(
    version: string,
    renameScenarioPara?: RenameScenarioPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioRenamePost(version, renameScenarioPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID获取方案文件夹的绝对路径 Get scenario\'s absolute folder path by Id
   * @param {string} version
   * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioScenariopathGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioScenariopathGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据子类型获取方案列表 Get scenarios by subtype
   * @param {string} version
   * @param {string} [subType] 方案子类型 Scenario\&#39;s subtype
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioSubtypeGet(
    version: string,
    subType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioSubtypeGet(version, subType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案ID获取其对应的模板方案 Get template scenario (is_template=1) of a scenario
   * @param {string} version
   * @param {string} [scenarioId] 方案ID Scenario\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioTemplateGet(
    version: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioTemplateGet(version, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的模板方案 Get all the template scenarios
   * @param {string} version
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioTemplatelistGet(
    version: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioTemplatelistGet(version, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新方案基本信息 Update Scenarios
   * @param {string} version
   * @param {UpdateScenarioPara} [updateScenarioPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioUpdatePost(
    version: string,
    updateScenarioPara?: UpdateScenarioPara,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioUpdatePost(version, updateScenarioPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新方案，同时更新其对应的模型文件 Update scenario along with it\'s model files
   * @param {string} version
   * @param {Scenario} [scenario]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioManagerApi
   */
  public apiV2ScenarioManagerScenarioUpdateScenarioModelPost(
    version: string,
    scenario?: Scenario,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioManagerApiFp(this.configuration)
      .apiV2ScenarioManagerScenarioUpdateScenarioModelPost(version, scenario, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
