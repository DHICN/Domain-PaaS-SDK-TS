/* eslint-disable */
/**
 * scenario-manager-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddLibrariesPara } from '../models'
// @ts-ignore
import { DeleteLibrariesPara } from '../models'
// @ts-ignore
import { Library } from '../models'
// @ts-ignore
import { Scenario } from '../models'
// @ts-ignore
import { TurnOnTemplatePara } from '../models'
// @ts-ignore
import { UpdateLibraryPara } from '../models'
/**
 * LibraryApi - axios parameter creator
 * @export
 */
export const LibraryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 创建新的方案库 Add new libraries
     * @param {string} version
     * @param {Array<AddLibrariesPara>} [addLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryAddPost: async (
      version: string,
      addLibrariesPara?: Array<AddLibrariesPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryAddPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/add`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addLibrariesPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案库ID删除方案库 Delete libraries by ids
     * @param {string} version
     * @param {DeleteLibrariesPara} [deleteLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryDeletePost: async (
      version: string,
      deleteLibrariesPara?: DeleteLibrariesPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryDeletePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/delete`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteLibrariesPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryLatestscenarioGet: async (
      version: string,
      libraryId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryLatestscenarioGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/latestscenario`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (libraryId !== undefined) {
        localVarQueryParameter['libraryId'] = libraryId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有方案库列表 Get all the libraries
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListGet: async (
      version: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryListGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/list`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v2/scenario-manager/library/list/getcachedscenario
     * @param {string} version
     * @param {string} [type]
     * @param {string} [businessType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListGetcachedscenarioGet: async (
      version: string,
      type?: string,
      businessType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryListGetcachedscenarioGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/list/getcachedscenario`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (businessType !== undefined) {
        localVarQueryParameter['businessType'] = businessType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {string} [businessType] 业务类型 Business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListTypeBusinesstypeGet: async (
      version: string,
      type?: string,
      businessType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryListTypeBusinesstypeGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/list/type_businesstype`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      if (businessType !== undefined) {
        localVarQueryParameter['businessType'] = businessType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据类型查询方案库 Get libraries by type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListTypeGet: async (
      version: string,
      type?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryListTypeGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/list/type`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案库查询其下的方案列表，支持分页 Get scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库的ID Library\&#39;s Id
     * @param {number} [pageIndex] 分页序号，从1开始 Page index, start from 1
     * @param {number} [pageSize] 每一页的个数 Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryScenariolistGet: async (
      version: string,
      libraryId?: string,
      pageIndex?: number,
      pageSize?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryScenariolistGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/scenariolist`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (libraryId !== undefined) {
        localVarQueryParameter['libraryId'] = libraryId
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter['pageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
     * @summary 启用库下面的模板方案 Turn on template by library
     * @param {string} version
     * @param {TurnOnTemplatePara} [turnOnTemplatePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryTemplateSwitchPost: async (
      version: string,
      turnOnTemplatePara?: TurnOnTemplatePara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryTemplateSwitchPost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/template/switch`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        turnOnTemplatePara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryTemplatelistGet: async (
      version: string,
      libraryId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryTemplatelistGet', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/templatelist`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (libraryId !== undefined) {
        localVarQueryParameter['libraryId'] = libraryId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新方案库信息 Update library information
     * @param {string} version
     * @param {UpdateLibraryPara} [updateLibraryPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryUpdatePost: async (
      version: string,
      updateLibraryPara?: UpdateLibraryPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      assertParamExists('apiV2ScenarioManagerLibraryUpdatePost', 'version', version)
      const localVarPath = `/api/v2/scenario-manager/library/update`.replace(
        `{${'version'}}`,
        encodeURIComponent(String(version)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLibraryPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LibraryApi - functional programming interface
 * @export
 */
export const LibraryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LibraryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 创建新的方案库 Add new libraries
     * @param {string} version
     * @param {Array<AddLibrariesPara>} [addLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryAddPost(
      version: string,
      addLibrariesPara?: Array<AddLibrariesPara>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Library>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryAddPost(
        version,
        addLibrariesPara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案库ID删除方案库 Delete libraries by ids
     * @param {string} version
     * @param {DeleteLibrariesPara} [deleteLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryDeletePost(
      version: string,
      deleteLibrariesPara?: DeleteLibrariesPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryDeletePost(
          version,
          deleteLibrariesPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryLatestscenarioGet(
      version: string,
      libraryId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryLatestscenarioGet(
          version,
          libraryId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有方案库列表 Get all the libraries
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryListGet(
      version: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Library>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryListGet(
        version,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v2/scenario-manager/library/list/getcachedscenario
     * @param {string} version
     * @param {string} [type]
     * @param {string} [businessType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryListGetcachedscenarioGet(
      version: string,
      type?: string,
      businessType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryListGetcachedscenarioGet(
          version,
          type,
          businessType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {string} [businessType] 业务类型 Business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(
      version: string,
      type?: string,
      businessType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Library>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(
          version,
          type,
          businessType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据类型查询方案库 Get libraries by type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryListTypeGet(
      version: string,
      type?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Library>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryListTypeGet(
          version,
          type,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案库查询其下的方案列表，支持分页 Get scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库的ID Library\&#39;s Id
     * @param {number} [pageIndex] 分页序号，从1开始 Page index, start from 1
     * @param {number} [pageSize] 每一页的个数 Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryScenariolistGet(
      version: string,
      libraryId?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryScenariolistGet(
          version,
          libraryId,
          pageIndex,
          pageSize,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
     * @summary 启用库下面的模板方案 Turn on template by library
     * @param {string} version
     * @param {TurnOnTemplatePara} [turnOnTemplatePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryTemplateSwitchPost(
      version: string,
      turnOnTemplatePara?: TurnOnTemplatePara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryTemplateSwitchPost(
          version,
          turnOnTemplatePara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryTemplatelistGet(
      version: string,
      libraryId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryTemplatelistGet(
          version,
          libraryId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新方案库信息 Update library information
     * @param {string} version
     * @param {UpdateLibraryPara} [updateLibraryPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ScenarioManagerLibraryUpdatePost(
      version: string,
      updateLibraryPara?: UpdateLibraryPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ScenarioManagerLibraryUpdatePost(
          version,
          updateLibraryPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * LibraryApi - factory interface
 * @export
 */
export const LibraryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LibraryApiFp(configuration)
  return {
    /**
     *
     * @summary 创建新的方案库 Add new libraries
     * @param {string} version
     * @param {Array<AddLibrariesPara>} [addLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryAddPost(
      version: string,
      addLibrariesPara?: Array<AddLibrariesPara>,
      options?: any,
    ): AxiosPromise<Array<Library>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryAddPost(version, addLibrariesPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案库ID删除方案库 Delete libraries by ids
     * @param {string} version
     * @param {DeleteLibrariesPara} [deleteLibrariesPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryDeletePost(
      version: string,
      deleteLibrariesPara?: DeleteLibrariesPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerLibraryDeletePost(version, deleteLibrariesPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryLatestscenarioGet(
      version: string,
      libraryId?: string,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerLibraryLatestscenarioGet(version, libraryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有方案库列表 Get all the libraries
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListGet(
      version: string,
      options?: any,
    ): AxiosPromise<Array<Library>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryListGet(version, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v2/scenario-manager/library/list/getcachedscenario
     * @param {string} version
     * @param {string} [type]
     * @param {string} [businessType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListGetcachedscenarioGet(
      version: string,
      type?: string,
      businessType?: string,
      options?: any,
    ): AxiosPromise<Scenario> {
      return localVarFp
        .apiV2ScenarioManagerLibraryListGetcachedscenarioGet(version, type, businessType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {string} [businessType] 业务类型 Business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(
      version: string,
      type?: string,
      businessType?: string,
      options?: any,
    ): AxiosPromise<Array<Library>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(version, type, businessType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据类型查询方案库 Get libraries by type
     * @param {string} version
     * @param {string} [type] 方案库类型 Library type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryListTypeGet(
      version: string,
      type?: string,
      options?: any,
    ): AxiosPromise<Array<Library>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryListTypeGet(version, type, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案库查询其下的方案列表，支持分页 Get scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库的ID Library\&#39;s Id
     * @param {number} [pageIndex] 分页序号，从1开始 Page index, start from 1
     * @param {number} [pageSize] 每一页的个数 Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryScenariolistGet(
      version: string,
      libraryId?: string,
      pageIndex?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryScenariolistGet(
          version,
          libraryId,
          pageIndex,
          pageSize,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
     * @summary 启用库下面的模板方案 Turn on template by library
     * @param {string} version
     * @param {TurnOnTemplatePara} [turnOnTemplatePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryTemplateSwitchPost(
      version: string,
      turnOnTemplatePara?: TurnOnTemplatePara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerLibraryTemplateSwitchPost(version, turnOnTemplatePara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library\'s Id
     * @param {string} version
     * @param {string} [libraryId] 方案库ID Library\&#39;s Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryTemplatelistGet(
      version: string,
      libraryId?: string,
      options?: any,
    ): AxiosPromise<Array<Scenario>> {
      return localVarFp
        .apiV2ScenarioManagerLibraryTemplatelistGet(version, libraryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新方案库信息 Update library information
     * @param {string} version
     * @param {UpdateLibraryPara} [updateLibraryPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ScenarioManagerLibraryUpdatePost(
      version: string,
      updateLibraryPara?: UpdateLibraryPara,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ScenarioManagerLibraryUpdatePost(version, updateLibraryPara, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * LibraryApi - object-oriented interface
 * @export
 * @class LibraryApi
 * @extends {BaseAPI}
 */
export class LibraryApi extends BaseAPI {
  /**
   *
   * @summary 创建新的方案库 Add new libraries
   * @param {string} version
   * @param {Array<AddLibrariesPara>} [addLibrariesPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryAddPost(
    version: string,
    addLibrariesPara?: Array<AddLibrariesPara>,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryAddPost(version, addLibrariesPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案库ID删除方案库 Delete libraries by ids
   * @param {string} version
   * @param {DeleteLibrariesPara} [deleteLibrariesPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryDeletePost(
    version: string,
    deleteLibrariesPara?: DeleteLibrariesPara,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryDeletePost(version, deleteLibrariesPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library\'s Id
   * @param {string} version
   * @param {string} [libraryId] 方案库ID Library\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryLatestscenarioGet(
    version: string,
    libraryId?: string,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryLatestscenarioGet(version, libraryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有方案库列表 Get all the libraries
   * @param {string} version
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryListGet(version: string, options?: AxiosRequestConfig) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryListGet(version, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v2/scenario-manager/library/list/getcachedscenario
   * @param {string} version
   * @param {string} [type]
   * @param {string} [businessType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryListGetcachedscenarioGet(
    version: string,
    type?: string,
    businessType?: string,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryListGetcachedscenarioGet(version, type, businessType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
   * @param {string} version
   * @param {string} [type] 方案库类型 Library type
   * @param {string} [businessType] 业务类型 Business type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(
    version: string,
    type?: string,
    businessType?: string,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryListTypeBusinesstypeGet(version, type, businessType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据类型查询方案库 Get libraries by type
   * @param {string} version
   * @param {string} [type] 方案库类型 Library type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryListTypeGet(
    version: string,
    type?: string,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryListTypeGet(version, type, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案库查询其下的方案列表，支持分页 Get scenarios by library\'s Id
   * @param {string} version
   * @param {string} [libraryId] 方案库的ID Library\&#39;s Id
   * @param {number} [pageIndex] 分页序号，从1开始 Page index, start from 1
   * @param {number} [pageSize] 每一页的个数 Page size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryScenariolistGet(
    version: string,
    libraryId?: string,
    pageIndex?: number,
    pageSize?: number,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryScenariolistGet(version, libraryId, pageIndex, pageSize, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
   * @summary 启用库下面的模板方案 Turn on template by library
   * @param {string} version
   * @param {TurnOnTemplatePara} [turnOnTemplatePara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryTemplateSwitchPost(
    version: string,
    turnOnTemplatePara?: TurnOnTemplatePara,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryTemplateSwitchPost(version, turnOnTemplatePara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library\'s Id
   * @param {string} version
   * @param {string} [libraryId] 方案库ID Library\&#39;s Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryTemplatelistGet(
    version: string,
    libraryId?: string,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryTemplatelistGet(version, libraryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新方案库信息 Update library information
   * @param {string} version
   * @param {UpdateLibraryPara} [updateLibraryPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LibraryApi
   */
  public apiV2ScenarioManagerLibraryUpdatePost(
    version: string,
    updateLibraryPara?: UpdateLibraryPara,
    options?: AxiosRequestConfig,
  ) {
    return LibraryApiFp(this.configuration)
      .apiV2ScenarioManagerLibraryUpdatePost(version, updateLibraryPara, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
