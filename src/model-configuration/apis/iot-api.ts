/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { InitAssetInput } from '../models'
// @ts-ignore
import { InitDeviceInput } from '../models'
// @ts-ignore
import { InitIotOutput } from '../models'
// @ts-ignore
import { OnlineIndicatorInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * IotApi - axios parameter creator
 * @export
 */
export const IotApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取所有的设备以及对应的指标信息 Get all the devices and corresponding indicators
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotDeviceIndicatesGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/iot/device-indicates`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取设备下的所有指标项信息 Get all the indicator of a device
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotIndicatorsGet: async (
      deviceId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/iot/indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量添加资产信息，包括资产属性 Batch add assets, including asset attributes
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<InitAssetInput>} [initAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotInitAssetPost: async (
      initAssetInput?: Array<InitAssetInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/iot/init-asset`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initAssetInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量添加设备信息，包括设备属性、设备指标等 Batch add devices, including device attributes, indicators
     * @summary 批量添加设备信息 Batch add devices
     * @param {Array<InitDeviceInput>} [initDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotInitDevicePost: async (
      initDeviceInput?: Array<InitDeviceInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/iot/init-device`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initDeviceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IotApi - functional programming interface
 * @export
 */
export const IotApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IotApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取所有的设备以及对应的指标信息 Get all the devices and corresponding indicators
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationIotDeviceIndicatesGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineIndicatorInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationIotDeviceIndicatesGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取设备下的所有指标项信息 Get all the indicator of a device
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationIotIndicatorsGet(
      deviceId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnlineIndicatorInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationIotIndicatorsGet(deviceId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量添加资产信息，包括资产属性 Batch add assets, including asset attributes
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<InitAssetInput>} [initAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationIotInitAssetPost(
      initAssetInput?: Array<InitAssetInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InitIotOutput>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationIotInitAssetPost(
          initAssetInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量添加设备信息，包括设备属性、设备指标等 Batch add devices, including device attributes, indicators
     * @summary 批量添加设备信息 Batch add devices
     * @param {Array<InitDeviceInput>} [initDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationIotInitDevicePost(
      initDeviceInput?: Array<InitDeviceInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InitIotOutput>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationIotInitDevicePost(
          initDeviceInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IotApi - factory interface
 * @export
 */
export const IotApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IotApiFp(configuration)
  return {
    /**
     *
     * @summary 获取所有的设备以及对应的指标信息 Get all the devices and corresponding indicators
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotDeviceIndicatesGet(
      options?: any,
    ): AxiosPromise<Array<OnlineIndicatorInfo>> {
      return localVarFp
        .apiV1ModelConfigurationIotDeviceIndicatesGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取设备下的所有指标项信息 Get all the indicator of a device
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotIndicatorsGet(
      deviceId?: string,
      options?: any,
    ): AxiosPromise<OnlineIndicatorInfo> {
      return localVarFp
        .apiV1ModelConfigurationIotIndicatorsGet(deviceId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量添加资产信息，包括资产属性 Batch add assets, including asset attributes
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<InitAssetInput>} [initAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotInitAssetPost(
      initAssetInput?: Array<InitAssetInput>,
      options?: any,
    ): AxiosPromise<Array<InitIotOutput>> {
      return localVarFp
        .apiV1ModelConfigurationIotInitAssetPost(initAssetInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量添加设备信息，包括设备属性、设备指标等 Batch add devices, including device attributes, indicators
     * @summary 批量添加设备信息 Batch add devices
     * @param {Array<InitDeviceInput>} [initDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationIotInitDevicePost(
      initDeviceInput?: Array<InitDeviceInput>,
      options?: any,
    ): AxiosPromise<Array<InitIotOutput>> {
      return localVarFp
        .apiV1ModelConfigurationIotInitDevicePost(initDeviceInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IotApi - object-oriented interface
 * @export
 * @class IotApi
 * @extends {BaseAPI}
 */
export class IotApi extends BaseAPI {
  /**
   *
   * @summary 获取所有的设备以及对应的指标信息 Get all the devices and corresponding indicators
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof IotApi
   */
  public apiV1ModelConfigurationIotDeviceIndicatesGet(options?: AxiosRequestConfig) {
    return IotApiFp(this.configuration)
      .apiV1ModelConfigurationIotDeviceIndicatesGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取设备下的所有指标项信息 Get all the indicator of a device
   * @param {string} [deviceId] 设备ID device id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotApi
   */
  public apiV1ModelConfigurationIotIndicatorsGet(deviceId?: string, options?: AxiosRequestConfig) {
    return IotApiFp(this.configuration)
      .apiV1ModelConfigurationIotIndicatorsGet(deviceId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量添加资产信息，包括资产属性 Batch add assets, including asset attributes
   * @summary 批量添加资产信息 Batch add assets
   * @param {Array<InitAssetInput>} [initAssetInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotApi
   */
  public apiV1ModelConfigurationIotInitAssetPost(
    initAssetInput?: Array<InitAssetInput>,
    options?: AxiosRequestConfig,
  ) {
    return IotApiFp(this.configuration)
      .apiV1ModelConfigurationIotInitAssetPost(initAssetInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量添加设备信息，包括设备属性、设备指标等 Batch add devices, including device attributes, indicators
   * @summary 批量添加设备信息 Batch add devices
   * @param {Array<InitDeviceInput>} [initDeviceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotApi
   */
  public apiV1ModelConfigurationIotInitDevicePost(
    initDeviceInput?: Array<InitDeviceInput>,
    options?: AxiosRequestConfig,
  ) {
    return IotApiFp(this.configuration)
      .apiV1ModelConfigurationIotInitDevicePost(initDeviceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
