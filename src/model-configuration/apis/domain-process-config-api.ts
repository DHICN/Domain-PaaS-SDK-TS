/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDomainProcessConfigInput } from '../models'
// @ts-ignore
import { DomainProcessConfigInfo } from '../models'
// @ts-ignore
import { QueryDomainProcessConfigInput } from '../models'
/**
 * DomainProcessConfigApi - axios parameter creator
 * @export
 */
export const DomainProcessConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：      计算后处理、添加统计配置  使用场景：      根据项目需求，将需要统计的点位和相关算法保存到配置表中，计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 添加后处理统计配置
     * @param {AddDomainProcessConfigInput} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigAddPost: async (
      addDomainProcessConfigInput?: AddDomainProcessConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/domain-process-config/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDomainProcessConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      计算后处理、查询统计配置  使用场景：      计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 查询后处理统计配置
     * @param {QueryDomainProcessConfigInput} [queryDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigQueryPost: async (
      queryDomainProcessConfigInput?: QueryDomainProcessConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/domain-process-config/query`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryDomainProcessConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      计算后处理、删除统计配置  使用场景：      根据Id删除统计配置，可通过接口：/api/v1/model-configuration/domain-process-config/query先查询在删除，ids不能为空  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 根据Id移除统计配置
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigRemovePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/domain-process-config/remove`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会根据第一条的方案id，删除本方案下的所有配置，然后重新插入  关键词：      计算后处理、重新保存统计配置  使用场景：      根据传参中的第一条数据的方案id，删除该方案下的所有统计配置信息，然后将参数重新插入到配置表中参数中，参数TemplateId、OutputDataType、OutputCode不能同时重复  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 重新保存统计配置
     * @param {Array<AddDomainProcessConfigInput>} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigResavePost: async (
      addDomainProcessConfigInput?: Array<AddDomainProcessConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/domain-process-config/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDomainProcessConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DomainProcessConfigApi - functional programming interface
 * @export
 */
export const DomainProcessConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DomainProcessConfigApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：      计算后处理、添加统计配置  使用场景：      根据项目需求，将需要统计的点位和相关算法保存到配置表中，计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 添加后处理统计配置
     * @param {AddDomainProcessConfigInput} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationDomainProcessConfigAddPost(
      addDomainProcessConfigInput?: AddDomainProcessConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainProcessConfigInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationDomainProcessConfigAddPost(
          addDomainProcessConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      计算后处理、查询统计配置  使用场景：      计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 查询后处理统计配置
     * @param {QueryDomainProcessConfigInput} [queryDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationDomainProcessConfigQueryPost(
      queryDomainProcessConfigInput?: QueryDomainProcessConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainProcessConfigInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationDomainProcessConfigQueryPost(
          queryDomainProcessConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      计算后处理、删除统计配置  使用场景：      根据Id删除统计配置，可通过接口：/api/v1/model-configuration/domain-process-config/query先查询在删除，ids不能为空  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 根据Id移除统计配置
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationDomainProcessConfigRemovePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationDomainProcessConfigRemovePost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 会根据第一条的方案id，删除本方案下的所有配置，然后重新插入  关键词：      计算后处理、重新保存统计配置  使用场景：      根据传参中的第一条数据的方案id，删除该方案下的所有统计配置信息，然后将参数重新插入到配置表中参数中，参数TemplateId、OutputDataType、OutputCode不能同时重复  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 重新保存统计配置
     * @param {Array<AddDomainProcessConfigInput>} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationDomainProcessConfigResavePost(
      addDomainProcessConfigInput?: Array<AddDomainProcessConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationDomainProcessConfigResavePost(
          addDomainProcessConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DomainProcessConfigApi - factory interface
 * @export
 */
export const DomainProcessConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DomainProcessConfigApiFp(configuration)
  return {
    /**
     * 关键词：      计算后处理、添加统计配置  使用场景：      根据项目需求，将需要统计的点位和相关算法保存到配置表中，计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 添加后处理统计配置
     * @param {AddDomainProcessConfigInput} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigAddPost(
      addDomainProcessConfigInput?: AddDomainProcessConfigInput,
      options?: any,
    ): AxiosPromise<DomainProcessConfigInfo> {
      return localVarFp
        .apiV1ModelConfigurationDomainProcessConfigAddPost(addDomainProcessConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      计算后处理、查询统计配置  使用场景：      计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 查询后处理统计配置
     * @param {QueryDomainProcessConfigInput} [queryDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigQueryPost(
      queryDomainProcessConfigInput?: QueryDomainProcessConfigInput,
      options?: any,
    ): AxiosPromise<Array<DomainProcessConfigInfo>> {
      return localVarFp
        .apiV1ModelConfigurationDomainProcessConfigQueryPost(queryDomainProcessConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      计算后处理、删除统计配置  使用场景：      根据Id删除统计配置，可通过接口：/api/v1/model-configuration/domain-process-config/query先查询在删除，ids不能为空  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 根据Id移除统计配置
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigRemovePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelConfigurationDomainProcessConfigRemovePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会根据第一条的方案id，删除本方案下的所有配置，然后重新插入  关键词：      计算后处理、重新保存统计配置  使用场景：      根据传参中的第一条数据的方案id，删除该方案下的所有统计配置信息，然后将参数重新插入到配置表中参数中，参数TemplateId、OutputDataType、OutputCode不能同时重复  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
     * @summary 重新保存统计配置
     * @param {Array<AddDomainProcessConfigInput>} [addDomainProcessConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationDomainProcessConfigResavePost(
      addDomainProcessConfigInput?: Array<AddDomainProcessConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelConfigurationDomainProcessConfigResavePost(addDomainProcessConfigInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DomainProcessConfigApi - object-oriented interface
 * @export
 * @class DomainProcessConfigApi
 * @extends {BaseAPI}
 */
export class DomainProcessConfigApi extends BaseAPI {
  /**
   * 关键词：      计算后处理、添加统计配置  使用场景：      根据项目需求，将需要统计的点位和相关算法保存到配置表中，计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
   * @summary 添加后处理统计配置
   * @param {AddDomainProcessConfigInput} [addDomainProcessConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainProcessConfigApi
   */
  public apiV1ModelConfigurationDomainProcessConfigAddPost(
    addDomainProcessConfigInput?: AddDomainProcessConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return DomainProcessConfigApiFp(this.configuration)
      .apiV1ModelConfigurationDomainProcessConfigAddPost(addDomainProcessConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      计算后处理、查询统计配置  使用场景：      计算后处理脚本会读取配置中的点位和算法进行相关统计  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
   * @summary 查询后处理统计配置
   * @param {QueryDomainProcessConfigInput} [queryDomainProcessConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainProcessConfigApi
   */
  public apiV1ModelConfigurationDomainProcessConfigQueryPost(
    queryDomainProcessConfigInput?: QueryDomainProcessConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return DomainProcessConfigApiFp(this.configuration)
      .apiV1ModelConfigurationDomainProcessConfigQueryPost(queryDomainProcessConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      计算后处理、删除统计配置  使用场景：      根据Id删除统计配置，可通过接口：/api/v1/model-configuration/domain-process-config/query先查询在删除，ids不能为空  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
   * @summary 根据Id移除统计配置
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainProcessConfigApi
   */
  public apiV1ModelConfigurationDomainProcessConfigRemovePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DomainProcessConfigApiFp(this.configuration)
      .apiV1ModelConfigurationDomainProcessConfigRemovePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会根据第一条的方案id，删除本方案下的所有配置，然后重新插入  关键词：      计算后处理、重新保存统计配置  使用场景：      根据传参中的第一条数据的方案id，删除该方案下的所有统计配置信息，然后将参数重新插入到配置表中参数中，参数TemplateId、OutputDataType、OutputCode不能同时重复  相关背景：      需提前确认模型中对应的点位以及算法处理流程，并将算法整理成python语法
   * @summary 重新保存统计配置
   * @param {Array<AddDomainProcessConfigInput>} [addDomainProcessConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainProcessConfigApi
   */
  public apiV1ModelConfigurationDomainProcessConfigResavePost(
    addDomainProcessConfigInput?: Array<AddDomainProcessConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return DomainProcessConfigApiFp(this.configuration)
      .apiV1ModelConfigurationDomainProcessConfigResavePost(addDomainProcessConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
