/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base' // @ts-ignore
// @ts-ignore
import { CreateTemplateScenarioOutput } from '../models'
// @ts-ignore
import { TemplateScenarioLogOutput } from '../models'
// @ts-ignore
import { UpdateTemplateScenarioInput } from '../models'
// @ts-ignore
import { UpdateTemplateScenarioInputV4 } from '../models'
/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export const ScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 获取模板方案的配置进度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioConfigLogsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/model-configuration/scenario/config-logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {string} [modelVersion]
     * @param {boolean} [bCheckAndExportModelData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioCreateTemplateScenarioPost: async (
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      modelVersion?: string,
      bCheckAndExportModelData?: boolean,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/model-configuration/scenario/create-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateFileId !== undefined) {
        localVarQueryParameter['templateFileId'] = templateFileId
      }

      if (scenarioName !== undefined) {
        localVarQueryParameter['scenarioName'] = scenarioName
      }

      if (subType !== undefined) {
        localVarQueryParameter['subType'] = subType
      }

      if (modelVersion !== undefined) {
        localVarQueryParameter['modelVersion'] = modelVersion
      }

      if (bCheckAndExportModelData !== undefined) {
        localVarQueryParameter['bCheckAndExportModelData'] = bCheckAndExportModelData
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 根据模板方案ID获取模板方案的配置进度
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioScenarioConfigLogGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/model-configuration/scenario/scenario-config-log`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 更新模板方案的配置进度
     * @summary 更新模板方案的配置进度
     * @param {string} [scenarioId] 方案id
     * @param {string} [step] 初始化步骤的标识
     * @param {boolean} [bSuccess] 步骤是否完成
     * @param {string} [remark] 备注
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet: async (
      scenarioId?: string,
      step?: string,
      bSuccess?: boolean,
      remark?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/model-configuration/scenario/update-scenario-config-log`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (step !== undefined) {
        localVarQueryParameter['step'] = step
      }

      if (bSuccess !== undefined) {
        localVarQueryParameter['bSuccess'] = bSuccess
      }

      if (remark !== undefined) {
        localVarQueryParameter['remark'] = remark
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInput} [updateTemplateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost: async (
      updateTemplateScenarioInput?: UpdateTemplateScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/model-configuration/scenario/update-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTemplateScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId] 模板文件id
     * @param {string} [scenarioName] 方案名称
     * @param {string} [subType] 方案子类型
     * @param {string} [bCheckAndExportModelData] 是否导出模型信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV4ModelConfigurationScenarioCreateTemplateScenarioPost: async (
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      bCheckAndExportModelData?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/model-configuration/scenario/create-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateFileId !== undefined) {
        localVarQueryParameter['templateFileId'] = templateFileId
      }

      if (scenarioName !== undefined) {
        localVarQueryParameter['scenarioName'] = scenarioName
      }

      if (subType !== undefined) {
        localVarQueryParameter['subType'] = subType
      }

      if (bCheckAndExportModelData !== undefined) {
        localVarQueryParameter['bCheckAndExportModelData'] = bCheckAndExportModelData
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInputV4} [updateTemplateScenarioInputV4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost: async (
      updateTemplateScenarioInputV4?: UpdateTemplateScenarioInputV4,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v4/model-configuration/scenario/update-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTemplateScenarioInputV4,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 获取模板方案的配置进度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3ModelConfigurationScenarioConfigLogsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV3ModelConfigurationScenarioConfigLogsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {string} [modelVersion]
     * @param {boolean} [bCheckAndExportModelData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      modelVersion?: string,
      bCheckAndExportModelData?: boolean,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateScenarioOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          scenarioName,
          subType,
          modelVersion,
          bCheckAndExportModelData,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 根据模板方案ID获取模板方案的配置进度
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV3ModelConfigurationScenarioScenarioConfigLogGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 更新模板方案的配置进度
     * @summary 更新模板方案的配置进度
     * @param {string} [scenarioId] 方案id
     * @param {string} [step] 初始化步骤的标识
     * @param {boolean} [bSuccess] 步骤是否完成
     * @param {string} [remark] 备注
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
      scenarioId?: string,
      step?: string,
      bSuccess?: boolean,
      remark?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
          scenarioId,
          step,
          bSuccess,
          remark,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInput} [updateTemplateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
      updateTemplateScenarioInput?: UpdateTemplateScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
          updateTemplateScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId] 模板文件id
     * @param {string} [scenarioName] 方案名称
     * @param {string} [subType] 方案子类型
     * @param {string} [bCheckAndExportModelData] 是否导出模型信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      bCheckAndExportModelData?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateScenarioOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          scenarioName,
          subType,
          bCheckAndExportModelData,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInputV4} [updateTemplateScenarioInputV4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
      updateTemplateScenarioInputV4?: UpdateTemplateScenarioInputV4,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
          updateTemplateScenarioInputV4,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScenarioApi - factory interface
 * @export
 */
export const ScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScenarioApiFp(configuration)
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 获取模板方案的配置进度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioConfigLogsGet(
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV3ModelConfigurationScenarioConfigLogsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {string} [modelVersion]
     * @param {boolean} [bCheckAndExportModelData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      modelVersion?: string,
      bCheckAndExportModelData?: boolean,
      options?: any,
    ): AxiosPromise<CreateTemplateScenarioOutput> {
      return localVarFp
        .apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          scenarioName,
          subType,
          modelVersion,
          bCheckAndExportModelData,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
     * @summary 根据模板方案ID获取模板方案的配置进度
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV3ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 更新模板方案的配置进度
     * @summary 更新模板方案的配置进度
     * @param {string} [scenarioId] 方案id
     * @param {string} [step] 初始化步骤的标识
     * @param {boolean} [bSuccess] 步骤是否完成
     * @param {string} [remark] 备注
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
      scenarioId?: string,
      step?: string,
      bSuccess?: boolean,
      remark?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
          scenarioId,
          step,
          bSuccess,
          remark,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInput} [updateTemplateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
      updateTemplateScenarioInput?: UpdateTemplateScenarioInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
          updateTemplateScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息
     * @summary 创建模板方案，导出模型基本信息
     * @param {string} [templateFileId] 模板文件id
     * @param {string} [scenarioName] 方案名称
     * @param {string} [subType] 方案子类型
     * @param {string} [bCheckAndExportModelData] 是否导出模型信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      scenarioName?: string,
      subType?: string,
      bCheckAndExportModelData?: string,
      options?: any,
    ): AxiosPromise<CreateTemplateScenarioOutput> {
      return localVarFp
        .apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          scenarioName,
          subType,
          bCheckAndExportModelData,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 更新模板方案，如果勾选了导出，则进行异步导出
     * @summary 更新模板方案，更新模板方案的基本信息
     * @param {UpdateTemplateScenarioInputV4} [updateTemplateScenarioInputV4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
      updateTemplateScenarioInputV4?: UpdateTemplateScenarioInputV4,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
          updateTemplateScenarioInputV4,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
  /**
   * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
   * @summary 获取模板方案的配置进度
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV3ModelConfigurationScenarioConfigLogsGet(options?: AxiosRequestConfig) {
    return ScenarioApiFp(this.configuration)
      .apiV3ModelConfigurationScenarioConfigLogsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用
   * @summary 创建模板方案，导出模型基本信息
   * @param {string} [templateFileId]
   * @param {string} [scenarioName]
   * @param {string} [subType]
   * @param {string} [modelVersion]
   * @param {boolean} [bCheckAndExportModelData]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
    templateFileId?: string,
    scenarioName?: string,
    subType?: string,
    modelVersion?: string,
    bCheckAndExportModelData?: boolean,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV3ModelConfigurationScenarioCreateTemplateScenarioPost(
        templateFileId,
        scenarioName,
        subType,
        modelVersion,
        bCheckAndExportModelData,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用
   * @summary 根据模板方案ID获取模板方案的配置进度
   * @param {string} [scenarioId] scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV3ModelConfigurationScenarioScenarioConfigLogGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV3ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 更新模板方案的配置进度
   * @summary 更新模板方案的配置进度
   * @param {string} [scenarioId] 方案id
   * @param {string} [step] 初始化步骤的标识
   * @param {boolean} [bSuccess] 步骤是否完成
   * @param {string} [remark] 备注
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
    scenarioId?: string,
    step?: string,
    bSuccess?: boolean,
    remark?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV3ModelConfigurationScenarioUpdateScenarioConfigLogGet(
        scenarioId,
        step,
        bSuccess,
        remark,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 更新模板方案，如果勾选了导出，则进行异步导出
   * @summary 更新模板方案，更新模板方案的基本信息
   * @param {UpdateTemplateScenarioInput} [updateTemplateScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
    updateTemplateScenarioInput?: UpdateTemplateScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV3ModelConfigurationScenarioUpdateTemplateScenarioPost(
        updateTemplateScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 基于一个模板模型文件，创建模板方案，导出模型基本信息
   * @summary 创建模板方案，导出模型基本信息
   * @param {string} [templateFileId] 模板文件id
   * @param {string} [scenarioName] 方案名称
   * @param {string} [subType] 方案子类型
   * @param {string} [bCheckAndExportModelData] 是否导出模型信息
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
    templateFileId?: string,
    scenarioName?: string,
    subType?: string,
    bCheckAndExportModelData?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV4ModelConfigurationScenarioCreateTemplateScenarioPost(
        templateFileId,
        scenarioName,
        subType,
        bCheckAndExportModelData,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 更新模板方案，如果勾选了导出，则进行异步导出
   * @summary 更新模板方案，更新模板方案的基本信息
   * @param {UpdateTemplateScenarioInputV4} [updateTemplateScenarioInputV4]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
    updateTemplateScenarioInputV4?: UpdateTemplateScenarioInputV4,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV4ModelConfigurationScenarioUpdateTemplateScenarioPost(
        updateTemplateScenarioInputV4,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
