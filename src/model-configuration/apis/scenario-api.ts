/* tslint:disable */
/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CreateTemplateScenarioOutput } from '../models'
// @ts-ignore
import { InitLibraryInput } from '../models'
// @ts-ignore
import { LibraryInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { TemplateScenarioLogOutput } from '../models'
/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export const ScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioConfigLogsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/config-logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 基于一个模板模型文件，创建模板方案，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案 Create template scrnario
     * @param {string} [templateFileId] 模板模型文件ID model template file id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioCreateTemplateScenarioPost: async (
      templateFileId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/create-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateFileId !== undefined) {
        localVarQueryParameter['templateFileId'] = templateFileId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioEnableTemplateScenarioPost: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/enable-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost: async (
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/init-library-on-create_old`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initLibraryInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioInitLibraryOnCreatePost: async (
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/init-library-on-create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        libraryInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioScenarioConfigLogGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/scenario/scenario-config-log`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioConfigLogsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/config-logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, export model info, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案，导出模型基本信息 Create template scrnario, meanwhile export model info
     * @param {string} [templateFileId]
     * @param {string} [systemId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioCreateTemplateScenarioPost: async (
      templateFileId?: string,
      systemId?: string,
      scenarioName?: string,
      subType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/create-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateFileId !== undefined) {
        localVarQueryParameter['templateFileId'] = templateFileId
      }

      if (systemId !== undefined) {
        localVarQueryParameter['systemId'] = systemId
      }

      if (scenarioName !== undefined) {
        localVarQueryParameter['scenarioName'] = scenarioName
      }

      if (subType !== undefined) {
        localVarQueryParameter['subType'] = subType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioEnableTemplateScenarioPost: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/enable-template-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost: async (
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/init-library-on-create_old`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initLibraryInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v2/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioInitLibraryOnCreatePost: async (
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/init-library-on-create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        libraryInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioScenarioConfigLogGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/model-configuration/scenario/scenario-config-log`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioConfigLogsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioConfigLogsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 基于一个模板模型文件，创建模板方案，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案 Create template scrnario
     * @param {string} [templateFileId] 模板模型文件ID model template file id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateScenarioOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LibraryInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
          tenantId,
          initLibraryInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LibraryInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(
          tenantId,
          libraryInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationScenarioScenarioConfigLogGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioConfigLogsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioConfigLogsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, export model info, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案，导出模型基本信息 Create template scrnario, meanwhile export model info
     * @param {string} [templateFileId]
     * @param {string} [systemId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      systemId?: string,
      scenarioName?: string,
      subType?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTemplateScenarioOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          systemId,
          scenarioName,
          subType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LibraryInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
          tenantId,
          initLibraryInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v2/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LibraryInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(
          tenantId,
          libraryInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateScenarioLogOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ModelConfigurationScenarioScenarioConfigLogGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScenarioApi - factory interface
 * @export
 */
export const ScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScenarioApiFp(configuration)
  return {
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioConfigLogsGet(
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV1ModelConfigurationScenarioConfigLogsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 基于一个模板模型文件，创建模板方案，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案 Create template scrnario
     * @param {string} [templateFileId] 模板模型文件ID model template file id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      options?: any,
    ): AxiosPromise<CreateTemplateScenarioOutput> {
      return localVarFp
        .apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(templateFileId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options?: any,
    ): AxiosPromise<Array<LibraryInfo>> {
      return localVarFp
        .apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
          tenantId,
          initLibraryInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options?: any,
    ): AxiosPromise<Array<LibraryInfo>> {
      return localVarFp
        .apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(tenantId, libraryInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV1ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
     * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioConfigLogsGet(
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV2ModelConfigurationScenarioConfigLogsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, export model info, meanwhile disable all the old template scenarios of the same library.
     * @summary 创建模板方案，导出模型基本信息 Create template scrnario, meanwhile export model info
     * @param {string} [templateFileId]
     * @param {string} [systemId]
     * @param {string} [scenarioName]
     * @param {string} [subType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
      templateFileId?: string,
      systemId?: string,
      scenarioName?: string,
      subType?: string,
      options?: any,
    ): AxiosPromise<CreateTemplateScenarioOutput> {
      return localVarFp
        .apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
          templateFileId,
          systemId,
          scenarioName,
          subType,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
     * @summary 启用历史模板方案 Enable template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Init library on create
     * @param {string} [tenantId]
     * @param {InitLibraryInput} [initLibraryInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
      tenantId?: string,
      initLibraryInput?: InitLibraryInput,
      options?: any,
    ): AxiosPromise<Array<LibraryInfo>> {
      return localVarFp
        .apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
          tenantId,
          initLibraryInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v2/model-configuration/scenario/init-library-on-create
     * @param {string} [tenantId]
     * @param {Array<LibraryInfo>} [libraryInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(
      tenantId?: string,
      libraryInfo?: Array<LibraryInfo>,
      options?: any,
    ): AxiosPromise<Array<LibraryInfo>> {
      return localVarFp
        .apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(tenantId, libraryInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
     * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
     * @param {string} [scenarioId] scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ModelConfigurationScenarioScenarioConfigLogGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<TemplateScenarioLogOutput>> {
      return localVarFp
        .apiV2ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
  /**
   * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
   * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioConfigLogsGet(options?: AxiosRequestConfig) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioConfigLogsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 基于一个模板模型文件，创建模板方案，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, meanwhile disable all the old template scenarios of the same library.
   * @summary 创建模板方案 Create template scrnario
   * @param {string} [templateFileId] 模板模型文件ID model template file id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(
    templateFileId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioCreateTemplateScenarioPost(templateFileId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
   * @summary 启用历史模板方案 Enable template scenario
   * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioEnableTemplateScenarioPost(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Init library on create
   * @param {string} [tenantId]
   * @param {InitLibraryInput} [initLibraryInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
    tenantId?: string,
    initLibraryInput?: InitLibraryInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioInitLibraryOnCreateOldPost(
        tenantId,
        initLibraryInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/model-configuration/scenario/init-library-on-create
   * @param {string} [tenantId]
   * @param {Array<LibraryInfo>} [libraryInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(
    tenantId?: string,
    libraryInfo?: Array<LibraryInfo>,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioInitLibraryOnCreatePost(tenantId, libraryInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
   * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
   * @param {string} [scenarioId] scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ModelConfigurationScenarioScenarioConfigLogGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取各个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get all the template scenarios\' configuration progress information, necessary steps must be finished before the template scenario can be enabled.
   * @summary 获取模板方案的配置进度 Get template scenario\'s configuration progress
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioConfigLogsGet(options?: AxiosRequestConfig) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioConfigLogsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 基于一个模板模型文件，创建模板方案，导出模型基本信息，同时会把相同库下面的其他模板方案禁用 Based on a template file to create a new template scenario, export model info, meanwhile disable all the old template scenarios of the same library.
   * @summary 创建模板方案，导出模型基本信息 Create template scrnario, meanwhile export model info
   * @param {string} [templateFileId]
   * @param {string} [systemId]
   * @param {string} [scenarioName]
   * @param {string} [subType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
    templateFileId?: string,
    systemId?: string,
    scenarioName?: string,
    subType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioCreateTemplateScenarioPost(
        templateFileId,
        systemId,
        scenarioName,
        subType,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 启用一个历史的模板方案，同时禁用同一个库下的其他模板方案，只有完成了必要的配置流程的模板方案才能被启用 Turn on a history template scenario to be active, meanwhile disable all the other template scenarios of the same library.  Only a template scenario which has finished all the necessary initialization steps can be activated.
   * @summary 启用历史模板方案 Enable template scenario
   * @param {string} [scenarioId] 模板方案ID template scenario\&#39;s id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioEnableTemplateScenarioPost(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Init library on create
   * @param {string} [tenantId]
   * @param {InitLibraryInput} [initLibraryInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
    tenantId?: string,
    initLibraryInput?: InitLibraryInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioInitLibraryOnCreateOldPost(
        tenantId,
        initLibraryInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v2/model-configuration/scenario/init-library-on-create
   * @param {string} [tenantId]
   * @param {Array<LibraryInfo>} [libraryInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(
    tenantId?: string,
    libraryInfo?: Array<LibraryInfo>,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioInitLibraryOnCreatePost(tenantId, libraryInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个模板方案的配置进度，必要步骤必须完成配置之后模板方案才能启用 Get template scenario\'s configuration progress information by scenario id, necessary steps must be finished before the template scenario can be enabled.
   * @summary 根据模板方案ID获取模板方案的配置进度 Get template scenario\'s configuration progress by scenario id
   * @param {string} [scenarioId] scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV2ModelConfigurationScenarioScenarioConfigLogGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV2ModelConfigurationScenarioScenarioConfigLogGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
