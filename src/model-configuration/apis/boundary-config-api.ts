/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BoundaryConfigDetailOutput } from '../models'
// @ts-ignore
import { QueryBoundaryConfigListOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateBoundaryConfigInput } from '../models'
/**
 * BoundaryConfigApi - axios parameter creator
 * @export
 */
export const BoundaryConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取模板方案下所有的边界配置详细信息列表 Get all boundary config details for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/boundary-config/boundary-detail-list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取模板方案下所有的边界配置信息列表 Get all boundary configs for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigListGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/boundary-config/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新边界配置信息 Update boundary configs
     * @param {Array<UpdateBoundaryConfigInput>} [updateBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigUpdatePut: async (
      updateBoundaryConfigInput?: Array<UpdateBoundaryConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/boundary-config/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBoundaryConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * BoundaryConfigApi - functional programming interface
 * @export
 */
export const BoundaryConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BoundaryConfigApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取模板方案下所有的边界配置详细信息列表 Get all boundary config details for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BoundaryConfigDetailOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取模板方案下所有的边界配置信息列表 Get all boundary configs for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationBoundaryConfigListGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<QueryBoundaryConfigListOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationBoundaryConfigListGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新边界配置信息 Update boundary configs
     * @param {Array<UpdateBoundaryConfigInput>} [updateBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationBoundaryConfigUpdatePut(
      updateBoundaryConfigInput?: Array<UpdateBoundaryConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationBoundaryConfigUpdatePut(
          updateBoundaryConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * BoundaryConfigApi - factory interface
 * @export
 */
export const BoundaryConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BoundaryConfigApiFp(configuration)
  return {
    /**
     *
     * @summary 获取模板方案下所有的边界配置详细信息列表 Get all boundary config details for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<BoundaryConfigDetailOutput>> {
      return localVarFp
        .apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取模板方案下所有的边界配置信息列表 Get all boundary configs for a template scenario
     * @param {string} [scenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigListGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<QueryBoundaryConfigListOutput>> {
      return localVarFp
        .apiV1ModelConfigurationBoundaryConfigListGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新边界配置信息 Update boundary configs
     * @param {Array<UpdateBoundaryConfigInput>} [updateBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationBoundaryConfigUpdatePut(
      updateBoundaryConfigInput?: Array<UpdateBoundaryConfigInput>,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV1ModelConfigurationBoundaryConfigUpdatePut(updateBoundaryConfigInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * BoundaryConfigApi - object-oriented interface
 * @export
 * @class BoundaryConfigApi
 * @extends {BaseAPI}
 */
export class BoundaryConfigApi extends BaseAPI {
  /**
   *
   * @summary 获取模板方案下所有的边界配置详细信息列表 Get all boundary config details for a template scenario
   * @param {string} [scenarioId] 模板方案ID template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BoundaryConfigApi
   */
  public apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return BoundaryConfigApiFp(this.configuration)
      .apiV1ModelConfigurationBoundaryConfigBoundaryDetailListGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取模板方案下所有的边界配置信息列表 Get all boundary configs for a template scenario
   * @param {string} [scenarioId] 模板方案ID template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BoundaryConfigApi
   */
  public apiV1ModelConfigurationBoundaryConfigListGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return BoundaryConfigApiFp(this.configuration)
      .apiV1ModelConfigurationBoundaryConfigListGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新边界配置信息 Update boundary configs
   * @param {Array<UpdateBoundaryConfigInput>} [updateBoundaryConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BoundaryConfigApi
   */
  public apiV1ModelConfigurationBoundaryConfigUpdatePut(
    updateBoundaryConfigInput?: Array<UpdateBoundaryConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return BoundaryConfigApiFp(this.configuration)
      .apiV1ModelConfigurationBoundaryConfigUpdatePut(updateBoundaryConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
