/* eslint-disable */
/**
 * 模型配置服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ModelSchedulePolicy } from '../models'
// @ts-ignore
import { ModelSchedulePolicyInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * SchedulePolicyApi - axios parameter creator
 * @export
 */
export const SchedulePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 在一个模板方案下添加一条新的调度策略，包括最小降雨量，以及对应泵、阀、闸等的调度规则，返回策略ID Add a new schedule policy for a certain template scenario, including information like minimum rainfall, control parameters of pumps, valves, gates, etc., policy id will be returned.
     * @summary 添加一条调度策略 Add a schedule policy
     * @param {ModelSchedulePolicyInput} [modelSchedulePolicyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyAddPost: async (
      modelSchedulePolicyInput?: ModelSchedulePolicyInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/strategy/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelSchedulePolicyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据模板方案ID，获取其下所有的调度策略列表 Get all the schedule policy list by the template scenario id.
     * @summary 获取调度策略列表 Get schedule policy list
     * @param {string} scenarioId 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyListGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ModelConfigurationStrategyListGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/model-configuration/strategy/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据策略ID删除相应的调度策略 Delete a schedule policy by id
     * @summary 删除一条调度策略 Delete a schedule policy
     * @param {string} scenarioId 方案Id
     * @param {string} id 调度策略ID schedule policy id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyRemoveGet: async (
      scenarioId: string,
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1ModelConfigurationStrategyRemoveGet', 'scenarioId', scenarioId)
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiV1ModelConfigurationStrategyRemoveGet', 'id', id)
      const localVarPath = `/api/v1/model-configuration/strategy/remove`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据调度策略ID，更新调度策略，如果调度策略不存在，则返回失败 Update a schedule policy, if the schedule policy cannot be found, a failure will be returned.
     * @summary 更新一个调度策略 Update a schedule policy
     * @param {ModelSchedulePolicy} [modelSchedulePolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyUpdatePut: async (
      modelSchedulePolicy?: ModelSchedulePolicy,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-configuration/strategy/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelSchedulePolicy,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SchedulePolicyApi - functional programming interface
 * @export
 */
export const SchedulePolicyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SchedulePolicyApiAxiosParamCreator(configuration)
  return {
    /**
     * 在一个模板方案下添加一条新的调度策略，包括最小降雨量，以及对应泵、阀、闸等的调度规则，返回策略ID Add a new schedule policy for a certain template scenario, including information like minimum rainfall, control parameters of pumps, valves, gates, etc., policy id will be returned.
     * @summary 添加一条调度策略 Add a schedule policy
     * @param {ModelSchedulePolicyInput} [modelSchedulePolicyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationStrategyAddPost(
      modelSchedulePolicyInput?: ModelSchedulePolicyInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationStrategyAddPost(
          modelSchedulePolicyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据模板方案ID，获取其下所有的调度策略列表 Get all the schedule policy list by the template scenario id.
     * @summary 获取调度策略列表 Get schedule policy list
     * @param {string} scenarioId 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationStrategyListGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelSchedulePolicy>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationStrategyListGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据策略ID删除相应的调度策略 Delete a schedule policy by id
     * @summary 删除一条调度策略 Delete a schedule policy
     * @param {string} scenarioId 方案Id
     * @param {string} id 调度策略ID schedule policy id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationStrategyRemoveGet(
      scenarioId: string,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationStrategyRemoveGet(
          scenarioId,
          id,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据调度策略ID，更新调度策略，如果调度策略不存在，则返回失败 Update a schedule policy, if the schedule policy cannot be found, a failure will be returned.
     * @summary 更新一个调度策略 Update a schedule policy
     * @param {ModelSchedulePolicy} [modelSchedulePolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelConfigurationStrategyUpdatePut(
      modelSchedulePolicy?: ModelSchedulePolicy,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelConfigurationStrategyUpdatePut(
          modelSchedulePolicy,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * SchedulePolicyApi - factory interface
 * @export
 */
export const SchedulePolicyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SchedulePolicyApiFp(configuration)
  return {
    /**
     * 在一个模板方案下添加一条新的调度策略，包括最小降雨量，以及对应泵、阀、闸等的调度规则，返回策略ID Add a new schedule policy for a certain template scenario, including information like minimum rainfall, control parameters of pumps, valves, gates, etc., policy id will be returned.
     * @summary 添加一条调度策略 Add a schedule policy
     * @param {ModelSchedulePolicyInput} [modelSchedulePolicyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyAddPost(
      modelSchedulePolicyInput?: ModelSchedulePolicyInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1ModelConfigurationStrategyAddPost(modelSchedulePolicyInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据模板方案ID，获取其下所有的调度策略列表 Get all the schedule policy list by the template scenario id.
     * @summary 获取调度策略列表 Get schedule policy list
     * @param {string} scenarioId 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyListGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<ModelSchedulePolicy>> {
      return localVarFp
        .apiV1ModelConfigurationStrategyListGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据策略ID删除相应的调度策略 Delete a schedule policy by id
     * @summary 删除一条调度策略 Delete a schedule policy
     * @param {string} scenarioId 方案Id
     * @param {string} id 调度策略ID schedule policy id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyRemoveGet(
      scenarioId: string,
      id: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelConfigurationStrategyRemoveGet(scenarioId, id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据调度策略ID，更新调度策略，如果调度策略不存在，则返回失败 Update a schedule policy, if the schedule policy cannot be found, a failure will be returned.
     * @summary 更新一个调度策略 Update a schedule policy
     * @param {ModelSchedulePolicy} [modelSchedulePolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelConfigurationStrategyUpdatePut(
      modelSchedulePolicy?: ModelSchedulePolicy,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelConfigurationStrategyUpdatePut(modelSchedulePolicy, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SchedulePolicyApi - object-oriented interface
 * @export
 * @class SchedulePolicyApi
 * @extends {BaseAPI}
 */
export class SchedulePolicyApi extends BaseAPI {
  /**
   * 在一个模板方案下添加一条新的调度策略，包括最小降雨量，以及对应泵、阀、闸等的调度规则，返回策略ID Add a new schedule policy for a certain template scenario, including information like minimum rainfall, control parameters of pumps, valves, gates, etc., policy id will be returned.
   * @summary 添加一条调度策略 Add a schedule policy
   * @param {ModelSchedulePolicyInput} [modelSchedulePolicyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchedulePolicyApi
   */
  public apiV1ModelConfigurationStrategyAddPost(
    modelSchedulePolicyInput?: ModelSchedulePolicyInput,
    options?: AxiosRequestConfig,
  ) {
    return SchedulePolicyApiFp(this.configuration)
      .apiV1ModelConfigurationStrategyAddPost(modelSchedulePolicyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据模板方案ID，获取其下所有的调度策略列表 Get all the schedule policy list by the template scenario id.
   * @summary 获取调度策略列表 Get schedule policy list
   * @param {string} scenarioId 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchedulePolicyApi
   */
  public apiV1ModelConfigurationStrategyListGet(scenarioId: string, options?: AxiosRequestConfig) {
    return SchedulePolicyApiFp(this.configuration)
      .apiV1ModelConfigurationStrategyListGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据策略ID删除相应的调度策略 Delete a schedule policy by id
   * @summary 删除一条调度策略 Delete a schedule policy
   * @param {string} scenarioId 方案Id
   * @param {string} id 调度策略ID schedule policy id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchedulePolicyApi
   */
  public apiV1ModelConfigurationStrategyRemoveGet(
    scenarioId: string,
    id: string,
    options?: AxiosRequestConfig,
  ) {
    return SchedulePolicyApiFp(this.configuration)
      .apiV1ModelConfigurationStrategyRemoveGet(scenarioId, id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据调度策略ID，更新调度策略，如果调度策略不存在，则返回失败 Update a schedule policy, if the schedule policy cannot be found, a failure will be returned.
   * @summary 更新一个调度策略 Update a schedule policy
   * @param {ModelSchedulePolicy} [modelSchedulePolicy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SchedulePolicyApi
   */
  public apiV1ModelConfigurationStrategyUpdatePut(
    modelSchedulePolicy?: ModelSchedulePolicy,
    options?: AxiosRequestConfig,
  ) {
    return SchedulePolicyApiFp(this.configuration)
      .apiV1ModelConfigurationStrategyUpdatePut(modelSchedulePolicy, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
