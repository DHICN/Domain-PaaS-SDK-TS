// tslint:disable
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddAlgorithmSidecarInput } from '../models';
// @ts-ignore
import { DeleteAlgorithmSidecarInput } from '../models';
// @ts-ignore
import { DeployMachineOutput } from '../models';
// @ts-ignore
import { QueryAlgorithmByCodeOutput } from '../models';
// @ts-ignore
import { QueryAlgorithmByCodeOutputPage } from '../models';
// @ts-ignore
import { QueryAlgorithmByConInput } from '../models';
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models';
/**
 * ScriptApi - axios parameter creator
 * @export
 */
export const ScriptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除Python脚本边车
         * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteAlgorithmPost: async (deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/delete/algorithm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteAlgorithmSidecarInput !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteAlgorithmSidecarInput !== undefined ? deleteAlgorithmSidecarInput : {}) : (deleteAlgorithmSidecarInput || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取算法目标部署机器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetAlgorithmTargetDeployMachineGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/get/algorithm/target/deploy/machine`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过脚本code查询脚本详细信息
         * @param {string} [algorithmCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryAlgorithmByCodeGet: async (algorithmCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/query/algorithm/by/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (algorithmCode !== undefined) {
                localVarQueryParameter['algorithmCode'] = algorithmCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询脚本信息
         * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryAlgorithmListByConPost: async (queryAlgorithmByConInput?: QueryAlgorithmByConInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/query/algorithm/list/by/con`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof queryAlgorithmByConInput !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(queryAlgorithmByConInput !== undefined ? queryAlgorithmByConInput : {}) : (queryAlgorithmByConInput || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 运行Python脚本
         * @param {string} algorithmCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RunAlgorithmGet: async (algorithmCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'algorithmCode' is not null or undefined
            if (algorithmCode === null || algorithmCode === undefined) {
                throw new RequiredError('algorithmCode','Required parameter algorithmCode was null or undefined when calling apiV1RunAlgorithmGet.');
            }
            const localVarPath = `/api/v1/run/algorithm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (algorithmCode !== undefined) {
                localVarQueryParameter['AlgorithmCode'] = algorithmCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存Python脚本边车
         * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SaveAlgorithmPost: async (addAlgorithmSidecarInput?: AddAlgorithmSidecarInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/save/algorithm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addAlgorithmSidecarInput !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addAlgorithmSidecarInput !== undefined ? addAlgorithmSidecarInput : {}) : (addAlgorithmSidecarInput || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScriptApi - functional programming interface
 * @export
 */
export const ScriptApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除Python脚本边车
         * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取算法目标部署机器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GetAlgorithmTargetDeployMachineGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployMachineOutput>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1GetAlgorithmTargetDeployMachineGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 通过脚本code查询脚本详细信息
         * @param {string} [algorithmCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1QueryAlgorithmByCodeGet(algorithmCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAlgorithmByCodeOutput>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1QueryAlgorithmByCodeGet(algorithmCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询脚本信息
         * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput?: QueryAlgorithmByConInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAlgorithmByCodeOutputPage>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 运行Python脚本
         * @param {string} algorithmCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RunAlgorithmGet(algorithmCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1RunAlgorithmGet(algorithmCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 保存Python脚本边车
         * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SaveAlgorithmPost(addAlgorithmSidecarInput?: AddAlgorithmSidecarInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ScriptApiAxiosParamCreator(configuration).apiV1SaveAlgorithmPost(addAlgorithmSidecarInput, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScriptApi - factory interface
 * @export
 */
export const ScriptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 删除Python脚本边车
         * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput, options?: any): AxiosPromise<object> {
            return ScriptApiFp(configuration).apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取算法目标部署机器
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GetAlgorithmTargetDeployMachineGet(options?: any): AxiosPromise<DeployMachineOutput> {
            return ScriptApiFp(configuration).apiV1GetAlgorithmTargetDeployMachineGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过脚本code查询脚本详细信息
         * @param {string} [algorithmCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryAlgorithmByCodeGet(algorithmCode?: string, options?: any): AxiosPromise<QueryAlgorithmByCodeOutput> {
            return ScriptApiFp(configuration).apiV1QueryAlgorithmByCodeGet(algorithmCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询脚本信息
         * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput?: QueryAlgorithmByConInput, options?: any): AxiosPromise<QueryAlgorithmByCodeOutputPage> {
            return ScriptApiFp(configuration).apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 运行Python脚本
         * @param {string} algorithmCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RunAlgorithmGet(algorithmCode: string, options?: any): AxiosPromise<void> {
            return ScriptApiFp(configuration).apiV1RunAlgorithmGet(algorithmCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存Python脚本边车
         * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SaveAlgorithmPost(addAlgorithmSidecarInput?: AddAlgorithmSidecarInput, options?: any): AxiosPromise<object> {
            return ScriptApiFp(configuration).apiV1SaveAlgorithmPost(addAlgorithmSidecarInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScriptApi - object-oriented interface
 * @export
 * @class ScriptApi
 * @extends {BaseAPI}
 */
export class ScriptApi extends BaseAPI {
    /**
     * 
     * @summary 删除Python脚本边车
     * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput, options?: any) {
        return ScriptApiFp(this.configuration).apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取算法目标部署机器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1GetAlgorithmTargetDeployMachineGet(options?: any) {
        return ScriptApiFp(this.configuration).apiV1GetAlgorithmTargetDeployMachineGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过脚本code查询脚本详细信息
     * @param {string} [algorithmCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1QueryAlgorithmByCodeGet(algorithmCode?: string, options?: any) {
        return ScriptApiFp(this.configuration).apiV1QueryAlgorithmByCodeGet(algorithmCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询脚本信息
     * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput?: QueryAlgorithmByConInput, options?: any) {
        return ScriptApiFp(this.configuration).apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 运行Python脚本
     * @param {string} algorithmCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1RunAlgorithmGet(algorithmCode: string, options?: any) {
        return ScriptApiFp(this.configuration).apiV1RunAlgorithmGet(algorithmCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存Python脚本边车
     * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScriptApi
     */
    public apiV1SaveAlgorithmPost(addAlgorithmSidecarInput?: AddAlgorithmSidecarInput, options?: any) {
        return ScriptApiFp(this.configuration).apiV1SaveAlgorithmPost(addAlgorithmSidecarInput, options).then((request) => request(this.axios, this.basePath));
    }

}
