/* eslint-disable */
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddAlgorithmSidecarInput } from '../models'
// @ts-ignore
import { DeleteAlgorithmSidecarInput } from '../models'
// @ts-ignore
import { DeployMachineOutput } from '../models'
// @ts-ignore
import { QueryAlgorithmByCodeOutput } from '../models'
// @ts-ignore
import { QueryAlgorithmByCodeOutputPage } from '../models'
// @ts-ignore
import { QueryAlgorithmByConInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * ScriptApi - axios parameter creator
 * @export
 */
export const ScriptApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 删除Python脚本边车
     * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteAlgorithmPost: async (
      deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteAlgorithmSidecarInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 停用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DisableAlgorithmGet: async (
      algorithmCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/disable/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 启用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1EnableAlgorithmGet: async (
      algorithmCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/enable/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取脚本运行日志
     * @param {string} [algorithmCode]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmLogGet: async (
      algorithmCode?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get/algorithm/log`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取算法目标部署机器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmTargetDeployMachineGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get/algorithm/target/deploy/machine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取脚本模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmTemplateGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get/algorithm/template`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过脚本code查询脚本详细信息
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryAlgorithmByCodeGet: async (
      algorithmCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/query/algorithm/by/code`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 分页查询脚本信息
     * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryAlgorithmListByConPost: async (
      queryAlgorithmByConInput?: QueryAlgorithmByConInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/query/algorithm/list/by/con`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryAlgorithmByConInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 运行Python脚本
     * @param {string} [algorithmCode]
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RunAlgorithmPost: async (
      algorithmCode?: string,
      requestBody?: { [key: string]: string },
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/run/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存Python脚本边车
     * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SaveAlgorithmPost: async (
      addAlgorithmSidecarInput?: AddAlgorithmSidecarInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/save/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addAlgorithmSidecarInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScriptApi - functional programming interface
 * @export
 */
export const ScriptApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScriptApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 删除Python脚本边车
     * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteAlgorithmPost(
      deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteAlgorithmPost(
        deleteAlgorithmSidecarInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 停用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DisableAlgorithmGet(
      algorithmCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DisableAlgorithmGet(
        algorithmCode,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 启用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1EnableAlgorithmGet(
      algorithmCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EnableAlgorithmGet(
        algorithmCode,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取脚本运行日志
     * @param {string} [algorithmCode]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetAlgorithmLogGet(
      algorithmCode?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetAlgorithmLogGet(
        algorithmCode,
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取算法目标部署机器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetAlgorithmTargetDeployMachineGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployMachineOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1GetAlgorithmTargetDeployMachineGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取脚本模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetAlgorithmTemplateGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetAlgorithmTemplateGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过脚本code查询脚本详细信息
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QueryAlgorithmByCodeGet(
      algorithmCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAlgorithmByCodeOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1QueryAlgorithmByCodeGet(
        algorithmCode,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 分页查询脚本信息
     * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QueryAlgorithmListByConPost(
      queryAlgorithmByConInput?: QueryAlgorithmByConInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAlgorithmByCodeOutputPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1QueryAlgorithmListByConPost(
        queryAlgorithmByConInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 运行Python脚本
     * @param {string} [algorithmCode]
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RunAlgorithmPost(
      algorithmCode?: string,
      requestBody?: { [key: string]: string },
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RunAlgorithmPost(
        algorithmCode,
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存Python脚本边车
     * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SaveAlgorithmPost(
      addAlgorithmSidecarInput?: AddAlgorithmSidecarInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SaveAlgorithmPost(
        addAlgorithmSidecarInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScriptApi - factory interface
 * @export
 */
export const ScriptApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScriptApiFp(configuration)
  return {
    /**
     *
     * @summary 删除Python脚本边车
     * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteAlgorithmPost(
      deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 停用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DisableAlgorithmGet(algorithmCode?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1DisableAlgorithmGet(algorithmCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 启用脚本
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1EnableAlgorithmGet(algorithmCode?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1EnableAlgorithmGet(algorithmCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取脚本运行日志
     * @param {string} [algorithmCode]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmLogGet(
      algorithmCode?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1GetAlgorithmLogGet(algorithmCode, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取算法目标部署机器
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmTargetDeployMachineGet(options?: any): AxiosPromise<DeployMachineOutput> {
      return localVarFp
        .apiV1GetAlgorithmTargetDeployMachineGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取脚本模板
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetAlgorithmTemplateGet(options?: any): AxiosPromise<void> {
      return localVarFp
        .apiV1GetAlgorithmTemplateGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过脚本code查询脚本详细信息
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryAlgorithmByCodeGet(
      algorithmCode?: string,
      options?: any,
    ): AxiosPromise<QueryAlgorithmByCodeOutput> {
      return localVarFp
        .apiV1QueryAlgorithmByCodeGet(algorithmCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 分页查询脚本信息
     * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryAlgorithmListByConPost(
      queryAlgorithmByConInput?: QueryAlgorithmByConInput,
      options?: any,
    ): AxiosPromise<QueryAlgorithmByCodeOutputPage> {
      return localVarFp
        .apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 运行Python脚本
     * @param {string} [algorithmCode]
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RunAlgorithmPost(
      algorithmCode?: string,
      requestBody?: { [key: string]: string },
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1RunAlgorithmPost(algorithmCode, requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存Python脚本边车
     * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SaveAlgorithmPost(
      addAlgorithmSidecarInput?: AddAlgorithmSidecarInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1SaveAlgorithmPost(addAlgorithmSidecarInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScriptApi - object-oriented interface
 * @export
 * @class ScriptApi
 * @extends {BaseAPI}
 */
export class ScriptApi extends BaseAPI {
  /**
   *
   * @summary 删除Python脚本边车
   * @param {DeleteAlgorithmSidecarInput} [deleteAlgorithmSidecarInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1DeleteAlgorithmPost(
    deleteAlgorithmSidecarInput?: DeleteAlgorithmSidecarInput,
    options?: AxiosRequestConfig,
  ) {
    return ScriptApiFp(this.configuration)
      .apiV1DeleteAlgorithmPost(deleteAlgorithmSidecarInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 停用脚本
   * @param {string} [algorithmCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1DisableAlgorithmGet(algorithmCode?: string, options?: AxiosRequestConfig) {
    return ScriptApiFp(this.configuration)
      .apiV1DisableAlgorithmGet(algorithmCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 启用脚本
   * @param {string} [algorithmCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1EnableAlgorithmGet(algorithmCode?: string, options?: AxiosRequestConfig) {
    return ScriptApiFp(this.configuration)
      .apiV1EnableAlgorithmGet(algorithmCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取脚本运行日志
   * @param {string} [algorithmCode]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1GetAlgorithmLogGet(
    algorithmCode?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScriptApiFp(this.configuration)
      .apiV1GetAlgorithmLogGet(algorithmCode, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取算法目标部署机器
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1GetAlgorithmTargetDeployMachineGet(options?: AxiosRequestConfig) {
    return ScriptApiFp(this.configuration)
      .apiV1GetAlgorithmTargetDeployMachineGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取脚本模板
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1GetAlgorithmTemplateGet(options?: AxiosRequestConfig) {
    return ScriptApiFp(this.configuration)
      .apiV1GetAlgorithmTemplateGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过脚本code查询脚本详细信息
   * @param {string} [algorithmCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1QueryAlgorithmByCodeGet(algorithmCode?: string, options?: AxiosRequestConfig) {
    return ScriptApiFp(this.configuration)
      .apiV1QueryAlgorithmByCodeGet(algorithmCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 分页查询脚本信息
   * @param {QueryAlgorithmByConInput} [queryAlgorithmByConInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1QueryAlgorithmListByConPost(
    queryAlgorithmByConInput?: QueryAlgorithmByConInput,
    options?: AxiosRequestConfig,
  ) {
    return ScriptApiFp(this.configuration)
      .apiV1QueryAlgorithmListByConPost(queryAlgorithmByConInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 运行Python脚本
   * @param {string} [algorithmCode]
   * @param {{ [key: string]: string; }} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1RunAlgorithmPost(
    algorithmCode?: string,
    requestBody?: { [key: string]: string },
    options?: AxiosRequestConfig,
  ) {
    return ScriptApiFp(this.configuration)
      .apiV1RunAlgorithmPost(algorithmCode, requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存Python脚本边车
   * @param {AddAlgorithmSidecarInput} [addAlgorithmSidecarInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptApi
   */
  public apiV1SaveAlgorithmPost(
    addAlgorithmSidecarInput?: AddAlgorithmSidecarInput,
    options?: AxiosRequestConfig,
  ) {
    return ScriptApiFp(this.configuration)
      .apiV1SaveAlgorithmPost(addAlgorithmSidecarInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
