/* eslint-disable */
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * RabbitMQAppSeriveApi - axios parameter creator
 * @export
 */
export const RabbitMQAppSeriveApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 初始化交换机，绑定队列
     * @param {string} [exchangeName] 交换机
     * @param {string} [queueName] 队列
     * @param {string} [isResetExchange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RabbitMqInitialExchangePost: async (
      exchangeName?: string,
      queueName?: string,
      isResetExchange?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/rabbit-mq/initial-exchange`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (exchangeName !== undefined) {
        localVarQueryParameter['exchangeName'] = exchangeName
      }

      if (queueName !== undefined) {
        localVarQueryParameter['queueName'] = queueName
      }

      if (isResetExchange !== undefined) {
        localVarQueryParameter['isResetExchange'] = isResetExchange
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RabbitMQAppSeriveApi - functional programming interface
 * @export
 */
export const RabbitMQAppSeriveApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RabbitMQAppSeriveApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 初始化交换机，绑定队列
     * @param {string} [exchangeName] 交换机
     * @param {string} [queueName] 队列
     * @param {string} [isResetExchange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1RabbitMqInitialExchangePost(
      exchangeName?: string,
      queueName?: string,
      isResetExchange?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RabbitMqInitialExchangePost(
        exchangeName,
        queueName,
        isResetExchange,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * RabbitMQAppSeriveApi - factory interface
 * @export
 */
export const RabbitMQAppSeriveApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RabbitMQAppSeriveApiFp(configuration)
  return {
    /**
     *
     * @summary 初始化交换机，绑定队列
     * @param {string} [exchangeName] 交换机
     * @param {string} [queueName] 队列
     * @param {string} [isResetExchange]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RabbitMqInitialExchangePost(
      exchangeName?: string,
      queueName?: string,
      isResetExchange?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1RabbitMqInitialExchangePost(exchangeName, queueName, isResetExchange, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RabbitMQAppSeriveApi - object-oriented interface
 * @export
 * @class RabbitMQAppSeriveApi
 * @extends {BaseAPI}
 */
export class RabbitMQAppSeriveApi extends BaseAPI {
  /**
   *
   * @summary 初始化交换机，绑定队列
   * @param {string} [exchangeName] 交换机
   * @param {string} [queueName] 队列
   * @param {string} [isResetExchange]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RabbitMQAppSeriveApi
   */
  public apiV1RabbitMqInitialExchangePost(
    exchangeName?: string,
    queueName?: string,
    isResetExchange?: string,
    options?: AxiosRequestConfig,
  ) {
    return RabbitMQAppSeriveApiFp(this.configuration)
      .apiV1RabbitMqInitialExchangePost(exchangeName, queueName, isResetExchange, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
