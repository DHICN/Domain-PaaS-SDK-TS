// tslint:disable
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddFolderInput } from '../models';
// @ts-ignore
import { DeleteFolderInput } from '../models';
// @ts-ignore
import { FolderOutput } from '../models';
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models';
/**
 * DataIndexApi - axios parameter creator
 * @export
 */
export const DataIndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增数据目录索引
         * @param {AddFolderInput} [addFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AddFolderPost: async (addFolderInput?: AddFolderInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/add/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addFolderInput !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addFolderInput !== undefined ? addFolderInput : {}) : (addFolderInput || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除数据目录索引
         * @param {DeleteFolderInput} [deleteFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteFolderPost: async (deleteFolderInput?: DeleteFolderInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/delete/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deleteFolderInput !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deleteFolderInput !== undefined ? deleteFolderInput : {}) : (deleteFolderInput || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过目录索引检索平台数据
         * @param {string} directory 数据目录路径
         * @param {string} [startTs] 时序数据-开始时间
         * @param {string} [endTs] 时序数据-结束时间
         * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FolderDataGet: async (directory: string, startTs?: string, endTs?: string, attach?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'directory' is not null or undefined
            if (directory === null || directory === undefined) {
                throw new RequiredError('directory','Required parameter directory was null or undefined when calling apiV1FolderDataGet.');
            }
            const localVarPath = `/api/v1/folder/data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directory !== undefined) {
                localVarQueryParameter['Directory'] = directory;
            }

            if (startTs !== undefined) {
                localVarQueryParameter['StartTs'] = startTs;
            }

            if (endTs !== undefined) {
                localVarQueryParameter['EndTs'] = endTs;
            }

            if (attach !== undefined) {
                localVarQueryParameter['Attach'] = attach;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataIndexApi - functional programming interface
 * @export
 */
export const DataIndexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增数据目录索引
         * @param {AddFolderInput} [addFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AddFolderPost(addFolderInput?: AddFolderInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderOutput>> {
            const localVarAxiosArgs = await DataIndexApiAxiosParamCreator(configuration).apiV1AddFolderPost(addFolderInput, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除数据目录索引
         * @param {DeleteFolderInput} [deleteFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DeleteFolderPost(deleteFolderInput?: DeleteFolderInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DataIndexApiAxiosParamCreator(configuration).apiV1DeleteFolderPost(deleteFolderInput, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 通过目录索引检索平台数据
         * @param {string} directory 数据目录路径
         * @param {string} [startTs] 时序数据-开始时间
         * @param {string} [endTs] 时序数据-结束时间
         * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FolderDataGet(directory: string, startTs?: string, endTs?: string, attach?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DataIndexApiAxiosParamCreator(configuration).apiV1FolderDataGet(directory, startTs, endTs, attach, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DataIndexApi - factory interface
 * @export
 */
export const DataIndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 新增数据目录索引
         * @param {AddFolderInput} [addFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AddFolderPost(addFolderInput?: AddFolderInput, options?: any): AxiosPromise<FolderOutput> {
            return DataIndexApiFp(configuration).apiV1AddFolderPost(addFolderInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除数据目录索引
         * @param {DeleteFolderInput} [deleteFolderInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DeleteFolderPost(deleteFolderInput?: DeleteFolderInput, options?: any): AxiosPromise<object> {
            return DataIndexApiFp(configuration).apiV1DeleteFolderPost(deleteFolderInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过目录索引检索平台数据
         * @param {string} directory 数据目录路径
         * @param {string} [startTs] 时序数据-开始时间
         * @param {string} [endTs] 时序数据-结束时间
         * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FolderDataGet(directory: string, startTs?: string, endTs?: string, attach?: string, options?: any): AxiosPromise<void> {
            return DataIndexApiFp(configuration).apiV1FolderDataGet(directory, startTs, endTs, attach, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataIndexApi - object-oriented interface
 * @export
 * @class DataIndexApi
 * @extends {BaseAPI}
 */
export class DataIndexApi extends BaseAPI {
    /**
     * 
     * @summary 新增数据目录索引
     * @param {AddFolderInput} [addFolderInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIndexApi
     */
    public apiV1AddFolderPost(addFolderInput?: AddFolderInput, options?: any) {
        return DataIndexApiFp(this.configuration).apiV1AddFolderPost(addFolderInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除数据目录索引
     * @param {DeleteFolderInput} [deleteFolderInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIndexApi
     */
    public apiV1DeleteFolderPost(deleteFolderInput?: DeleteFolderInput, options?: any) {
        return DataIndexApiFp(this.configuration).apiV1DeleteFolderPost(deleteFolderInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过目录索引检索平台数据
     * @param {string} directory 数据目录路径
     * @param {string} [startTs] 时序数据-开始时间
     * @param {string} [endTs] 时序数据-结束时间
     * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIndexApi
     */
    public apiV1FolderDataGet(directory: string, startTs?: string, endTs?: string, attach?: string, options?: any) {
        return DataIndexApiFp(this.configuration).apiV1FolderDataGet(directory, startTs, endTs, attach, options).then((request) => request(this.axios, this.basePath));
    }

}
