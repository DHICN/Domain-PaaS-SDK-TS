/* eslint-disable */
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddFolderInput } from '../models'
// @ts-ignore
import { DeleteFolderInput } from '../models'
// @ts-ignore
import { FolderOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * DataIndexApi - axios parameter creator
 * @export
 */
export const DataIndexApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增数据目录索引
     * @param {AddFolderInput} [addFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddFolderPost: async (
      addFolderInput?: AddFolderInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/add/folder`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addFolderInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除数据目录索引
     * @param {DeleteFolderInput} [deleteFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteFolderPost: async (
      deleteFolderInput?: DeleteFolderInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete/folder`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteFolderInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过目录索引检索平台数据
     * @param {string} directory 数据目录路径
     * @param {string} [startTs] 时序数据-开始时间
     * @param {string} [endTs] 时序数据-结束时间
     * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FolderDataGet: async (
      directory: string,
      startTs?: string,
      endTs?: string,
      attach?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'directory' is not null or undefined
      assertParamExists('apiV1FolderDataGet', 'directory', directory)
      const localVarPath = `/api/v1/folder/data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (directory !== undefined) {
        localVarQueryParameter['Directory'] = directory
      }

      if (startTs !== undefined) {
        localVarQueryParameter['StartTs'] = startTs
      }

      if (endTs !== undefined) {
        localVarQueryParameter['EndTs'] = endTs
      }

      if (attach !== undefined) {
        localVarQueryParameter['Attach'] = attach
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DataIndexApi - functional programming interface
 * @export
 */
export const DataIndexApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DataIndexApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增数据目录索引
     * @param {AddFolderInput} [addFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AddFolderPost(
      addFolderInput?: AddFolderInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AddFolderPost(
        addFolderInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除数据目录索引
     * @param {DeleteFolderInput} [deleteFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteFolderPost(
      deleteFolderInput?: DeleteFolderInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteFolderPost(
        deleteFolderInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过目录索引检索平台数据
     * @param {string} directory 数据目录路径
     * @param {string} [startTs] 时序数据-开始时间
     * @param {string} [endTs] 时序数据-结束时间
     * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FolderDataGet(
      directory: string,
      startTs?: string,
      endTs?: string,
      attach?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FolderDataGet(
        directory,
        startTs,
        endTs,
        attach,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DataIndexApi - factory interface
 * @export
 */
export const DataIndexApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataIndexApiFp(configuration)
  return {
    /**
     *
     * @summary 新增数据目录索引
     * @param {AddFolderInput} [addFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddFolderPost(addFolderInput?: AddFolderInput, options?: any): AxiosPromise<FolderOutput> {
      return localVarFp
        .apiV1AddFolderPost(addFolderInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除数据目录索引
     * @param {DeleteFolderInput} [deleteFolderInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteFolderPost(
      deleteFolderInput?: DeleteFolderInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DeleteFolderPost(deleteFolderInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过目录索引检索平台数据
     * @param {string} directory 数据目录路径
     * @param {string} [startTs] 时序数据-开始时间
     * @param {string} [endTs] 时序数据-结束时间
     * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FolderDataGet(
      directory: string,
      startTs?: string,
      endTs?: string,
      attach?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1FolderDataGet(directory, startTs, endTs, attach, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DataIndexApi - object-oriented interface
 * @export
 * @class DataIndexApi
 * @extends {BaseAPI}
 */
export class DataIndexApi extends BaseAPI {
  /**
   *
   * @summary 新增数据目录索引
   * @param {AddFolderInput} [addFolderInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataIndexApi
   */
  public apiV1AddFolderPost(addFolderInput?: AddFolderInput, options?: AxiosRequestConfig) {
    return DataIndexApiFp(this.configuration)
      .apiV1AddFolderPost(addFolderInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除数据目录索引
   * @param {DeleteFolderInput} [deleteFolderInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataIndexApi
   */
  public apiV1DeleteFolderPost(
    deleteFolderInput?: DeleteFolderInput,
    options?: AxiosRequestConfig,
  ) {
    return DataIndexApiFp(this.configuration)
      .apiV1DeleteFolderPost(deleteFolderInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过目录索引检索平台数据
   * @param {string} directory 数据目录路径
   * @param {string} [startTs] 时序数据-开始时间
   * @param {string} [endTs] 时序数据-结束时间
   * @param {string} [attach] 附加数据，在查询时原样透传，可作为自定义参数使用
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataIndexApi
   */
  public apiV1FolderDataGet(
    directory: string,
    startTs?: string,
    endTs?: string,
    attach?: string,
    options?: AxiosRequestConfig,
  ) {
    return DataIndexApiFp(this.configuration)
      .apiV1FolderDataGet(directory, startTs, endTs, attach, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
