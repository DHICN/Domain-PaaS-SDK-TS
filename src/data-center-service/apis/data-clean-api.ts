/* eslint-disable */
/**
 * 数据中台服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDataCleanTagConfig } from '../models'
// @ts-ignore
import { DataCleanAlgorithmConfigOutput } from '../models'
// @ts-ignore
import { DataCleanAlgorithmConfigOutputPage } from '../models'
// @ts-ignore
import { DataCleanTagConfigOutput } from '../models'
// @ts-ignore
import { DataCleanTagConfigOutputPage } from '../models'
// @ts-ignore
import { DeleteDataCleanAlgorithmConfig } from '../models'
// @ts-ignore
import { DeleteDataCleanTagConfig } from '../models'
// @ts-ignore
import { PageInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * DataCleanApi - axios parameter creator
 * @export
 */
export const DataCleanApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 删除清洗算法配置及绑定的指标信息
     * @param {DeleteDataCleanAlgorithmConfig} [deleteDataCleanAlgorithmConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmDeletePost: async (
      deleteDataCleanAlgorithmConfig?: DeleteDataCleanAlgorithmConfig,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/algorithm/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteDataCleanAlgorithmConfig,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 分页查询清洗算法配置
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmPost: async (
      pageInput?: PageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/algorithm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存清洗算法配置
     * @param {Array<DataCleanAlgorithmConfigOutput>} [dataCleanAlgorithmConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmSavePost: async (
      dataCleanAlgorithmConfigOutput?: Array<DataCleanAlgorithmConfigOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/algorithm/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dataCleanAlgorithmConfigOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加清洗标签
     * @param {Array<AddDataCleanTagConfig>} [addDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagAddPost: async (
      addDataCleanTagConfig?: Array<AddDataCleanTagConfig>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/tag/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDataCleanTagConfig,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除清洗标签
     * @param {DeleteDataCleanTagConfig} [deleteDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagDeletePost: async (
      deleteDataCleanTagConfig?: DeleteDataCleanTagConfig,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/tag/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteDataCleanTagConfig,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 分页查询清洗标签
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagPost: async (
      pageInput?: PageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/tag`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改清洗标签
     * @param {Array<DataCleanTagConfigOutput>} [dataCleanTagConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagUpdatePost: async (
      dataCleanTagConfigOutput?: Array<DataCleanTagConfigOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/data-clean/tag/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dataCleanTagConfigOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DataCleanApi - functional programming interface
 * @export
 */
export const DataCleanApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DataCleanApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 删除清洗算法配置及绑定的指标信息
     * @param {DeleteDataCleanAlgorithmConfig} [deleteDataCleanAlgorithmConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanAlgorithmDeletePost(
      deleteDataCleanAlgorithmConfig?: DeleteDataCleanAlgorithmConfig,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanAlgorithmDeletePost(
        deleteDataCleanAlgorithmConfig,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 分页查询清洗算法配置
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanAlgorithmPost(
      pageInput?: PageInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCleanAlgorithmConfigOutputPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanAlgorithmPost(
        pageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存清洗算法配置
     * @param {Array<DataCleanAlgorithmConfigOutput>} [dataCleanAlgorithmConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanAlgorithmSavePost(
      dataCleanAlgorithmConfigOutput?: Array<DataCleanAlgorithmConfigOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanAlgorithmSavePost(
        dataCleanAlgorithmConfigOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加清洗标签
     * @param {Array<AddDataCleanTagConfig>} [addDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanTagAddPost(
      addDataCleanTagConfig?: Array<AddDataCleanTagConfig>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanTagAddPost(
        addDataCleanTagConfig,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除清洗标签
     * @param {DeleteDataCleanTagConfig} [deleteDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanTagDeletePost(
      deleteDataCleanTagConfig?: DeleteDataCleanTagConfig,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanTagDeletePost(
        deleteDataCleanTagConfig,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 分页查询清洗标签
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanTagPost(
      pageInput?: PageInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCleanTagConfigOutputPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanTagPost(
        pageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改清洗标签
     * @param {Array<DataCleanTagConfigOutput>} [dataCleanTagConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DataCleanTagUpdatePost(
      dataCleanTagConfigOutput?: Array<DataCleanTagConfigOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DataCleanTagUpdatePost(
        dataCleanTagConfigOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DataCleanApi - factory interface
 * @export
 */
export const DataCleanApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataCleanApiFp(configuration)
  return {
    /**
     *
     * @summary 删除清洗算法配置及绑定的指标信息
     * @param {DeleteDataCleanAlgorithmConfig} [deleteDataCleanAlgorithmConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmDeletePost(
      deleteDataCleanAlgorithmConfig?: DeleteDataCleanAlgorithmConfig,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DataCleanAlgorithmDeletePost(deleteDataCleanAlgorithmConfig, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 分页查询清洗算法配置
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmPost(
      pageInput?: PageInput,
      options?: any,
    ): AxiosPromise<DataCleanAlgorithmConfigOutputPage> {
      return localVarFp
        .apiV1DataCleanAlgorithmPost(pageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存清洗算法配置
     * @param {Array<DataCleanAlgorithmConfigOutput>} [dataCleanAlgorithmConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanAlgorithmSavePost(
      dataCleanAlgorithmConfigOutput?: Array<DataCleanAlgorithmConfigOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DataCleanAlgorithmSavePost(dataCleanAlgorithmConfigOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加清洗标签
     * @param {Array<AddDataCleanTagConfig>} [addDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagAddPost(
      addDataCleanTagConfig?: Array<AddDataCleanTagConfig>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DataCleanTagAddPost(addDataCleanTagConfig, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除清洗标签
     * @param {DeleteDataCleanTagConfig} [deleteDataCleanTagConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagDeletePost(
      deleteDataCleanTagConfig?: DeleteDataCleanTagConfig,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DataCleanTagDeletePost(deleteDataCleanTagConfig, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 分页查询清洗标签
     * @param {PageInput} [pageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagPost(
      pageInput?: PageInput,
      options?: any,
    ): AxiosPromise<DataCleanTagConfigOutputPage> {
      return localVarFp
        .apiV1DataCleanTagPost(pageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改清洗标签
     * @param {Array<DataCleanTagConfigOutput>} [dataCleanTagConfigOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DataCleanTagUpdatePost(
      dataCleanTagConfigOutput?: Array<DataCleanTagConfigOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DataCleanTagUpdatePost(dataCleanTagConfigOutput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DataCleanApi - object-oriented interface
 * @export
 * @class DataCleanApi
 * @extends {BaseAPI}
 */
export class DataCleanApi extends BaseAPI {
  /**
   *
   * @summary 删除清洗算法配置及绑定的指标信息
   * @param {DeleteDataCleanAlgorithmConfig} [deleteDataCleanAlgorithmConfig]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanAlgorithmDeletePost(
    deleteDataCleanAlgorithmConfig?: DeleteDataCleanAlgorithmConfig,
    options?: AxiosRequestConfig,
  ) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanAlgorithmDeletePost(deleteDataCleanAlgorithmConfig, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 分页查询清洗算法配置
   * @param {PageInput} [pageInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanAlgorithmPost(pageInput?: PageInput, options?: AxiosRequestConfig) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanAlgorithmPost(pageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存清洗算法配置
   * @param {Array<DataCleanAlgorithmConfigOutput>} [dataCleanAlgorithmConfigOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanAlgorithmSavePost(
    dataCleanAlgorithmConfigOutput?: Array<DataCleanAlgorithmConfigOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanAlgorithmSavePost(dataCleanAlgorithmConfigOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加清洗标签
   * @param {Array<AddDataCleanTagConfig>} [addDataCleanTagConfig]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanTagAddPost(
    addDataCleanTagConfig?: Array<AddDataCleanTagConfig>,
    options?: AxiosRequestConfig,
  ) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanTagAddPost(addDataCleanTagConfig, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除清洗标签
   * @param {DeleteDataCleanTagConfig} [deleteDataCleanTagConfig]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanTagDeletePost(
    deleteDataCleanTagConfig?: DeleteDataCleanTagConfig,
    options?: AxiosRequestConfig,
  ) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanTagDeletePost(deleteDataCleanTagConfig, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 分页查询清洗标签
   * @param {PageInput} [pageInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanTagPost(pageInput?: PageInput, options?: AxiosRequestConfig) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanTagPost(pageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改清洗标签
   * @param {Array<DataCleanTagConfigOutput>} [dataCleanTagConfigOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataCleanApi
   */
  public apiV1DataCleanTagUpdatePost(
    dataCleanTagConfigOutput?: Array<DataCleanTagConfigOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataCleanApiFp(this.configuration)
      .apiV1DataCleanTagUpdatePost(dataCleanTagConfigOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
