/* eslint-disable */
/**
 * GIS服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { GisOutput } from '../models'
// @ts-ignore
import { OrthogonalGrid2D } from '../models'
// @ts-ignore
import { StyleObject } from '../models'
/**
 * GisQueryApi - axios parameter creator
 * @export
 */
export const GisQueryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取GIS style信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetGisStyleInfoGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-gis-style-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取二维网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetMesh2dGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-mesh-2d-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取模型GIS坐标信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetModelGisSpatialReferenceGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-model-gis-spatial-reference`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取节点 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetNetworkNodeGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-network-node-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取管道 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetNetworkPipeGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-network-pipe-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取正交网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetOrthogonal2dGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-orthogonal-2d-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetRiverGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-river-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdDmaGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-dma-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdJunctionGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-junction-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdPipeGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-pipe-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdPumpGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-pump-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdTankGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-tank-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取供水阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdValveGisGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-wd-valve-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GisQueryApi - functional programming interface
 * @export
 */
export const GisQueryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GisQueryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取GIS style信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetGisStyleInfoGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StyleObject>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetGisStyleInfoGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取二维网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetMesh2dGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GisOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetMesh2dGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取模型GIS坐标信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetModelGisSpatialReferenceGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiGisV1GetModelGisSpatialReferenceGet(
          templateScenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取节点 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetNetworkNodeGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GisOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetNetworkNodeGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取管道 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetNetworkPipeGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GisOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetNetworkPipeGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取正交网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetOrthogonal2dGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrthogonalGrid2D>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetOrthogonal2dGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetRiverGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GisOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetRiverGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdDmaGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdDmaGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdJunctionGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdJunctionGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdPipeGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdPipeGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdPumpGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdPumpGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdTankGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdTankGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取供水阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetWdValveGisGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetWdValveGisGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * GisQueryApi - factory interface
 * @export
 */
export const GisQueryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GisQueryApiFp(configuration)
  return {
    /**
     *
     * @summary 获取GIS style信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetGisStyleInfoGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<StyleObject> {
      return localVarFp
        .apiGisV1GetGisStyleInfoGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取二维网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetMesh2dGisGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<GisOutput>> {
      return localVarFp
        .apiGisV1GetMesh2dGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取模型GIS坐标信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetModelGisSpatialReferenceGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetModelGisSpatialReferenceGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取节点 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetNetworkNodeGisGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<GisOutput>> {
      return localVarFp
        .apiGisV1GetNetworkNodeGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取管道 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetNetworkPipeGisGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<GisOutput>> {
      return localVarFp
        .apiGisV1GetNetworkPipeGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取正交网格 Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetOrthogonal2dGisGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<OrthogonalGrid2D> {
      return localVarFp
        .apiGisV1GetOrthogonal2dGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetRiverGisGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<GisOutput>> {
      return localVarFp
        .apiGisV1GetRiverGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdDmaGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdDmaGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdJunctionGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdJunctionGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdPipeGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdPipeGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdPumpGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdPumpGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdTankGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdTankGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取供水阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetWdValveGisGet(templateScenarioId?: string, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetWdValveGisGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GisQueryApi - object-oriented interface
 * @export
 * @class GisQueryApi
 * @extends {BaseAPI}
 */
export class GisQueryApi extends BaseAPI {
  /**
   *
   * @summary 获取GIS style信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetGisStyleInfoGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetGisStyleInfoGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取二维网格 Gis信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetMesh2dGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetMesh2dGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取模型GIS坐标信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetModelGisSpatialReferenceGet(
    templateScenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetModelGisSpatialReferenceGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取节点 Gis信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetNetworkNodeGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetNetworkNodeGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取管道 Gis信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetNetworkPipeGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetNetworkPipeGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取正交网格 Gis信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetOrthogonal2dGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetOrthogonal2dGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取河流Gis信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetRiverGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetRiverGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水DMA GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdDmaGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdDmaGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水节点GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdJunctionGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdJunctionGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水管道GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdPipeGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdPipeGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水水泵GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdPumpGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdPumpGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水水池GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdTankGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdTankGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取供水阀门GIS信息
   * @param {string} [templateScenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisQueryApi
   */
  public apiGisV1GetWdValveGisGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return GisQueryApiFp(this.configuration)
      .apiGisV1GetWdValveGisGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
