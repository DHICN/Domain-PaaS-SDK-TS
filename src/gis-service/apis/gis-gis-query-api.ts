/* eslint-disable */
/**
 * 长治项目
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { GisOutput } from '../models'
/**
 * GisGisQueryApi - axios parameter creator
 * @export
 */
export const GisGisQueryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetDmaGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-dma-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetJunctionGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-junction-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetPipeGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-pipe-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetPumpGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-pump-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetRiverGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-river-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetTankGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-tank-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetValveGisGet: async (
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/gis/v1/get-valve-gis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GisGisQueryApi - functional programming interface
 * @export
 */
export const GisGisQueryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GisGisQueryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetDmaGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetDmaGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetJunctionGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetJunctionGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetPipeGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetPipeGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetPumpGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetPumpGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetRiverGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GisOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetRiverGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetTankGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetTankGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGisV1GetValveGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGisV1GetValveGisGet(
        templateScenarioId,
        tenantId,
        debugHeaderSign,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * GisGisQueryApi - factory interface
 * @export
 */
export const GisGisQueryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GisGisQueryApiFp(configuration)
  return {
    /**
     *
     * @summary 获取DMA GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetDmaGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetDmaGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取节点GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetJunctionGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetJunctionGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取管道GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetPipeGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetPipeGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取水泵GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetPumpGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetPumpGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取河流Gis信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetRiverGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<Array<GisOutput>> {
      return localVarFp
        .apiGisV1GetRiverGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取水池GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetTankGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetTankGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取阀门GIS信息
     * @param {string} [templateScenarioId]
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGisV1GetValveGisGet(
      templateScenarioId?: string,
      tenantId?: string,
      debugHeaderSign?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiGisV1GetValveGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GisGisQueryApi - object-oriented interface
 * @export
 * @class GisGisQueryApi
 * @extends {BaseAPI}
 */
export class GisGisQueryApi extends BaseAPI {
  /**
   *
   * @summary 获取DMA GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetDmaGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetDmaGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取节点GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetJunctionGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetJunctionGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取管道GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetPipeGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetPipeGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取水泵GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetPumpGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetPumpGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取河流Gis信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetRiverGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetRiverGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取水池GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetTankGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetTankGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取阀门GIS信息
   * @param {string} [templateScenarioId]
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GisGisQueryApi
   */
  public apiGisV1GetValveGisGet(
    templateScenarioId?: string,
    tenantId?: string,
    debugHeaderSign?: string,
    options?: AxiosRequestConfig,
  ) {
    return GisGisQueryApiFp(this.configuration)
      .apiGisV1GetValveGisGet(templateScenarioId, tenantId, debugHeaderSign, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
