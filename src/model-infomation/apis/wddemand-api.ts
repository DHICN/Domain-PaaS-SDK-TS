/* eslint-disable */
/**
 * model-information-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDemandInput } from '../models'
// @ts-ignore
import { DeleteInput } from '../models'
// @ts-ignore
import { QueryDemandDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateDemandInput } from '../models'
/**
 * WDDemandApi - axios parameter creator
 * @export
 */
export const WDDemandApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增需水量要素编辑信息 Add demand information
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandAddPost: async (
      addDemandInput?: AddDemandInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDemandInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取该方案下所有的需水量要素信息 Get all demands information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandAllGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除需水量要素编辑信息 Delete demand information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandDeletePost: async (
      deleteInput?: DeleteInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取该方案下指定muids的需水量要素信息 Get demands information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中需水量ID列表 demand muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandListGet: async (
      scenarioId?: string,
      muids?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (muids !== undefined) {
        localVarQueryParameter['muids'] = muids
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存需水量要素信息，原有需水量信息会被删除 Save demand information, old demand information will be deleted
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandResavePost: async (
      addDemandInput?: AddDemandInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDemandInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改需水量要素信息 Update demand information
     * @param {UpdateDemandInput} [updateDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandUpdatePost: async (
      updateDemandInput?: UpdateDemandInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/demand/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDemandInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDDemandApi - functional programming interface
 * @export
 */
export const WDDemandApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDDemandApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增需水量要素编辑信息 Add demand information
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandAddPost(
      addDemandInput?: AddDemandInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandAddPost(
          addDemandInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取该方案下所有的需水量要素信息 Get all demands information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandAllGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryDemandDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandAllGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除需水量要素编辑信息 Delete demand information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandDeletePost(
      deleteInput?: DeleteInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandDeletePost(
          deleteInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取该方案下指定muids的需水量要素信息 Get demands information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中需水量ID列表 demand muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandListGet(
      scenarioId?: string,
      muids?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryDemandDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandListGet(
          scenarioId,
          muids,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存需水量要素信息，原有需水量信息会被删除 Save demand information, old demand information will be deleted
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandResavePost(
      addDemandInput?: AddDemandInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandResavePost(
          addDemandInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改需水量要素信息 Update demand information
     * @param {UpdateDemandInput} [updateDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdDemandUpdatePost(
      updateDemandInput?: UpdateDemandInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdDemandUpdatePost(
          updateDemandInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDDemandApi - factory interface
 * @export
 */
export const WDDemandApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDDemandApiFp(configuration)
  return {
    /**
     *
     * @summary 新增需水量要素编辑信息 Add demand information
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandAddPost(
      addDemandInput?: AddDemandInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandAddPost(addDemandInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取该方案下所有的需水量要素信息 Get all demands information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandAllGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<QueryDemandDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandAllGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除需水量要素编辑信息 Delete demand information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandDeletePost(
      deleteInput?: DeleteInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandDeletePost(deleteInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取该方案下指定muids的需水量要素信息 Get demands information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中需水量ID列表 demand muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandListGet(
      scenarioId?: string,
      muids?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<QueryDemandDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandListGet(scenarioId, muids, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存需水量要素信息，原有需水量信息会被删除 Save demand information, old demand information will be deleted
     * @param {AddDemandInput} [addDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandResavePost(
      addDemandInput?: AddDemandInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandResavePost(addDemandInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改需水量要素信息 Update demand information
     * @param {UpdateDemandInput} [updateDemandInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdDemandUpdatePost(
      updateDemandInput?: UpdateDemandInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdDemandUpdatePost(updateDemandInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDDemandApi - object-oriented interface
 * @export
 * @class WDDemandApi
 * @extends {BaseAPI}
 */
export class WDDemandApi extends BaseAPI {
  /**
   *
   * @summary 新增需水量要素编辑信息 Add demand information
   * @param {AddDemandInput} [addDemandInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandAddPost(
    addDemandInput?: AddDemandInput,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandAddPost(addDemandInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取该方案下所有的需水量要素信息 Get all demands information of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandAllGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandAllGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除需水量要素编辑信息 Delete demand information
   * @param {DeleteInput} [deleteInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandDeletePost(
    deleteInput?: DeleteInput,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandDeletePost(deleteInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取该方案下指定muids的需水量要素信息 Get demands information of a scenario by muids
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {Array<string>} [muids] 模型中需水量ID列表 demand muids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandListGet(
    scenarioId?: string,
    muids?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandListGet(scenarioId, muids, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存需水量要素信息，原有需水量信息会被删除 Save demand information, old demand information will be deleted
   * @param {AddDemandInput} [addDemandInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandResavePost(
    addDemandInput?: AddDemandInput,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandResavePost(addDemandInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改需水量要素信息 Update demand information
   * @param {UpdateDemandInput} [updateDemandInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDDemandApi
   */
  public apiV1ModelInformationDomainWdDemandUpdatePost(
    updateDemandInput?: UpdateDemandInput,
    options?: AxiosRequestConfig,
  ) {
    return WDDemandApiFp(this.configuration)
      .apiV1ModelInformationDomainWdDemandUpdatePost(updateDemandInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
