/* eslint-disable */
/**
 * model-information-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { GetAllBoundarysOutput } from '../models'
// @ts-ignore
import { GetBoundaryTsOutput } from '../models'
// @ts-ignore
import { GetControlRuleByScenarioOutput } from '../models'
// @ts-ignore
import { GetInitialConditionOutput } from '../models'
// @ts-ignore
import { GetWasteWaterConditionOutput } from '../models'
// @ts-ignore
import { ModelProcessBoundaryConditionDocument } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateBoundaryTsInput } from '../models'
// @ts-ignore
import { UpdateControlRuleInput } from '../models'
// @ts-ignore
import { UpdateInitialConditionInput } from '../models'
// @ts-ignore
import { UpdateWastWaterConditionInput } from '../models'
/**
 * ModelEditApi - axios parameter creator
 * @export
 */
export const ModelEditApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 获取所有的降雨、河道水位、流量、工业点源排放流量等边界列表 Get all the rainfall, river water level, river discharge or industry point source wastewater discharge boundaries.
     * @summary 获取所有的模型边界信息 Get all model boundaries
     * @param {string} [boundaryType] 边界类型 boundary type
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryListGet: async (
      boundaryType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (boundaryType !== undefined) {
        localVarQueryParameter['boundaryType'] = boundaryType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量保存边界时间序列数据 Batch save boundary time series data
     * @param {Array<ModelProcessBoundaryConditionDocument>} [modelProcessBoundaryConditionDocument]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesAddPost: async (
      modelProcessBoundaryConditionDocument?: Array<ModelProcessBoundaryConditionDocument>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/timeseries/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelProcessBoundaryConditionDocument,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Get rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 获取方案的边界时间序列数据 Get boundary time series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryID] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesGet: async (
      scenarioId?: string,
      boundaryID?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (boundaryID !== undefined) {
        localVarQueryParameter['boundaryID'] = boundaryID
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 设置降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Set rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 设置方案的边界时间序列数据 Set boundary time series data of a scenario
     * @param {UpdateBoundaryTsInput} [updateBoundaryTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesUpdatePost: async (
      updateBoundaryTsInput?: UpdateBoundaryTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/timeseries/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBoundaryTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Get domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 获取方案的污水量数据 Get wastewater data of a scenario.
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryId] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryWastewaterGet: async (
      scenarioId?: string,
      boundaryId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/wastewater`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (boundaryId !== undefined) {
        localVarQueryParameter['boundaryId'] = boundaryId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 设置生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Set domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 设置方案的污水量数据 Set wastewater data of a scenario
     * @param {UpdateWastWaterConditionInput} [updateWastWaterConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryWastewaterUpdatePost: async (
      updateWastWaterConditionInput?: UpdateWastWaterConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/boundary/wastewater/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateWastWaterConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Get control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 获取方案的调度规则数据 Get control rule data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationControlRuleGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/control-rule`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 设置调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Set control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 设置方案的调度规则数据 Set control rule data of a scenario
     * @param {UpdateControlRuleInput} [updateControlRuleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationControlRuleUpdatePost: async (
      updateControlRuleInput?: UpdateControlRuleInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/control-rule/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlRuleInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取方案的热启动信息，包括热启动方案、热启动文件名称等 Get initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 获取方案的热启动信息 Get initial condition hotstart information of a scenario
     * @param {string} [scenarioId] scenario\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationInitialConditionHotstartGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/initial-condition/hotstart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 设置方案的热启动信息，包括热启动方案、热启动文件名称等 Set initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 设置方案的热启动信息 Set initial condition hotstart information of a scenario
     * @param {UpdateInitialConditionInput} [updateInitialConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationInitialConditionHotstartUpdatePost: async (
      updateInitialConditionInput?: UpdateInitialConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/initial-condition/hotstart/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateInitialConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModelEditApi - functional programming interface
 * @export
 */
export const ModelEditApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModelEditApiAxiosParamCreator(configuration)
  return {
    /**
     * 获取所有的降雨、河道水位、流量、工业点源排放流量等边界列表 Get all the rainfall, river water level, river discharge or industry point source wastewater discharge boundaries.
     * @summary 获取所有的模型边界信息 Get all model boundaries
     * @param {string} [boundaryType] 边界类型 boundary type
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryListGet(
      boundaryType?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAllBoundarysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryListGet(boundaryType, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量保存边界时间序列数据 Batch save boundary time series data
     * @param {Array<ModelProcessBoundaryConditionDocument>} [modelProcessBoundaryConditionDocument]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryTimeseriesAddPost(
      modelProcessBoundaryConditionDocument?: Array<ModelProcessBoundaryConditionDocument>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryTimeseriesAddPost(
          modelProcessBoundaryConditionDocument,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Get rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 获取方案的边界时间序列数据 Get boundary time series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryID] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryTimeseriesGet(
      scenarioId?: string,
      boundaryID?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBoundaryTsOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryTimeseriesGet(
          scenarioId,
          boundaryID,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 设置降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Set rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 设置方案的边界时间序列数据 Set boundary time series data of a scenario
     * @param {UpdateBoundaryTsInput} [updateBoundaryTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryTimeseriesUpdatePost(
      updateBoundaryTsInput?: UpdateBoundaryTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryTimeseriesUpdatePost(
          updateBoundaryTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Get domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 获取方案的污水量数据 Get wastewater data of a scenario.
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryId] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryWastewaterGet(
      scenarioId?: string,
      boundaryId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWasteWaterConditionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryWastewaterGet(
          scenarioId,
          boundaryId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 设置生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Set domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 设置方案的污水量数据 Set wastewater data of a scenario
     * @param {UpdateWastWaterConditionInput} [updateWastWaterConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationBoundaryWastewaterUpdatePost(
      updateWastWaterConditionInput?: UpdateWastWaterConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationBoundaryWastewaterUpdatePost(
          updateWastWaterConditionInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Get control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 获取方案的调度规则数据 Get control rule data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationControlRuleGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetControlRuleByScenarioOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModelInformationControlRuleGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 设置调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Set control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 设置方案的调度规则数据 Set control rule data of a scenario
     * @param {UpdateControlRuleInput} [updateControlRuleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationControlRuleUpdatePost(
      updateControlRuleInput?: UpdateControlRuleInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationControlRuleUpdatePost(
          updateControlRuleInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取方案的热启动信息，包括热启动方案、热启动文件名称等 Get initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 获取方案的热启动信息 Get initial condition hotstart information of a scenario
     * @param {string} [scenarioId] scenario\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationInitialConditionHotstartGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInitialConditionOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationInitialConditionHotstartGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 设置方案的热启动信息，包括热启动方案、热启动文件名称等 Set initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 设置方案的热启动信息 Set initial condition hotstart information of a scenario
     * @param {UpdateInitialConditionInput} [updateInitialConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationInitialConditionHotstartUpdatePost(
      updateInitialConditionInput?: UpdateInitialConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationInitialConditionHotstartUpdatePost(
          updateInitialConditionInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ModelEditApi - factory interface
 * @export
 */
export const ModelEditApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModelEditApiFp(configuration)
  return {
    /**
     * 获取所有的降雨、河道水位、流量、工业点源排放流量等边界列表 Get all the rainfall, river water level, river discharge or industry point source wastewater discharge boundaries.
     * @summary 获取所有的模型边界信息 Get all model boundaries
     * @param {string} [boundaryType] 边界类型 boundary type
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryListGet(
      boundaryType?: string,
      options?: any,
    ): AxiosPromise<Array<GetAllBoundarysOutput>> {
      return localVarFp
        .apiV1ModelInformationBoundaryListGet(boundaryType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量保存边界时间序列数据 Batch save boundary time series data
     * @param {Array<ModelProcessBoundaryConditionDocument>} [modelProcessBoundaryConditionDocument]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesAddPost(
      modelProcessBoundaryConditionDocument?: Array<ModelProcessBoundaryConditionDocument>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelInformationBoundaryTimeseriesAddPost(
          modelProcessBoundaryConditionDocument,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Get rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 获取方案的边界时间序列数据 Get boundary time series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryID] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesGet(
      scenarioId?: string,
      boundaryID?: string,
      options?: any,
    ): AxiosPromise<GetBoundaryTsOutput> {
      return localVarFp
        .apiV1ModelInformationBoundaryTimeseriesGet(scenarioId, boundaryID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 设置降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Set rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
     * @summary 设置方案的边界时间序列数据 Set boundary time series data of a scenario
     * @param {UpdateBoundaryTsInput} [updateBoundaryTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryTimeseriesUpdatePost(
      updateBoundaryTsInput?: UpdateBoundaryTsInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelInformationBoundaryTimeseriesUpdatePost(updateBoundaryTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Get domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 获取方案的污水量数据 Get wastewater data of a scenario.
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [boundaryId] 边界ID boundary id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryWastewaterGet(
      scenarioId?: string,
      boundaryId?: string,
      options?: any,
    ): AxiosPromise<GetWasteWaterConditionOutput> {
      return localVarFp
        .apiV1ModelInformationBoundaryWastewaterGet(scenarioId, boundaryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 设置生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Set domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
     * @summary 设置方案的污水量数据 Set wastewater data of a scenario
     * @param {UpdateWastWaterConditionInput} [updateWastWaterConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationBoundaryWastewaterUpdatePost(
      updateWastWaterConditionInput?: UpdateWastWaterConditionInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelInformationBoundaryWastewaterUpdatePost(updateWastWaterConditionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Get control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 获取方案的调度规则数据 Get control rule data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationControlRuleGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<GetControlRuleByScenarioOutput> {
      return localVarFp
        .apiV1ModelInformationControlRuleGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 设置调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Set control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
     * @summary 设置方案的调度规则数据 Set control rule data of a scenario
     * @param {UpdateControlRuleInput} [updateControlRuleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationControlRuleUpdatePost(
      updateControlRuleInput?: UpdateControlRuleInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelInformationControlRuleUpdatePost(updateControlRuleInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取方案的热启动信息，包括热启动方案、热启动文件名称等 Get initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 获取方案的热启动信息 Get initial condition hotstart information of a scenario
     * @param {string} [scenarioId] scenario\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationInitialConditionHotstartGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<GetInitialConditionOutput> {
      return localVarFp
        .apiV1ModelInformationInitialConditionHotstartGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 设置方案的热启动信息，包括热启动方案、热启动文件名称等 Set initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
     * @summary 设置方案的热启动信息 Set initial condition hotstart information of a scenario
     * @param {UpdateInitialConditionInput} [updateInitialConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationInitialConditionHotstartUpdatePost(
      updateInitialConditionInput?: UpdateInitialConditionInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1ModelInformationInitialConditionHotstartUpdatePost(
          updateInitialConditionInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModelEditApi - object-oriented interface
 * @export
 * @class ModelEditApi
 * @extends {BaseAPI}
 */
export class ModelEditApi extends BaseAPI {
  /**
   * 获取所有的降雨、河道水位、流量、工业点源排放流量等边界列表 Get all the rainfall, river water level, river discharge or industry point source wastewater discharge boundaries.
   * @summary 获取所有的模型边界信息 Get all model boundaries
   * @param {string} [boundaryType] 边界类型 boundary type
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryListGet(boundaryType?: string, options?: AxiosRequestConfig) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryListGet(boundaryType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量保存边界时间序列数据 Batch save boundary time series data
   * @param {Array<ModelProcessBoundaryConditionDocument>} [modelProcessBoundaryConditionDocument]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryTimeseriesAddPost(
    modelProcessBoundaryConditionDocument?: Array<ModelProcessBoundaryConditionDocument>,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryTimeseriesAddPost(
        modelProcessBoundaryConditionDocument,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Get rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
   * @summary 获取方案的边界时间序列数据 Get boundary time series data of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [boundaryID] 边界ID boundary id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryTimeseriesGet(
    scenarioId?: string,
    boundaryID?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryTimeseriesGet(scenarioId, boundaryID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 设置降雨、河道水位、流量、工业点源排放流量等边界时间序列数据 Set rainfall, river water level, river discharge or industry point source wastewater discharge boundary\'s time series data of a scenario.
   * @summary 设置方案的边界时间序列数据 Set boundary time series data of a scenario
   * @param {UpdateBoundaryTsInput} [updateBoundaryTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryTimeseriesUpdatePost(
    updateBoundaryTsInput?: UpdateBoundaryTsInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryTimeseriesUpdatePost(updateBoundaryTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Get domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
   * @summary 获取方案的污水量数据 Get wastewater data of a scenario.
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [boundaryId] 边界ID boundary id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryWastewaterGet(
    scenarioId?: string,
    boundaryId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryWastewaterGet(scenarioId, boundaryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 设置生活面源污水数据，包括汇水区单位面积排放量、流量模式等 Set domestic distributed source wastewater data, including catchment discharge per area and pattern of a scenario.
   * @summary 设置方案的污水量数据 Set wastewater data of a scenario
   * @param {UpdateWastWaterConditionInput} [updateWastWaterConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationBoundaryWastewaterUpdatePost(
    updateWastWaterConditionInput?: UpdateWastWaterConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationBoundaryWastewaterUpdatePost(updateWastWaterConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Get control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
   * @summary 获取方案的调度规则数据 Get control rule data of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationControlRuleGet(scenarioId?: string, options?: AxiosRequestConfig) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationControlRuleGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 设置调度规则数据，包括河道泵站控制水位、能力，河道闸门控制水位，管网泵站开启水位、停止水位、能力，管网阀门开度等 Set control rule data including river pump control water level and capacity; river gate control water level; network pump start water level, stop water level, capacity; network valve openning of a scenario.
   * @summary 设置方案的调度规则数据 Set control rule data of a scenario
   * @param {UpdateControlRuleInput} [updateControlRuleInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationControlRuleUpdatePost(
    updateControlRuleInput?: UpdateControlRuleInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationControlRuleUpdatePost(updateControlRuleInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取方案的热启动信息，包括热启动方案、热启动文件名称等 Get initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
   * @summary 获取方案的热启动信息 Get initial condition hotstart information of a scenario
   * @param {string} [scenarioId] scenario\&#39;s ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationInitialConditionHotstartGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationInitialConditionHotstartGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 设置方案的热启动信息，包括热启动方案、热启动文件名称等 Set initial condition hotstart information, including hotstart scenario id, hotstart file name, etc. of a scenario.
   * @summary 设置方案的热启动信息 Set initial condition hotstart information of a scenario
   * @param {UpdateInitialConditionInput} [updateInitialConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelEditApi
   */
  public apiV1ModelInformationInitialConditionHotstartUpdatePost(
    updateInitialConditionInput?: UpdateInitialConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelEditApiFp(this.configuration)
      .apiV1ModelInformationInitialConditionHotstartUpdatePost(updateInitialConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
