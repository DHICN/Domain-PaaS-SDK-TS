/* eslint-disable */
/**
 * 香港污水厂项目测试
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CompareOutput } from '../models'
// @ts-ignore
import { ControlSuggestionOutput } from '../models'
// @ts-ignore
import { EnergyCostCompareData } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SwitchControlInput } from '../models'
/**
 * OptimizationApi - axios parameter creator
 * @export
 */
export const OptimizationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取优化控制点位上，实测值与优化模拟值的对比信息 Get online data and optimization model result data on control points
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlCompareGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/control-compare`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 针对用户设置的开启远程控制的控制建议点位，执行控制，由任务调度控制每五分钟执行一次 Execute remote control for points that user has turn on the remote control function. This api will be called by task scheduling, execute once for every 5 minutes
     * @summary 基于控制建议执行远程控制 Execute remote control based on control suggestions
     * @param {string} [tenantId] 租户ID tenant Id
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlPost: async (
      tenantId?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/control`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 控制建议值来自在线滚动优化模型当前时刻的模拟结果
     * @summary 获取当前时刻的控制建议值
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlSuggestionsGet: async (
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/control-suggestions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (currentTime !== undefined) {
        localVarQueryParameter['currentTime'] = currentTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取电耗的实际值与优化值，包括时间序列与累计值 Get real energy cost and optimized energy cost, including time-series data and accumulated value
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationEnergyCostCompareGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/energy-cost-compare`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 该接口通过任务调度定时调用，每30分钟执行一次 This api will be called by task scheduling, execute once for every 30 minutes
     * @summary 生成吨水能耗的日统计结果和月统计结果，保存入库 Generate daily and monthly statistic result of energy cost per ton of water, and store in database
     * @param {string} [tenantId] 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationEnergyCostStatisticPost: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/energy-cost/statistic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的objectName用于下载 Excel file will be stored to distributed file system, and objectName will be returned for the front-end to download the file
     * @summary 将指定时间段内的优化对比的所有数据统一导出到一个excel文件中 Export optimization compare result data of a certain period to one excel file
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationExportExcelGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/export-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取出水口水质，实测值与优化模拟值得对比信息 Get online data and optimization model result data on outlet
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationOutletCompareGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/outlet-compare`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改某一控制项的远程控制与否 Modify remote control for a kind of control items
     * @param {SwitchControlInput} [switchControlInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationSwitchControlPost: async (
      switchControlInput?: SwitchControlInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/optimization/switch-control`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        switchControlInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OptimizationApi - functional programming interface
 * @export
 */
export const OptimizationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OptimizationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取优化控制点位上，实测值与优化模拟值的对比信息 Get online data and optimization model result data on control points
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationControlCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompareOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OptimizationControlCompareGet(
        startTime,
        endTime,
        modelName,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 针对用户设置的开启远程控制的控制建议点位，执行控制，由任务调度控制每五分钟执行一次 Execute remote control for points that user has turn on the remote control function. This api will be called by task scheduling, execute once for every 5 minutes
     * @summary 基于控制建议执行远程控制 Execute remote control based on control suggestions
     * @param {string} [tenantId] 租户ID tenant Id
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationControlPost(
      tenantId?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OptimizationControlPost(
        tenantId,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 控制建议值来自在线滚动优化模型当前时刻的模拟结果
     * @summary 获取当前时刻的控制建议值
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationControlSuggestionsGet(
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlSuggestionOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2OptimizationControlSuggestionsGet(
          currentTime,
          modelName,
          productLine,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取电耗的实际值与优化值，包括时间序列与累计值 Get real energy cost and optimized energy cost, including time-series data and accumulated value
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationEnergyCostCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnergyCostCompareData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2OptimizationEnergyCostCompareGet(
          startTime,
          endTime,
          modelName,
          productLine,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 该接口通过任务调度定时调用，每30分钟执行一次 This api will be called by task scheduling, execute once for every 30 minutes
     * @summary 生成吨水能耗的日统计结果和月统计结果，保存入库 Generate daily and monthly statistic result of energy cost per ton of water, and store in database
     * @param {string} [tenantId] 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationEnergyCostStatisticPost(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2OptimizationEnergyCostStatisticPost(tenantId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的objectName用于下载 Excel file will be stored to distributed file system, and objectName will be returned for the front-end to download the file
     * @summary 将指定时间段内的优化对比的所有数据统一导出到一个excel文件中 Export optimization compare result data of a certain period to one excel file
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationExportExcelGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OptimizationExportExcelGet(
        startTime,
        endTime,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取出水口水质，实测值与优化模拟值得对比信息 Get online data and optimization model result data on outlet
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationOutletCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompareOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OptimizationOutletCompareGet(
        startTime,
        endTime,
        modelName,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改某一控制项的远程控制与否 Modify remote control for a kind of control items
     * @param {SwitchControlInput} [switchControlInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OptimizationSwitchControlPost(
      switchControlInput?: SwitchControlInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OptimizationSwitchControlPost(
        switchControlInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * OptimizationApi - factory interface
 * @export
 */
export const OptimizationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OptimizationApiFp(configuration)
  return {
    /**
     *
     * @summary 获取优化控制点位上，实测值与优化模拟值的对比信息 Get online data and optimization model result data on control points
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<CompareOutput>> {
      return localVarFp
        .apiV2OptimizationControlCompareGet(startTime, endTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 针对用户设置的开启远程控制的控制建议点位，执行控制，由任务调度控制每五分钟执行一次 Execute remote control for points that user has turn on the remote control function. This api will be called by task scheduling, execute once for every 5 minutes
     * @summary 基于控制建议执行远程控制 Execute remote control based on control suggestions
     * @param {string} [tenantId] 租户ID tenant Id
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlPost(
      tenantId?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2OptimizationControlPost(tenantId, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 控制建议值来自在线滚动优化模型当前时刻的模拟结果
     * @summary 获取当前时刻的控制建议值
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationControlSuggestionsGet(
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<ControlSuggestionOutput>> {
      return localVarFp
        .apiV2OptimizationControlSuggestionsGet(currentTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取电耗的实际值与优化值，包括时间序列与累计值 Get real energy cost and optimized energy cost, including time-series data and accumulated value
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationEnergyCostCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<EnergyCostCompareData>> {
      return localVarFp
        .apiV2OptimizationEnergyCostCompareGet(startTime, endTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 该接口通过任务调度定时调用，每30分钟执行一次 This api will be called by task scheduling, execute once for every 30 minutes
     * @summary 生成吨水能耗的日统计结果和月统计结果，保存入库 Generate daily and monthly statistic result of energy cost per ton of water, and store in database
     * @param {string} [tenantId] 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationEnergyCostStatisticPost(
      tenantId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2OptimizationEnergyCostStatisticPost(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的objectName用于下载 Excel file will be stored to distributed file system, and objectName will be returned for the front-end to download the file
     * @summary 将指定时间段内的优化对比的所有数据统一导出到一个excel文件中 Export optimization compare result data of a certain period to one excel file
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationExportExcelGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV2OptimizationExportExcelGet(startTime, endTime, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取出水口水质，实测值与优化模拟值得对比信息 Get online data and optimization model result data on outlet
     * @param {string} [startTime] 开始时刻 start time
     * @param {string} [endTime] 结束时刻 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationOutletCompareGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<CompareOutput>> {
      return localVarFp
        .apiV2OptimizationOutletCompareGet(startTime, endTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改某一控制项的远程控制与否 Modify remote control for a kind of control items
     * @param {SwitchControlInput} [switchControlInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OptimizationSwitchControlPost(
      switchControlInput?: SwitchControlInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2OptimizationSwitchControlPost(switchControlInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OptimizationApi - object-oriented interface
 * @export
 * @class OptimizationApi
 * @extends {BaseAPI}
 */
export class OptimizationApi extends BaseAPI {
  /**
   *
   * @summary 获取优化控制点位上，实测值与优化模拟值的对比信息 Get online data and optimization model result data on control points
   * @param {string} [startTime] 开始时刻 start time
   * @param {string} [endTime] 结束时刻 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线编码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationControlCompareGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationControlCompareGet(startTime, endTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 针对用户设置的开启远程控制的控制建议点位，执行控制，由任务调度控制每五分钟执行一次 Execute remote control for points that user has turn on the remote control function. This api will be called by task scheduling, execute once for every 5 minutes
   * @summary 基于控制建议执行远程控制 Execute remote control based on control suggestions
   * @param {string} [tenantId] 租户ID tenant Id
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationControlPost(
    tenantId?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationControlPost(tenantId, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 控制建议值来自在线滚动优化模型当前时刻的模拟结果
   * @summary 获取当前时刻的控制建议值
   * @param {string} [currentTime] 当前时刻 current time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线编码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationControlSuggestionsGet(
    currentTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationControlSuggestionsGet(currentTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取电耗的实际值与优化值，包括时间序列与累计值 Get real energy cost and optimized energy cost, including time-series data and accumulated value
   * @param {string} [startTime] 开始时刻 start time
   * @param {string} [endTime] 结束时刻 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线编码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationEnergyCostCompareGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationEnergyCostCompareGet(startTime, endTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 该接口通过任务调度定时调用，每30分钟执行一次 This api will be called by task scheduling, execute once for every 30 minutes
   * @summary 生成吨水能耗的日统计结果和月统计结果，保存入库 Generate daily and monthly statistic result of energy cost per ton of water, and store in database
   * @param {string} [tenantId] 租户ID tenant id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationEnergyCostStatisticPost(tenantId?: string, options?: AxiosRequestConfig) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationEnergyCostStatisticPost(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 文件会被保存到分布式文件系统，接口会返回文件的objectName用于下载 Excel file will be stored to distributed file system, and objectName will be returned for the front-end to download the file
   * @summary 将指定时间段内的优化对比的所有数据统一导出到一个excel文件中 Export optimization compare result data of a certain period to one excel file
   * @param {string} [startTime] 开始时刻 start time
   * @param {string} [endTime] 结束时刻 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationExportExcelGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationExportExcelGet(startTime, endTime, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取出水口水质，实测值与优化模拟值得对比信息 Get online data and optimization model result data on outlet
   * @param {string} [startTime] 开始时刻 start time
   * @param {string} [endTime] 结束时刻 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线编码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationOutletCompareGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationOutletCompareGet(startTime, endTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改某一控制项的远程控制与否 Modify remote control for a kind of control items
   * @param {SwitchControlInput} [switchControlInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OptimizationApi
   */
  public apiV2OptimizationSwitchControlPost(
    switchControlInput?: SwitchControlInput,
    options?: AxiosRequestConfig,
  ) {
    return OptimizationApiFp(this.configuration)
      .apiV2OptimizationSwitchControlPost(switchControlInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
