/* eslint-disable */
/**
 * wwtp-paas-main-bus-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AbftProcessStatusOutput } from '../models'
// @ts-ignore
import { AssemblyConfigOutput } from '../models'
// @ts-ignore
import { CdAdditionRateOutput } from '../models'
// @ts-ignore
import { DosingLogOutput } from '../models'
// @ts-ignore
import { DosingParamSettingDto } from '../models'
// @ts-ignore
import { DosingParameterOutput } from '../models'
// @ts-ignore
import { DosingStatisticDailysOutput } from '../models'
// @ts-ignore
import { InletLoadOutput } from '../models'
// @ts-ignore
import { OutletTnOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SingleCodeDatasOutput } from '../models'
/**
 * IntelligentDenitrificationApi - axios parameter creator
 * @export
 */
export const IntelligentDenitrificationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationDownloadDosingLogGet: async (
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/DownloadDosingLog`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (downloadKey !== undefined) {
        localVarQueryParameter['downloadKey'] = downloadKey
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationDownloadDosingStatisticDailyGet: async (
      category?: number,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/DownloadDosingStatisticDaily`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (downloadKey !== undefined) {
        localVarQueryParameter['downloadKey'] = downloadKey
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取生化池工艺运行状态 Get biochemical pool operation status
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetABFTProcessStatusGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetABFTProcessStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetAnoxicNO3Get: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetAnoxicNO3`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据展示类别获取点位配置信息
     * @summary 根据展示类别获取点位配置信息
     * @param {number} [displayTypeEnum] 展示枚举
     * @param {string} [productLine] 产线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetAssemblyConfigsGet: async (
      displayTypeEnum?: number,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetAssemblyConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (displayTypeEnum !== undefined) {
        localVarQueryParameter['displayTypeEnum'] = displayTypeEnum
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取碳源投加速率 Get carbon source dosing rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetCDAdditionRateGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetCDAdditionRate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取反硝化速率 Get denitrification rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDenitrificationRateGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetDenitrificationRate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定时间段内的加药报表 Get dosing logs of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingLogGet: async (
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetDosingLog`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取加药参数 Get dosing paramters
     * @param {number} [category] 加药类别 dosage type
     * @param {string} [productionLineCode] 产线编号 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingParameterGet: async (
      category?: number,
      productionLineCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetDosingParameter`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (productionLineCode !== undefined) {
        localVarQueryParameter['productionLineCode'] = productionLineCode
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingStatisticDailysGet: async (
      category?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetDosingStatisticDailys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取进水负荷 Get inlet water quality load data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetInletLoadGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetInletLoad`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取出水总氮 Get total effluent nitrogen concentration
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetOutletTNGet: async (
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/GetOutletTN`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存加药参数 Save dosing parameters
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationSaveDosingParameterPost: async (
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/IntelligentDenitrification/SaveDosingParameter`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingParamSettingDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntelligentDenitrificationApi - functional programming interface
 * @export
 */
export const IntelligentDenitrificationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntelligentDenitrificationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationDownloadDosingLogGet(
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationDownloadDosingLogGet(
          category,
          productionLine,
          startTime,
          endTime,
          downloadKey,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
          category,
          startTime,
          endTime,
          downloadKey,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取生化池工艺运行状态 Get biochemical pool operation status
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetABFTProcessStatusGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AbftProcessStatusOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetABFTProcessStatusGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetAnoxicNO3Get(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleCodeDatasOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetAnoxicNO3Get(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据展示类别获取点位配置信息
     * @summary 根据展示类别获取点位配置信息
     * @param {number} [displayTypeEnum] 展示枚举
     * @param {string} [productLine] 产线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetAssemblyConfigsGet(
      displayTypeEnum?: number,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssemblyConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetAssemblyConfigsGet(
          displayTypeEnum,
          productLine,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取碳源投加速率 Get carbon source dosing rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetCDAdditionRateGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CdAdditionRateOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetCDAdditionRateGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取反硝化速率 Get denitrification rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetDenitrificationRateGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleCodeDatasOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetDenitrificationRateGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定时间段内的加药报表 Get dosing logs of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetDosingLogGet(
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DosingLogOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetDosingLogGet(
          category,
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取加药参数 Get dosing paramters
     * @param {number} [category] 加药类别 dosage type
     * @param {string} [productionLineCode] 产线编号 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetDosingParameterGet(
      category?: number,
      productionLineCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingParameterOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetDosingParameterGet(
          category,
          productionLineCode,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetDosingStatisticDailysGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetDosingStatisticDailysGet(
          category,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取进水负荷 Get inlet water quality load data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetInletLoadGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InletLoadOutput>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetInletLoadGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取出水总氮 Get total effluent nitrogen concentration
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationGetOutletTNGet(
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutletTnOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationGetOutletTNGet(
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存加药参数 Save dosing parameters
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiIntelligentDenitrificationSaveDosingParameterPost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiIntelligentDenitrificationSaveDosingParameterPost(
          dosingParamSettingDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntelligentDenitrificationApi - factory interface
 * @export
 */
export const IntelligentDenitrificationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IntelligentDenitrificationApiFp(configuration)
  return {
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationDownloadDosingLogGet(
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiIntelligentDenitrificationDownloadDosingLogGet(
          category,
          productionLine,
          startTime,
          endTime,
          downloadKey,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [downloadKey] 下载key download key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      downloadKey?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
          category,
          startTime,
          endTime,
          downloadKey,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取生化池工艺运行状态 Get biochemical pool operation status
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetABFTProcessStatusGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<AbftProcessStatusOutput>> {
      return localVarFp
        .apiIntelligentDenitrificationGetABFTProcessStatusGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetAnoxicNO3Get(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<SingleCodeDatasOutput> {
      return localVarFp
        .apiIntelligentDenitrificationGetAnoxicNO3Get(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据展示类别获取点位配置信息
     * @summary 根据展示类别获取点位配置信息
     * @param {number} [displayTypeEnum] 展示枚举
     * @param {string} [productLine] 产线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetAssemblyConfigsGet(
      displayTypeEnum?: number,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<AssemblyConfigOutput>> {
      return localVarFp
        .apiIntelligentDenitrificationGetAssemblyConfigsGet(displayTypeEnum, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取碳源投加速率 Get carbon source dosing rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetCDAdditionRateGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<CdAdditionRateOutput> {
      return localVarFp
        .apiIntelligentDenitrificationGetCDAdditionRateGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取反硝化速率 Get denitrification rate data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDenitrificationRateGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<SingleCodeDatasOutput> {
      return localVarFp
        .apiIntelligentDenitrificationGetDenitrificationRateGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定时间段内的加药报表 Get dosing logs of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [productionLine] 产线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingLogGet(
      category?: number,
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<DosingLogOutput> {
      return localVarFp
        .apiIntelligentDenitrificationGetDosingLogGet(
          category,
          productionLine,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取加药参数 Get dosing paramters
     * @param {number} [category] 加药类别 dosage type
     * @param {string} [productionLineCode] 产线编号 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingParameterGet(
      category?: number,
      productionLineCode?: string,
      options?: any,
    ): AxiosPromise<Array<DosingParameterOutput>> {
      return localVarFp
        .apiIntelligentDenitrificationGetDosingParameterGet(category, productionLineCode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {number} [category] 加药类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetDosingStatisticDailysGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysOutput>> {
      return localVarFp
        .apiIntelligentDenitrificationGetDosingStatisticDailysGet(
          category,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取进水负荷 Get inlet water quality load data
     * @param {string} [productionLine] 产线编号 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetInletLoadGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<InletLoadOutput>> {
      return localVarFp
        .apiIntelligentDenitrificationGetInletLoadGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取出水总氮 Get total effluent nitrogen concentration
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationGetOutletTNGet(
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<OutletTnOutput> {
      return localVarFp
        .apiIntelligentDenitrificationGetOutletTNGet(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存加药参数 Save dosing parameters
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiIntelligentDenitrificationSaveDosingParameterPost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiIntelligentDenitrificationSaveDosingParameterPost(dosingParamSettingDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntelligentDenitrificationApi - object-oriented interface
 * @export
 * @class IntelligentDenitrificationApi
 * @extends {BaseAPI}
 */
export class IntelligentDenitrificationApi extends BaseAPI {
  /**
   *
   * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
   * @param {number} [category] 加药类型 dosage type
   * @param {string} [productionLine] 产线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [downloadKey] 下载key download key
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationDownloadDosingLogGet(
    category?: number,
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    downloadKey?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationDownloadDosingLogGet(
        category,
        productionLine,
        startTime,
        endTime,
        downloadKey,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
   * @param {number} [category] 加药类型 dosage type
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [downloadKey] 下载key download key
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
    category?: number,
    startTime?: string,
    endTime?: string,
    downloadKey?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationDownloadDosingStatisticDailyGet(
        category,
        startTime,
        endTime,
        downloadKey,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取生化池工艺运行状态 Get biochemical pool operation status
   * @param {string} [productionLine] 产线编号 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetABFTProcessStatusGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetABFTProcessStatusGet(
        productionLine,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取缺氧区出水硝酸盐 Get anoxic zone effluent nitrate concentration
   * @param {string} [productionLine] 产线编号 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetAnoxicNO3Get(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetAnoxicNO3Get(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据展示类别获取点位配置信息
   * @summary 根据展示类别获取点位配置信息
   * @param {number} [displayTypeEnum] 展示枚举
   * @param {string} [productLine] 产线
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetAssemblyConfigsGet(
    displayTypeEnum?: number,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetAssemblyConfigsGet(displayTypeEnum, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取碳源投加速率 Get carbon source dosing rate data
   * @param {string} [productionLine] 产线编号 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetCDAdditionRateGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetCDAdditionRateGet(
        productionLine,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取反硝化速率 Get denitrification rate data
   * @param {string} [productionLine] 产线编号 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetDenitrificationRateGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetDenitrificationRateGet(
        productionLine,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定时间段内的加药报表 Get dosing logs of a certain period
   * @param {number} [category] 加药类型 dosage type
   * @param {string} [productionLine] 产线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetDosingLogGet(
    category?: number,
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetDosingLogGet(
        category,
        productionLine,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取加药参数 Get dosing paramters
   * @param {number} [category] 加药类别 dosage type
   * @param {string} [productionLineCode] 产线编号 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetDosingParameterGet(
    category?: number,
    productionLineCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetDosingParameterGet(category, productionLineCode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
   * @param {number} [category] 加药类型 dosage type
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetDosingStatisticDailysGet(
    category?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetDosingStatisticDailysGet(
        category,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取进水负荷 Get inlet water quality load data
   * @param {string} [productionLine] 产线编号 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetInletLoadGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetInletLoadGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取出水总氮 Get total effluent nitrogen concentration
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationGetOutletTNGet(
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationGetOutletTNGet(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存加药参数 Save dosing parameters
   * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentDenitrificationApi
   */
  public apiIntelligentDenitrificationSaveDosingParameterPost(
    dosingParamSettingDto?: Array<DosingParamSettingDto>,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentDenitrificationApiFp(this.configuration)
      .apiIntelligentDenitrificationSaveDosingParameterPost(dosingParamSettingDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
