/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CatalysisBfOutput } from '../models'
// @ts-ignore
import { CatalysisTankOutput } from '../models'
// @ts-ignore
import { CdAdditionRateOutput } from '../models'
// @ts-ignore
import { DosingParamSettingDto } from '../models'
// @ts-ignore
import { DosingStatisticDailysOutput } from '../models'
// @ts-ignore
import { ExecutePlcInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * IntelligentMccrApi - axios parameter creator
 * @export
 */
export const IntelligentMccrApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrAddRatesGet: async (
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/add-rates`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 计算指定产线的MCCR加药量 calculate MCCR\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCalculateMccrDosagePost: async (
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/calculate-mccr-dosage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingParamSettingDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCatalysisBeforeAfterGet: async (
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/catalysis-before-after`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCatalysisTankDataGet: async (
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/catalysis-tank-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDailyStatisticsExportGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/daily-statistics/export`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDailyStatisticsGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/daily-statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDosingLogExportGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/dosing-log/export`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrPlcControlByProductLinePost: async (
      executePlcInput?: ExecutePlcInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/plc-control-by-product-line`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        executePlcInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时刻 current time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrPlcControlGet: async (
      currentTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-mccr/plc-control`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (currentTime !== undefined) {
        localVarQueryParameter['currentTime'] = currentTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntelligentMccrApi - functional programming interface
 * @export
 */
export const IntelligentMccrApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntelligentMccrApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrAddRatesGet(
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CdAdditionRateOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2IntelligentMccrAddRatesGet(
        productionLine,
        category,
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 计算指定产线的MCCR加药量 calculate MCCR\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrCalculateMccrDosagePost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrCalculateMccrDosagePost(
          dosingParamSettingDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrCatalysisBeforeAfterGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalysisBfOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrCatalysisBeforeAfterGet(
          productLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrCatalysisTankDataGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalysisTankOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrCatalysisTankDataGet(
          productLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrDailyStatisticsExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrDailyStatisticsExportGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrDailyStatisticsGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrDailyStatisticsGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrDosingLogExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrDosingLogExportGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrPlcControlByProductLinePost(
      executePlcInput?: ExecutePlcInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentMccrPlcControlByProductLinePost(
          executePlcInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时刻 current time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentMccrPlcControlGet(
      currentTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2IntelligentMccrPlcControlGet(
        currentTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntelligentMccrApi - factory interface
 * @export
 */
export const IntelligentMccrApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IntelligentMccrApiFp(configuration)
  return {
    /**
     *
     * @summary 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrAddRatesGet(
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<CdAdditionRateOutput> {
      return localVarFp
        .apiV2IntelligentMccrAddRatesGet(productionLine, category, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 计算指定产线的MCCR加药量 calculate MCCR\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCalculateMccrDosagePost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2IntelligentMccrCalculateMccrDosagePost(dosingParamSettingDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCatalysisBeforeAfterGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<CatalysisBfOutput>> {
      return localVarFp
        .apiV2IntelligentMccrCatalysisBeforeAfterGet(productLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
     * @param {string} [productLine]
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrCatalysisTankDataGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<CatalysisTankOutput>> {
      return localVarFp
        .apiV2IntelligentMccrCatalysisTankDataGet(productLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDailyStatisticsExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV2IntelligentMccrDailyStatisticsExportGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDailyStatisticsGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysOutput>> {
      return localVarFp
        .apiV2IntelligentMccrDailyStatisticsGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrDosingLogExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV2IntelligentMccrDosingLogExportGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrPlcControlByProductLinePost(
      executePlcInput?: ExecutePlcInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2IntelligentMccrPlcControlByProductLinePost(executePlcInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时刻 current time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentMccrPlcControlGet(currentTime?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV2IntelligentMccrPlcControlGet(currentTime, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntelligentMccrApi - object-oriented interface
 * @export
 * @class IntelligentMccrApi
 * @extends {BaseAPI}
 */
export class IntelligentMccrApi extends BaseAPI {
  /**
   *
   * @summary 获取铁催化剂加药，或者双氧水加药的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of iron catalysts or hydrogen peroxide
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {number} [category] 药剂类型 dosage type
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrAddRatesGet(
    productionLine?: string,
    category?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrAddRatesGet(productionLine, category, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 计算指定产线的MCCR加药量 calculate MCCR\'s dosage by product line
   * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrCalculateMccrDosagePost(
    dosingParamSettingDto?: Array<DosingParamSettingDto>,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrCalculateMccrDosagePost(dosingParamSettingDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取催化反应前后的浊度、电导 Get online turbidity and conductivity data before and after catalysis
   * @param {string} [productLine]
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrCatalysisBeforeAfterGet(
    productLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrCatalysisBeforeAfterGet(productLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取催化池的进水量、pH、ORP数据 Get online inflow, pH, ORP data in the catalysis pool
   * @param {string} [productLine]
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrCatalysisTankDataGet(
    productLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrCatalysisTankDataGet(productLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrDailyStatisticsExportGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrDailyStatisticsExportGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrDailyStatisticsGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrDailyStatisticsGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrDosingLogExportGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrDosingLogExportGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 执行指定产线的MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs for one product line
   * @param {ExecutePlcInput} [executePlcInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrPlcControlByProductLinePost(
    executePlcInput?: ExecutePlcInput,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrPlcControlByProductLinePost(executePlcInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 执行MCCR加药plc控制，同时写入加药日志 Execute MCCR dosing plc control and write dosing logs
   * @param {string} [currentTime] 当前时刻 current time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentMccrApi
   */
  public apiV2IntelligentMccrPlcControlGet(currentTime?: string, options?: AxiosRequestConfig) {
    return IntelligentMccrApiFp(this.configuration)
      .apiV2IntelligentMccrPlcControlGet(currentTime, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
