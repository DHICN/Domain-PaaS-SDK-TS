/* eslint-disable */
/**
 * 污水业务中台领域服务-v4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { BaseDynamicOutput } from '../models'
// @ts-ignore
import { DeleteScenarioInput } from '../models'
// @ts-ignore
import { EntireProcessWqOut } from '../models'
// @ts-ignore
import { ModelParam } from '../models'
// @ts-ignore
import { OptimizationConfig } from '../models'
// @ts-ignore
import { QueryBiochemicaltanksOutput } from '../models'
// @ts-ignore
import { QueryControlParamCompareInput } from '../models'
// @ts-ignore
import { QueryControlParamCompareOutput } from '../models'
// @ts-ignore
import { QueryIndicatorStatisticOutput } from '../models'
// @ts-ignore
import { QueryInletDataOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { ResultParam } from '../models'
// @ts-ignore
import { SaveInletDataInput } from '../models'
// @ts-ignore
import { SaveParamInput } from '../models'
// @ts-ignore
import { SimResultsOutupt } from '../models'
/**
 * ProNumSimLabApi - axios parameter creator
 * @export
 */
export const ProNumSimLabApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary /api/app/pro-num-sim-lab/optimization-config-by-type
     * @param {number} [displayType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppProNumSimLabOptimizationConfigByTypeGet: async (
      displayType?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/pro-num-sim-lab/optimization-config-by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (displayType !== undefined) {
        localVarQueryParameter['displayType'] = displayType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取方案的出水水质结果数据 Get outlet water quality time-series result of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProNumSimLabSimResultsGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ProNumSimLab/SimResults`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生化池查询 Get biochemical pool config data
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ConfigBiochemicaltanksGet: async (
      productLine?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/config/biochemicaltanks`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['ProductLine'] = productLine
      }

      if (modelName !== undefined) {
        localVarQueryParameter['ModelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 只有多个方案之间设置不同的参数才会返回 Only parameters with difference setting values among the scenarios will be returned
     * @summary 多方案控制参数对比 Get several scenarios\' control paramters for comparison
     * @param {QueryControlParamCompareInput} [queryControlParamCompareInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabCompareControlParamPost: async (
      queryControlParamCompareInput?: QueryControlParamCompareInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/compare/control-param`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryControlParamCompareInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 单个工艺线单个生化池指标统计查询 Get scenario\'s statistic result of all the indicators on a certain biochemical pool of a specified product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [tankNo] 生化池序号 biochemical pool index
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultIndicatorStatisticGet: async (
      scenarioId?: string,
      productLine?: string,
      tankNo?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/result/indicator-statistic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (productLine !== undefined) {
        localVarQueryParameter['ProductLine'] = productLine
      }

      if (tankNo !== undefined) {
        localVarQueryParameter['TankNo'] = tankNo
      }

      if (modelName !== undefined) {
        localVarQueryParameter['ModelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取单个方案MABR池水质项的分层时间序列数据 Get scenario\'s water quality time-series data in MABR layers
     * @param {string} [scenarioId]
     * @param {string} [productLine]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultMabrLayerDataGet: async (
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/result/mabr-layer-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 单个工艺线水质全流程查询 Get scenario\'s water quality entire process result data of a certain product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [code] 系统点位 system code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultTsByProductlineGet: async (
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      code?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/result/ts-by-productline`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (productLine !== undefined) {
        localVarQueryParameter['ProductLine'] = productLine
      }

      if (modelName !== undefined) {
        localVarQueryParameter['ModelName'] = modelName
      }

      if (code !== undefined) {
        localVarQueryParameter['Code'] = code
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除方案，同时删除方案相关的设置数据 Delete scenario as well as its corresponding setting data by scenario ids
     * @param {DeleteScenarioInput} [deleteScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioDeletePost: async (
      deleteScenarioInput?: DeleteScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询方案进水数据 Get scenario\'s inlet time-series data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [inlet] 进水点 inlet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataGet: async (
      scenarioId?: string,
      inlet?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/inlet-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (inlet !== undefined) {
        localVarQueryParameter['Inlet'] = inlet
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存进水数据到方案（入数据库） Save inlet time-series data of a scenario in database
     * @param {Array<SaveInletDataInput>} [saveInletDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataSavePost: async (
      saveInletDataInput?: Array<SaveInletDataInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/inlet-data/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveInletDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 进水点文件模板下载 Download the inlet time-series data excel file template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataTemplateDownloadPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/inlet-data-template/download`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 进水点数据文件excel上传 Upload inlet time-series data in an excel file
     * @param {any} [excel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataTemplateUploadPost: async (
      excel?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/inlet-data-template/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (excel !== undefined) {
        localVarFormParams.append('Excel', excel as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询SCADA数据 Get inlet time-series data from SCADA
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletScadaGet: async (
      inlet?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/inlet/scada`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (inlet !== undefined) {
        localVarQueryParameter['Inlet'] = inlet
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询方案参数设置 Get scenario\'s parameter setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioParamGet: async (
      scenarioId?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/param`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (productLine !== undefined) {
        localVarQueryParameter['ProductLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存方案参数设置 Save scenario\'s parameter setting data
     * @param {Array<SaveParamInput>} [saveParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioParamSavePost: async (
      saveParamInput?: Array<SaveParamInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/param/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveParamInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询方案结果配置 Get scenario\'s result setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioResultSettingGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/result-setting`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存方案结果配置 Save scenario\'s result setting data
     * @param {ResultParam} [resultParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioResultSettingSavePost: async (
      resultParam?: ResultParam,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/result-setting/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        resultParam,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取单个预案模拟结果
     * @summary 获取方案的生化区电耗或碳足迹信息
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {number} [subType] 结果类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioScenarioResultGet: async (
      scenarioId?: string,
      subType?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/scenario-result`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (subType !== undefined) {
        localVarQueryParameter['subType'] = subType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 能够进行对比的方案需满足两个条件，分别是时间范围一致和结果配置一致 scenarios that can be compared must have consistent time period and result setting
     * @summary 查询与指定方案的结果配置一样的方案列表 Get scenarios which can be compared with the specified scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioScenariosForCompareGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/simulation-lab/scenario/scenarios-for-compare`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProNumSimLabApi - functional programming interface
 * @export
 */
export const ProNumSimLabApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProNumSimLabApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary /api/app/pro-num-sim-lab/optimization-config-by-type
     * @param {number} [displayType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppProNumSimLabOptimizationConfigByTypeGet(
      displayType?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationConfig>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppProNumSimLabOptimizationConfigByTypeGet(
          displayType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取方案的出水水质结果数据 Get outlet water quality time-series result of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiProNumSimLabSimResultsGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimResultsOutupt>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiProNumSimLabSimResultsGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 生化池查询 Get biochemical pool config data
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ConfigBiochemicaltanksGet(
      productLine?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryBiochemicaltanksOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ConfigBiochemicaltanksGet(
        productLine,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 只有多个方案之间设置不同的参数才会返回 Only parameters with difference setting values among the scenarios will be returned
     * @summary 多方案控制参数对比 Get several scenarios\' control paramters for comparison
     * @param {QueryControlParamCompareInput} [queryControlParamCompareInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabCompareControlParamPost(
      queryControlParamCompareInput?: QueryControlParamCompareInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<QueryControlParamCompareOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabCompareControlParamPost(
          queryControlParamCompareInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 单个工艺线单个生化池指标统计查询 Get scenario\'s statistic result of all the indicators on a certain biochemical pool of a specified product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [tankNo] 生化池序号 biochemical pool index
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabResultIndicatorStatisticGet(
      scenarioId?: string,
      productLine?: string,
      tankNo?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<QueryIndicatorStatisticOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabResultIndicatorStatisticGet(
          scenarioId,
          productLine,
          tankNo,
          modelName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取单个方案MABR池水质项的分层时间序列数据 Get scenario\'s water quality time-series data in MABR layers
     * @param {string} [scenarioId]
     * @param {string} [productLine]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabResultMabrLayerDataGet(
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntireProcessWqOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabResultMabrLayerDataGet(
          scenarioId,
          productLine,
          modelName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 单个工艺线水质全流程查询 Get scenario\'s water quality entire process result data of a certain product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [code] 系统点位 system code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabResultTsByProductlineGet(
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      code?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntireProcessWqOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabResultTsByProductlineGet(
          scenarioId,
          productLine,
          modelName,
          code,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除方案，同时删除方案相关的设置数据 Delete scenario as well as its corresponding setting data by scenario ids
     * @param {DeleteScenarioInput} [deleteScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioDeletePost(
      deleteScenarioInput?: DeleteScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioDeletePost(
          deleteScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询方案进水数据 Get scenario\'s inlet time-series data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [inlet] 进水点 inlet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioInletDataGet(
      scenarioId?: string,
      inlet?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryInletDataOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioInletDataGet(
          scenarioId,
          inlet,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存进水数据到方案（入数据库） Save inlet time-series data of a scenario in database
     * @param {Array<SaveInletDataInput>} [saveInletDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioInletDataSavePost(
      saveInletDataInput?: Array<SaveInletDataInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioInletDataSavePost(
          saveInletDataInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 进水点文件模板下载 Download the inlet time-series data excel file template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioInletDataTemplateDownloadPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioInletDataTemplateDownloadPost(
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 进水点数据文件excel上传 Upload inlet time-series data in an excel file
     * @param {any} [excel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioInletDataTemplateUploadPost(
      excel?: any,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SaveInletDataInput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioInletDataTemplateUploadPost(
          excel,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询SCADA数据 Get inlet time-series data from SCADA
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioInletScadaGet(
      inlet?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryInletDataOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioInletScadaGet(
          inlet,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询方案参数设置 Get scenario\'s parameter setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioParamGet(
      scenarioId?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelParam>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2SimulationLabScenarioParamGet(
        scenarioId,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存方案参数设置 Save scenario\'s parameter setting data
     * @param {Array<SaveParamInput>} [saveParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioParamSavePost(
      saveParamInput?: Array<SaveParamInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioParamSavePost(
          saveParamInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询方案结果配置 Get scenario\'s result setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioResultSettingGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultParam>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioResultSettingGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存方案结果配置 Save scenario\'s result setting data
     * @param {ResultParam} [resultParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioResultSettingSavePost(
      resultParam?: ResultParam,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioResultSettingSavePost(
          resultParam,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取单个预案模拟结果
     * @summary 获取方案的生化区电耗或碳足迹信息
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {number} [subType] 结果类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioScenarioResultGet(
      scenarioId?: string,
      subType?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseDynamicOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioScenarioResultGet(
          scenarioId,
          subType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 能够进行对比的方案需满足两个条件，分别是时间范围一致和结果配置一致 scenarios that can be compared must have consistent time period and result setting
     * @summary 查询与指定方案的结果配置一样的方案列表 Get scenarios which can be compared with the specified scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SimulationLabScenarioScenariosForCompareGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SimulationLabScenarioScenariosForCompareGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ProNumSimLabApi - factory interface
 * @export
 */
export const ProNumSimLabApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProNumSimLabApiFp(configuration)
  return {
    /**
     *
     * @summary /api/app/pro-num-sim-lab/optimization-config-by-type
     * @param {number} [displayType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppProNumSimLabOptimizationConfigByTypeGet(
      displayType?: number,
      options?: any,
    ): AxiosPromise<Array<OptimizationConfig>> {
      return localVarFp
        .apiAppProNumSimLabOptimizationConfigByTypeGet(displayType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取方案的出水水质结果数据 Get outlet water quality time-series result of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiProNumSimLabSimResultsGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<SimResultsOutupt>> {
      return localVarFp
        .apiProNumSimLabSimResultsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生化池查询 Get biochemical pool config data
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ConfigBiochemicaltanksGet(
      productLine?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<QueryBiochemicaltanksOutput>> {
      return localVarFp
        .apiV2ConfigBiochemicaltanksGet(productLine, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 只有多个方案之间设置不同的参数才会返回 Only parameters with difference setting values among the scenarios will be returned
     * @summary 多方案控制参数对比 Get several scenarios\' control paramters for comparison
     * @param {QueryControlParamCompareInput} [queryControlParamCompareInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabCompareControlParamPost(
      queryControlParamCompareInput?: QueryControlParamCompareInput,
      options?: any,
    ): AxiosPromise<Array<QueryControlParamCompareOutput>> {
      return localVarFp
        .apiV2SimulationLabCompareControlParamPost(queryControlParamCompareInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 单个工艺线单个生化池指标统计查询 Get scenario\'s statistic result of all the indicators on a certain biochemical pool of a specified product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [tankNo] 生化池序号 biochemical pool index
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultIndicatorStatisticGet(
      scenarioId?: string,
      productLine?: string,
      tankNo?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<QueryIndicatorStatisticOutput>> {
      return localVarFp
        .apiV2SimulationLabResultIndicatorStatisticGet(
          scenarioId,
          productLine,
          tankNo,
          modelName,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取单个方案MABR池水质项的分层时间序列数据 Get scenario\'s water quality time-series data in MABR layers
     * @param {string} [scenarioId]
     * @param {string} [productLine]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultMabrLayerDataGet(
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<EntireProcessWqOut>> {
      return localVarFp
        .apiV2SimulationLabResultMabrLayerDataGet(scenarioId, productLine, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 单个工艺线水质全流程查询 Get scenario\'s water quality entire process result data of a certain product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [code] 系统点位 system code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabResultTsByProductlineGet(
      scenarioId?: string,
      productLine?: string,
      modelName?: string,
      code?: string,
      options?: any,
    ): AxiosPromise<Array<EntireProcessWqOut>> {
      return localVarFp
        .apiV2SimulationLabResultTsByProductlineGet(
          scenarioId,
          productLine,
          modelName,
          code,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除方案，同时删除方案相关的设置数据 Delete scenario as well as its corresponding setting data by scenario ids
     * @param {DeleteScenarioInput} [deleteScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioDeletePost(
      deleteScenarioInput?: DeleteScenarioInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2SimulationLabScenarioDeletePost(deleteScenarioInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询方案进水数据 Get scenario\'s inlet time-series data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [inlet] 进水点 inlet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataGet(
      scenarioId?: string,
      inlet?: string,
      options?: any,
    ): AxiosPromise<QueryInletDataOutput> {
      return localVarFp
        .apiV2SimulationLabScenarioInletDataGet(scenarioId, inlet, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存进水数据到方案（入数据库） Save inlet time-series data of a scenario in database
     * @param {Array<SaveInletDataInput>} [saveInletDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataSavePost(
      saveInletDataInput?: Array<SaveInletDataInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2SimulationLabScenarioInletDataSavePost(saveInletDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 进水点文件模板下载 Download the inlet time-series data excel file template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataTemplateDownloadPost(options?: any): AxiosPromise<void> {
      return localVarFp
        .apiV2SimulationLabScenarioInletDataTemplateDownloadPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 进水点数据文件excel上传 Upload inlet time-series data in an excel file
     * @param {any} [excel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletDataTemplateUploadPost(
      excel?: any,
      options?: any,
    ): AxiosPromise<Array<SaveInletDataInput>> {
      return localVarFp
        .apiV2SimulationLabScenarioInletDataTemplateUploadPost(excel, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询SCADA数据 Get inlet time-series data from SCADA
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioInletScadaGet(
      inlet?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<QueryInletDataOutput> {
      return localVarFp
        .apiV2SimulationLabScenarioInletScadaGet(inlet, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询方案参数设置 Get scenario\'s parameter setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioParamGet(
      scenarioId?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<ModelParam>> {
      return localVarFp
        .apiV2SimulationLabScenarioParamGet(scenarioId, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存方案参数设置 Save scenario\'s parameter setting data
     * @param {Array<SaveParamInput>} [saveParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioParamSavePost(
      saveParamInput?: Array<SaveParamInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2SimulationLabScenarioParamSavePost(saveParamInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询方案结果配置 Get scenario\'s result setting data
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioResultSettingGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<ResultParam> {
      return localVarFp
        .apiV2SimulationLabScenarioResultSettingGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存方案结果配置 Save scenario\'s result setting data
     * @param {ResultParam} [resultParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioResultSettingSavePost(
      resultParam?: ResultParam,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2SimulationLabScenarioResultSettingSavePost(resultParam, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取单个预案模拟结果
     * @summary 获取方案的生化区电耗或碳足迹信息
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {number} [subType] 结果类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioScenarioResultGet(
      scenarioId?: string,
      subType?: number,
      options?: any,
    ): AxiosPromise<BaseDynamicOutput> {
      return localVarFp
        .apiV2SimulationLabScenarioScenarioResultGet(scenarioId, subType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 能够进行对比的方案需满足两个条件，分别是时间范围一致和结果配置一致 scenarios that can be compared must have consistent time period and result setting
     * @summary 查询与指定方案的结果配置一样的方案列表 Get scenarios which can be compared with the specified scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SimulationLabScenarioScenariosForCompareGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .apiV2SimulationLabScenarioScenariosForCompareGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ProNumSimLabApi - object-oriented interface
 * @export
 * @class ProNumSimLabApi
 * @extends {BaseAPI}
 */
export class ProNumSimLabApi extends BaseAPI {
  /**
   *
   * @summary /api/app/pro-num-sim-lab/optimization-config-by-type
   * @param {number} [displayType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiAppProNumSimLabOptimizationConfigByTypeGet(
    displayType?: number,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiAppProNumSimLabOptimizationConfigByTypeGet(displayType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取方案的出水水质结果数据 Get outlet water quality time-series result of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiProNumSimLabSimResultsGet(scenarioId?: string, options?: AxiosRequestConfig) {
    return ProNumSimLabApiFp(this.configuration)
      .apiProNumSimLabSimResultsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生化池查询 Get biochemical pool config data
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2ConfigBiochemicaltanksGet(
    productLine?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2ConfigBiochemicaltanksGet(productLine, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 只有多个方案之间设置不同的参数才会返回 Only parameters with difference setting values among the scenarios will be returned
   * @summary 多方案控制参数对比 Get several scenarios\' control paramters for comparison
   * @param {QueryControlParamCompareInput} [queryControlParamCompareInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabCompareControlParamPost(
    queryControlParamCompareInput?: QueryControlParamCompareInput,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabCompareControlParamPost(queryControlParamCompareInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 单个工艺线单个生化池指标统计查询 Get scenario\'s statistic result of all the indicators on a certain biochemical pool of a specified product line
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {string} [tankNo] 生化池序号 biochemical pool index
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabResultIndicatorStatisticGet(
    scenarioId?: string,
    productLine?: string,
    tankNo?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabResultIndicatorStatisticGet(
        scenarioId,
        productLine,
        tankNo,
        modelName,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取单个方案MABR池水质项的分层时间序列数据 Get scenario\'s water quality time-series data in MABR layers
   * @param {string} [scenarioId]
   * @param {string} [productLine]
   * @param {string} [modelName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabResultMabrLayerDataGet(
    scenarioId?: string,
    productLine?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabResultMabrLayerDataGet(scenarioId, productLine, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 单个工艺线水质全流程查询 Get scenario\'s water quality entire process result data of a certain product line
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [code] 系统点位 system code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabResultTsByProductlineGet(
    scenarioId?: string,
    productLine?: string,
    modelName?: string,
    code?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabResultTsByProductlineGet(scenarioId, productLine, modelName, code, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除方案，同时删除方案相关的设置数据 Delete scenario as well as its corresponding setting data by scenario ids
   * @param {DeleteScenarioInput} [deleteScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioDeletePost(
    deleteScenarioInput?: DeleteScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioDeletePost(deleteScenarioInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询方案进水数据 Get scenario\'s inlet time-series data
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [inlet] 进水点 inlet
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioInletDataGet(
    scenarioId?: string,
    inlet?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioInletDataGet(scenarioId, inlet, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存进水数据到方案（入数据库） Save inlet time-series data of a scenario in database
   * @param {Array<SaveInletDataInput>} [saveInletDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioInletDataSavePost(
    saveInletDataInput?: Array<SaveInletDataInput>,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioInletDataSavePost(saveInletDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 进水点文件模板下载 Download the inlet time-series data excel file template.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioInletDataTemplateDownloadPost(options?: AxiosRequestConfig) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioInletDataTemplateDownloadPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 进水点数据文件excel上传 Upload inlet time-series data in an excel file
   * @param {any} [excel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioInletDataTemplateUploadPost(
    excel?: any,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioInletDataTemplateUploadPost(excel, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询SCADA数据 Get inlet time-series data from SCADA
   * @param {string} [inlet] 进水点 inlet
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioInletScadaGet(
    inlet?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioInletScadaGet(inlet, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询方案参数设置 Get scenario\'s parameter setting data
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioParamGet(
    scenarioId?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioParamGet(scenarioId, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存方案参数设置 Save scenario\'s parameter setting data
   * @param {Array<SaveParamInput>} [saveParamInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioParamSavePost(
    saveParamInput?: Array<SaveParamInput>,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioParamSavePost(saveParamInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询方案结果配置 Get scenario\'s result setting data
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioResultSettingGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioResultSettingGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存方案结果配置 Save scenario\'s result setting data
   * @param {ResultParam} [resultParam]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioResultSettingSavePost(
    resultParam?: ResultParam,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioResultSettingSavePost(resultParam, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取单个预案模拟结果
   * @summary 获取方案的生化区电耗或碳足迹信息
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {number} [subType] 结果类型
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioScenarioResultGet(
    scenarioId?: string,
    subType?: number,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioScenarioResultGet(scenarioId, subType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 能够进行对比的方案需满足两个条件，分别是时间范围一致和结果配置一致 scenarios that can be compared must have consistent time period and result setting
   * @summary 查询与指定方案的结果配置一样的方案列表 Get scenarios which can be compared with the specified scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProNumSimLabApi
   */
  public apiV2SimulationLabScenarioScenariosForCompareGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ProNumSimLabApiFp(this.configuration)
      .apiV2SimulationLabScenarioScenariosForCompareGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
