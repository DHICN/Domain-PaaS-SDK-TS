/* eslint-disable */
/**
 * 污水业务中台领域服务-v3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { QueryByConditionInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SelectItemNode } from '../models'
// @ts-ignore
import { TsDataOutput } from '../models'
/**
 * HistoryDataApi - axios parameter creator
 * @export
 */
export const HistoryDataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppHistoryDataExportByConditionPost: async (
      queryByConditionInput?: QueryByConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/history-data/export-by-condition`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryByConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataExportPost: async (
      queryByConditionInput?: QueryByConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/history-data/export`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryByConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataGetByConditionPost: async (
      queryByConditionInput?: QueryByConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/history-data/get-by-condition`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryByConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataSelectItemsGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/history-data/select-items`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HistoryDataApi - functional programming interface
 * @export
 */
export const HistoryDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HistoryDataApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppHistoryDataExportByConditionPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppHistoryDataExportByConditionPost(
          queryByConditionInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2HistoryDataExportPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2HistoryDataExportPost(
        queryByConditionInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2HistoryDataGetByConditionPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TsDataOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2HistoryDataGetByConditionPost(
        queryByConditionInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2HistoryDataSelectItemsGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SelectItemNode>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2HistoryDataSelectItemsGet(
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * HistoryDataApi - factory interface
 * @export
 */
export const HistoryDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HistoryDataApiFp(configuration)
  return {
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppHistoryDataExportByConditionPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAppHistoryDataExportByConditionPost(queryByConditionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataExportPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV2HistoryDataExportPost(queryByConditionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
     * @param {QueryByConditionInput} [queryByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataGetByConditionPost(
      queryByConditionInput?: QueryByConditionInput,
      options?: any,
    ): AxiosPromise<Array<TsDataOutput>> {
      return localVarFp
        .apiV2HistoryDataGetByConditionPost(queryByConditionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2HistoryDataSelectItemsGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<SelectItemNode>> {
      return localVarFp
        .apiV2HistoryDataSelectItemsGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * HistoryDataApi - object-oriented interface
 * @export
 * @class HistoryDataApi
 * @extends {BaseAPI}
 */
export class HistoryDataApi extends BaseAPI {
  /**
   *
   * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
   * @param {QueryByConditionInput} [queryByConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoryDataApi
   */
  public apiAppHistoryDataExportByConditionPost(
    queryByConditionInput?: QueryByConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return HistoryDataApiFp(this.configuration)
      .apiAppHistoryDataExportByConditionPost(queryByConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 导出清洗后的在线数据，模拟结果数据 Export processed online data or model result data as an excel file
   * @param {QueryByConditionInput} [queryByConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoryDataApi
   */
  public apiV2HistoryDataExportPost(
    queryByConditionInput?: QueryByConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return HistoryDataApiFp(this.configuration)
      .apiV2HistoryDataExportPost(queryByConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据时间段和点位代码查询清洗后的在线数据和模拟结果数据 Get processed online data or model result data by time and codes
   * @param {QueryByConditionInput} [queryByConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoryDataApi
   */
  public apiV2HistoryDataGetByConditionPost(
    queryByConditionInput?: QueryByConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return HistoryDataApiFp(this.configuration)
      .apiV2HistoryDataGetByConditionPost(queryByConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指标查询的可选择项的具体信息 Get all the historical data indicators for selection on the front end
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoryDataApi
   */
  public apiV2HistoryDataSelectItemsGet(modelName?: string, options?: AxiosRequestConfig) {
    return HistoryDataApiFp(this.configuration)
      .apiV2HistoryDataSelectItemsGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
