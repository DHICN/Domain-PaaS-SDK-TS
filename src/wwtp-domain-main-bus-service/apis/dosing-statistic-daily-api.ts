/* eslint-disable */
/**
 * wwtp-paas-main-bus-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DosingStatisticDailysInOut } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * DosingStatisticDailyApi - axios parameter creator
 * @export
 */
export const DosingStatisticDailyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加加药日统计信息 Add dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyAddDosingStatisticDailysPost: async (
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/AddDosingStatisticDailys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingStatisticDailysInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyDeleteDosingStatisticDailysPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/DeleteDosingStatisticDailys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有加药日统计信息 Get all dosing daily statistic data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetAllDosingStatisticDailysGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/GetAllDosingStatisticDailys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet: async (
      category?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/GetDosingStatisticDailysByCategory`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过时间获取加药日统计信息 Get dosing daily statistic data by time
     * @param {string} [time] 时间 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetDosingStatisticDailysByDateGet: async (
      time?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/GetDosingStatisticDailysByDate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (time !== undefined) {
        localVarQueryParameter['time'] = time
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新加药日统计信息 Update dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyUpdateDosingStatisticDailysPost: async (
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/DosingStatisticDaily/UpdateDosingStatisticDailys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingStatisticDailysInOut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DosingStatisticDailyApi - functional programming interface
 * @export
 */
export const DosingStatisticDailyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DosingStatisticDailyApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加加药日统计信息 Add dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyAddDosingStatisticDailysPost(
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyAddDosingStatisticDailysPost(
          dosingStatisticDailysInOut,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyDeleteDosingStatisticDailysPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyDeleteDosingStatisticDailysPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有加药日统计信息 Get all dosing daily statistic data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyGetAllDosingStatisticDailysGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyGetAllDosingStatisticDailysGet(
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
          category,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过时间获取加药日统计信息 Get dosing daily statistic data by time
     * @param {string} [time] 时间 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(
      time?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(
          time,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新加药日统计信息 Update dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDosingStatisticDailyUpdateDosingStatisticDailysPost(
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDosingStatisticDailyUpdateDosingStatisticDailysPost(
          dosingStatisticDailysInOut,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DosingStatisticDailyApi - factory interface
 * @export
 */
export const DosingStatisticDailyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DosingStatisticDailyApiFp(configuration)
  return {
    /**
     *
     * @summary 添加加药日统计信息 Add dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyAddDosingStatisticDailysPost(
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingStatisticDailyAddDosingStatisticDailysPost(dosingStatisticDailysInOut, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyDeleteDosingStatisticDailysPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingStatisticDailyDeleteDosingStatisticDailysPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有加药日统计信息 Get all dosing daily statistic data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetAllDosingStatisticDailysGet(
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysInOut>> {
      return localVarFp
        .apiDosingStatisticDailyGetAllDosingStatisticDailysGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysInOut>> {
      return localVarFp
        .apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
          category,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过时间获取加药日统计信息 Get dosing daily statistic data by time
     * @param {string} [time] 时间 time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(
      time?: string,
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysInOut>> {
      return localVarFp
        .apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(time, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新加药日统计信息 Update dosing daily statistic data
     * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDosingStatisticDailyUpdateDosingStatisticDailysPost(
      dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDosingStatisticDailyUpdateDosingStatisticDailysPost(dosingStatisticDailysInOut, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DosingStatisticDailyApi - object-oriented interface
 * @export
 * @class DosingStatisticDailyApi
 * @extends {BaseAPI}
 */
export class DosingStatisticDailyApi extends BaseAPI {
  /**
   *
   * @summary 添加加药日统计信息 Add dosing daily statistic data
   * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyAddDosingStatisticDailysPost(
    dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
    options?: AxiosRequestConfig,
  ) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyAddDosingStatisticDailysPost(dosingStatisticDailysInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除加药日统计信息 Delete dosing daily statistic data by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyDeleteDosingStatisticDailysPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyDeleteDosingStatisticDailysPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有加药日统计信息 Get all dosing daily statistic data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyGetAllDosingStatisticDailysGet(options?: AxiosRequestConfig) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyGetAllDosingStatisticDailysGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过药剂类型获取加药日统计信息 Get dosing daily statistic data by dosage type
   * @param {number} [category] 药剂类型 dosage type
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
    category?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyGetDosingStatisticDailysByCategoryGet(
        category,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过时间获取加药日统计信息 Get dosing daily statistic data by time
   * @param {string} [time] 时间 time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(
    time?: string,
    options?: AxiosRequestConfig,
  ) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyGetDosingStatisticDailysByDateGet(time, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新加药日统计信息 Update dosing daily statistic data
   * @param {Array<DosingStatisticDailysInOut>} [dosingStatisticDailysInOut]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DosingStatisticDailyApi
   */
  public apiDosingStatisticDailyUpdateDosingStatisticDailysPost(
    dosingStatisticDailysInOut?: Array<DosingStatisticDailysInOut>,
    options?: AxiosRequestConfig,
  ) {
    return DosingStatisticDailyApiFp(this.configuration)
      .apiDosingStatisticDailyUpdateDosingStatisticDailysPost(dosingStatisticDailysInOut, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
