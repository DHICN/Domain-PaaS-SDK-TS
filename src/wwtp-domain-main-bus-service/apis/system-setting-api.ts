/* eslint-disable */
/**
 * wwtp-paas-main-bus-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AlarmConfigInOut } from '../models'
// @ts-ignore
import { InletParametersOutput } from '../models'
// @ts-ignore
import { ProcessedSettingDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { WqSimulationIndicatorInput } from '../models'
// @ts-ignore
import { WqSimulationIndicatorOutput } from '../models'
/**
 * SystemSettingApi - axios parameter creator
 * @export
 */
export const SystemSettingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 增加所有清洗配置点位 Add processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingAddProcessedSettingsPost: async (
      processedSettingDto?: Array<ProcessedSettingDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/SystemSetting/AddProcessedSettings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        processedSettingDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除清洗配置点位 Delete processed settings by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingDeleteProcessedSettingsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/SystemSetting/DeleteProcessedSettings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有清洗配置点位 Get all the processed settings for data clean algorithm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingGetAllProcessedSettingsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/SystemSetting/GetAllProcessedSettings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改清洗配置点位 Update processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingUpdateProcessedSettingsPost: async (
      processedSettingDto?: Array<ProcessedSettingDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/SystemSetting/UpdateProcessedSettings`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        processedSettingDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 进水水质预警配置查询 Get inlet water quality alarm config
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingInletAlarmConfigGet: async (
      inlet?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/system-setting/inlet-alarm-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (inlet !== undefined) {
        localVarQueryParameter['inlet'] = inlet
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 进水水质组分比例设置查询 Get inlet water quality parameter settings
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingInletParametersGet: async (
      inlet?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/system-setting/inlet-parameters`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (inlet !== undefined) {
        localVarQueryParameter['inlet'] = inlet
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 水质模拟预测点位配置查询 Get indicator config data for water quality simulation and analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingWqSimulationIndicatorsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/system-setting/wq-simulation-indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 水质模拟预测点位配置更新 Update indicator config data for water quality simulation and analysis
     * @param {Array<WqSimulationIndicatorInput>} [wqSimulationIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingWqSimulationIndicatorsUpdatePost: async (
      wqSimulationIndicatorInput?: Array<WqSimulationIndicatorInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/system-setting/wq-simulation-indicators/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wqSimulationIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SystemSettingApi - functional programming interface
 * @export
 */
export const SystemSettingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemSettingApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 增加所有清洗配置点位 Add processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSystemSettingAddProcessedSettingsPost(
      processedSettingDto?: Array<ProcessedSettingDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSystemSettingAddProcessedSettingsPost(
          processedSettingDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除清洗配置点位 Delete processed settings by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSystemSettingDeleteProcessedSettingsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSystemSettingDeleteProcessedSettingsPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有清洗配置点位 Get all the processed settings for data clean algorithm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSystemSettingGetAllProcessedSettingsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessedSettingDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSystemSettingGetAllProcessedSettingsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改清洗配置点位 Update processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSystemSettingUpdateProcessedSettingsPost(
      processedSettingDto?: Array<ProcessedSettingDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSystemSettingUpdateProcessedSettingsPost(
          processedSettingDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 进水水质预警配置查询 Get inlet water quality alarm config
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemSettingInletAlarmConfigGet(
      inlet?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmConfigInOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SystemSettingInletAlarmConfigGet(
          inlet,
          modelName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 进水水质组分比例设置查询 Get inlet water quality parameter settings
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemSettingInletParametersGet(
      inlet?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InletParametersOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SystemSettingInletParametersGet(
          inlet,
          modelName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 水质模拟预测点位配置查询 Get indicator config data for water quality simulation and analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemSettingWqSimulationIndicatorsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WqSimulationIndicatorOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SystemSettingWqSimulationIndicatorsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 水质模拟预测点位配置更新 Update indicator config data for water quality simulation and analysis
     * @param {Array<WqSimulationIndicatorInput>} [wqSimulationIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2SystemSettingWqSimulationIndicatorsUpdatePost(
      wqSimulationIndicatorInput?: Array<WqSimulationIndicatorInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2SystemSettingWqSimulationIndicatorsUpdatePost(
          wqSimulationIndicatorInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * SystemSettingApi - factory interface
 * @export
 */
export const SystemSettingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SystemSettingApiFp(configuration)
  return {
    /**
     *
     * @summary 增加所有清洗配置点位 Add processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingAddProcessedSettingsPost(
      processedSettingDto?: Array<ProcessedSettingDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiSystemSettingAddProcessedSettingsPost(processedSettingDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除清洗配置点位 Delete processed settings by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingDeleteProcessedSettingsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiSystemSettingDeleteProcessedSettingsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有清洗配置点位 Get all the processed settings for data clean algorithm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingGetAllProcessedSettingsGet(
      options?: any,
    ): AxiosPromise<Array<ProcessedSettingDto>> {
      return localVarFp
        .apiSystemSettingGetAllProcessedSettingsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改清洗配置点位 Update processed settings for data clean algorithm
     * @param {Array<ProcessedSettingDto>} [processedSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSystemSettingUpdateProcessedSettingsPost(
      processedSettingDto?: Array<ProcessedSettingDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiSystemSettingUpdateProcessedSettingsPost(processedSettingDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 进水水质预警配置查询 Get inlet water quality alarm config
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingInletAlarmConfigGet(
      inlet?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<AlarmConfigInOut>> {
      return localVarFp
        .apiV2SystemSettingInletAlarmConfigGet(inlet, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 进水水质组分比例设置查询 Get inlet water quality parameter settings
     * @param {string} [inlet] 进水点 inlet
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingInletParametersGet(
      inlet?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<InletParametersOutput>> {
      return localVarFp
        .apiV2SystemSettingInletParametersGet(inlet, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 水质模拟预测点位配置查询 Get indicator config data for water quality simulation and analysis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingWqSimulationIndicatorsGet(
      options?: any,
    ): AxiosPromise<Array<WqSimulationIndicatorOutput>> {
      return localVarFp
        .apiV2SystemSettingWqSimulationIndicatorsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 水质模拟预测点位配置更新 Update indicator config data for water quality simulation and analysis
     * @param {Array<WqSimulationIndicatorInput>} [wqSimulationIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SystemSettingWqSimulationIndicatorsUpdatePost(
      wqSimulationIndicatorInput?: Array<WqSimulationIndicatorInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2SystemSettingWqSimulationIndicatorsUpdatePost(wqSimulationIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SystemSettingApi - object-oriented interface
 * @export
 * @class SystemSettingApi
 * @extends {BaseAPI}
 */
export class SystemSettingApi extends BaseAPI {
  /**
   *
   * @summary 增加所有清洗配置点位 Add processed settings for data clean algorithm
   * @param {Array<ProcessedSettingDto>} [processedSettingDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiSystemSettingAddProcessedSettingsPost(
    processedSettingDto?: Array<ProcessedSettingDto>,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiSystemSettingAddProcessedSettingsPost(processedSettingDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除清洗配置点位 Delete processed settings by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiSystemSettingDeleteProcessedSettingsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiSystemSettingDeleteProcessedSettingsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有清洗配置点位 Get all the processed settings for data clean algorithm
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiSystemSettingGetAllProcessedSettingsGet(options?: AxiosRequestConfig) {
    return SystemSettingApiFp(this.configuration)
      .apiSystemSettingGetAllProcessedSettingsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改清洗配置点位 Update processed settings for data clean algorithm
   * @param {Array<ProcessedSettingDto>} [processedSettingDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiSystemSettingUpdateProcessedSettingsPost(
    processedSettingDto?: Array<ProcessedSettingDto>,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiSystemSettingUpdateProcessedSettingsPost(processedSettingDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 进水水质预警配置查询 Get inlet water quality alarm config
   * @param {string} [inlet] 进水点 inlet
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiV2SystemSettingInletAlarmConfigGet(
    inlet?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiV2SystemSettingInletAlarmConfigGet(inlet, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 进水水质组分比例设置查询 Get inlet water quality parameter settings
   * @param {string} [inlet] 进水点 inlet
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiV2SystemSettingInletParametersGet(
    inlet?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiV2SystemSettingInletParametersGet(inlet, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 水质模拟预测点位配置查询 Get indicator config data for water quality simulation and analysis
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiV2SystemSettingWqSimulationIndicatorsGet(options?: AxiosRequestConfig) {
    return SystemSettingApiFp(this.configuration)
      .apiV2SystemSettingWqSimulationIndicatorsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 水质模拟预测点位配置更新 Update indicator config data for water quality simulation and analysis
   * @param {Array<WqSimulationIndicatorInput>} [wqSimulationIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemSettingApi
   */
  public apiV2SystemSettingWqSimulationIndicatorsUpdatePost(
    wqSimulationIndicatorInput?: Array<WqSimulationIndicatorInput>,
    options?: AxiosRequestConfig,
  ) {
    return SystemSettingApiFp(this.configuration)
      .apiV2SystemSettingWqSimulationIndicatorsUpdatePost(wqSimulationIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
