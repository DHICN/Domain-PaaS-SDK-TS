/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CdAdditionRateOutput } from '../models'
// @ts-ignore
import { DosingStatisticDailysOutput } from '../models'
// @ts-ignore
import { OutletOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * IntelligentPhosDosingApi - axios parameter creator
 * @export
 */
export const IntelligentPhosDosingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取除磷剂的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of phosphorus remover
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingAddRatesGet: async (
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/add-rates`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (category !== undefined) {
        localVarQueryParameter['category'] = category
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDailyStatisticsExportGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/daily-statistics/export`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDailyStatisticsGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/daily-statistics`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDosingLogExportGet: async (
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/dosing-log/export`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productionLine !== undefined) {
        localVarQueryParameter['productionLine'] = productionLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取出水磷酸盐 Get effluent PO4
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingOutletPo4Get: async (
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/outlet-po4`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取出水总磷 Get total effluent phosphorus
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingOutletTpGet: async (
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/intelligent-phosdosing/outlet-tp`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntelligentPhosDosingApi - functional programming interface
 * @export
 */
export const IntelligentPhosDosingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntelligentPhosDosingApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取除磷剂的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of phosphorus remover
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingAddRatesGet(
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CdAdditionRateOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingAddRatesGet(
          productionLine,
          category,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingDailyStatisticsExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingDailyStatisticsExportGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingDailyStatisticsGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DosingStatisticDailysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingDailyStatisticsGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingDosingLogExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingDosingLogExportGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取出水磷酸盐 Get effluent PO4
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingOutletPo4Get(
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutletOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingOutletPo4Get(
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取出水总磷 Get total effluent phosphorus
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IntelligentPhosdosingOutletTpGet(
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutletOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IntelligentPhosdosingOutletTpGet(
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntelligentPhosDosingApi - factory interface
 * @export
 */
export const IntelligentPhosDosingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IntelligentPhosDosingApiFp(configuration)
  return {
    /**
     *
     * @summary 获取除磷剂的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of phosphorus remover
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {number} [category] 药剂类型 dosage type
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingAddRatesGet(
      productionLine?: string,
      category?: number,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<CdAdditionRateOutput> {
      return localVarFp
        .apiV2IntelligentPhosdosingAddRatesGet(
          productionLine,
          category,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDailyStatisticsExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV2IntelligentPhosdosingDailyStatisticsExportGet(
          productionLine,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDailyStatisticsGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DosingStatisticDailysOutput>> {
      return localVarFp
        .apiV2IntelligentPhosdosingDailyStatisticsGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
     * @param {string} [productionLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingDosingLogExportGet(
      productionLine?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV2IntelligentPhosdosingDosingLogExportGet(productionLine, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取出水磷酸盐 Get effluent PO4
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingOutletPo4Get(
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<OutletOutput> {
      return localVarFp
        .apiV2IntelligentPhosdosingOutletPo4Get(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取出水总磷 Get total effluent phosphorus
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IntelligentPhosdosingOutletTpGet(
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<OutletOutput> {
      return localVarFp
        .apiV2IntelligentPhosdosingOutletTpGet(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntelligentPhosDosingApi - object-oriented interface
 * @export
 * @class IntelligentPhosDosingApi
 * @extends {BaseAPI}
 */
export class IntelligentPhosDosingApi extends BaseAPI {
  /**
   *
   * @summary 获取除磷剂的实际投加速率与计算投加速率 Get actual and calculated dosing rate data of phosphorus remover
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {number} [category] 药剂类型 dosage type
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingAddRatesGet(
    productionLine?: string,
    category?: number,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingAddRatesGet(productionLine, category, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计文件导出 Export dosing daily statistic results of a certain period as an excel file
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingDailyStatisticsExportGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingDailyStatisticsExportGet(
        productionLine,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药统计查询 Get dosing daily statistic results of a certain period
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingDailyStatisticsGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingDailyStatisticsGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 指定时间段内加药报表文件导出 Export dosing logs of a certain period as an excel file
   * @param {string} [productionLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingDosingLogExportGet(
    productionLine?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingDosingLogExportGet(productionLine, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取出水磷酸盐 Get effluent PO4
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingOutletPo4Get(
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingOutletPo4Get(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取出水总磷 Get total effluent phosphorus
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntelligentPhosDosingApi
   */
  public apiV2IntelligentPhosdosingOutletTpGet(
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntelligentPhosDosingApiFp(this.configuration)
      .apiV2IntelligentPhosdosingOutletTpGet(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
