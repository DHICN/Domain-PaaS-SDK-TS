/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ControlOnlinePointOutput } from '../models'
// @ts-ignore
import { MicroOrganismOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateWqInputDataInput } from '../models'
// @ts-ignore
import { WqOnlineDataInput } from '../models'
// @ts-ignore
import { WqOnlineDataOutput } from '../models'
// @ts-ignore
import { WqOnlinePointOutput } from '../models'
// @ts-ignore
import { WqStatisticOutput } from '../models'
/**
 * WQAnalysisApi - axios parameter creator
 * @export
 */
export const WQAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisControlOnlinePointsGet: async (
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/wq-analysis/control-online-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators\' statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @summary 查询水质全流程统计数据 Get water quality entire process statistic data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisEntireProcessGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/wq-analysis/entire-process`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询在线点位时间序列数据 Get online water quality or control data
     * @param {string} [tenantId]
     * @param {WqOnlineDataInput} [wqOnlineDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisWqOnlineDataPost: async (
      tenantId?: string,
      wqOnlineDataInput?: WqOnlineDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/wq-analysis/wq-online-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        wqOnlineDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询水质输入点位信息 Get online water quality points detailed information
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisWqOnlinePointsGet: async (
      modelName?: string,
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/wq-analysis/wq-online-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新在线水质或控制点数据 Update online water quality or control data
     * @param {string} [tenantId]
     * @param {Array<UpdateWqInputDataInput>} [updateWqInputDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWQAnalysisUpdateWQInputDataPost: async (
      tenantId?: string,
      updateWqInputDataInput?: Array<UpdateWqInputDataInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/WQAnalysis/UpdateWQInputData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateWqInputDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @summary 获取微生物生长模拟结果 Get microbial growth simulation results
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WqAnalysisMicroOrganismGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/wq-analysis/micro-organism`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WQAnalysisApi - functional programming interface
 * @export
 */
export const WQAnalysisApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WQAnalysisApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2WqAnalysisControlOnlinePointsGet(
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlOnlinePointOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2WqAnalysisControlOnlinePointsGet(
          modelName,
          productLine,
          tenantId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators\' statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @summary 查询水质全流程统计数据 Get water quality entire process statistic data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2WqAnalysisEntireProcessGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WqStatisticOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WqAnalysisEntireProcessGet(
        startTime,
        endTime,
        modelName,
        productLine,
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询在线点位时间序列数据 Get online water quality or control data
     * @param {string} [tenantId]
     * @param {WqOnlineDataInput} [wqOnlineDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2WqAnalysisWqOnlineDataPost(
      tenantId?: string,
      wqOnlineDataInput?: WqOnlineDataInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WqOnlineDataOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WqAnalysisWqOnlineDataPost(
        tenantId,
        wqOnlineDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询水质输入点位信息 Get online water quality points detailed information
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2WqAnalysisWqOnlinePointsGet(
      modelName?: string,
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WqOnlinePointOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WqAnalysisWqOnlinePointsGet(
        modelName,
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新在线水质或控制点数据 Update online water quality or control data
     * @param {string} [tenantId]
     * @param {Array<UpdateWqInputDataInput>} [updateWqInputDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWQAnalysisUpdateWQInputDataPost(
      tenantId?: string,
      updateWqInputDataInput?: Array<UpdateWqInputDataInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiWQAnalysisUpdateWQInputDataPost(
        tenantId,
        updateWqInputDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @summary 获取微生物生长模拟结果 Get microbial growth simulation results
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2WqAnalysisMicroOrganismGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MicroOrganismOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.v2WqAnalysisMicroOrganismGet(
        startTime,
        endTime,
        modelName,
        productLine,
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WQAnalysisApi - factory interface
 * @export
 */
export const WQAnalysisApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WQAnalysisApiFp(configuration)
  return {
    /**
     *
     * @summary 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisControlOnlinePointsGet(
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: any,
    ): AxiosPromise<ControlOnlinePointOutput> {
      return localVarFp
        .apiV2WqAnalysisControlOnlinePointsGet(modelName, productLine, tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators\' statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
     * @summary 查询水质全流程统计数据 Get water quality entire process statistic data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisEntireProcessGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: any,
    ): AxiosPromise<Array<WqStatisticOutput>> {
      return localVarFp
        .apiV2WqAnalysisEntireProcessGet(
          startTime,
          endTime,
          modelName,
          productLine,
          tenantId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询在线点位时间序列数据 Get online water quality or control data
     * @param {string} [tenantId]
     * @param {WqOnlineDataInput} [wqOnlineDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisWqOnlineDataPost(
      tenantId?: string,
      wqOnlineDataInput?: WqOnlineDataInput,
      options?: any,
    ): AxiosPromise<Array<WqOnlineDataOutput>> {
      return localVarFp
        .apiV2WqAnalysisWqOnlineDataPost(tenantId, wqOnlineDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询水质输入点位信息 Get online water quality points detailed information
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2WqAnalysisWqOnlinePointsGet(
      modelName?: string,
      tenantId?: string,
      options?: any,
    ): AxiosPromise<Array<WqOnlinePointOutput>> {
      return localVarFp
        .apiV2WqAnalysisWqOnlinePointsGet(modelName, tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新在线水质或控制点数据 Update online water quality or control data
     * @param {string} [tenantId]
     * @param {Array<UpdateWqInputDataInput>} [updateWqInputDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWQAnalysisUpdateWQInputDataPost(
      tenantId?: string,
      updateWqInputDataInput?: Array<UpdateWqInputDataInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiWQAnalysisUpdateWQInputDataPost(tenantId, updateWqInputDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
     * @summary 获取微生物生长模拟结果 Get microbial growth simulation results
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模型名称 template model name
     * @param {string} [productLine] 工艺线 product line code
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WqAnalysisMicroOrganismGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      tenantId?: string,
      options?: any,
    ): AxiosPromise<Array<MicroOrganismOutput>> {
      return localVarFp
        .v2WqAnalysisMicroOrganismGet(startTime, endTime, modelName, productLine, tenantId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WQAnalysisApi - object-oriented interface
 * @export
 * @class WQAnalysisApi
 * @extends {BaseAPI}
 */
export class WQAnalysisApi extends BaseAPI {
  /**
   *
   * @summary 查询特定工艺线下的工艺运行输入点位 Get online control points detailed information on a certain product line
   * @param {string} [modelName] 模型名称 template model name
   * @param {string} [productLine] 工艺线 product line code
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public apiV2WqAnalysisControlOnlinePointsGet(
    modelName?: string,
    productLine?: string,
    tenantId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .apiV2WqAnalysisControlOnlinePointsGet(modelName, productLine, tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询指定时间段内，单条工艺线上每个生化池的各个水质指标统计结果，包括最大值，最小值，平均值，以及实测值 Get water quality indicators\' statistic results including maximum, minimum, average value and online value of each biochemical pool on a certain product line of a specified time period.
   * @summary 查询水质全流程统计数据 Get water quality entire process statistic data
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模型名称 template model name
   * @param {string} [productLine] 工艺线 product line code
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public apiV2WqAnalysisEntireProcessGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    tenantId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .apiV2WqAnalysisEntireProcessGet(
        startTime,
        endTime,
        modelName,
        productLine,
        tenantId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询在线点位时间序列数据 Get online water quality or control data
   * @param {string} [tenantId]
   * @param {WqOnlineDataInput} [wqOnlineDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public apiV2WqAnalysisWqOnlineDataPost(
    tenantId?: string,
    wqOnlineDataInput?: WqOnlineDataInput,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .apiV2WqAnalysisWqOnlineDataPost(tenantId, wqOnlineDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询水质输入点位信息 Get online water quality points detailed information
   * @param {string} [modelName] 模型名称 template model name
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public apiV2WqAnalysisWqOnlinePointsGet(
    modelName?: string,
    tenantId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .apiV2WqAnalysisWqOnlinePointsGet(modelName, tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新在线水质或控制点数据 Update online water quality or control data
   * @param {string} [tenantId]
   * @param {Array<UpdateWqInputDataInput>} [updateWqInputDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public apiWQAnalysisUpdateWQInputDataPost(
    tenantId?: string,
    updateWqInputDataInput?: Array<UpdateWqInputDataInput>,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .apiWQAnalysisUpdateWQInputDataPost(tenantId, updateWqInputDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取指定时间段内，单条工艺线上的微生物生长模拟结果 Get microbial growth simulation results on a certain product line of a specified time period.
   * @summary 获取微生物生长模拟结果 Get microbial growth simulation results
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模型名称 template model name
   * @param {string} [productLine] 工艺线 product line code
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WQAnalysisApi
   */
  public v2WqAnalysisMicroOrganismGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    tenantId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WQAnalysisApiFp(this.configuration)
      .v2WqAnalysisMicroOrganismGet(startTime, endTime, modelName, productLine, tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
