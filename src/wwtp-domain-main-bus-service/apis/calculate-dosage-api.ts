/* eslint-disable */
/**
 * 污水业务中台领域服务-v4
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DosingParamSettingDto } from '../models'
// @ts-ignore
import { ExecutePlcInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * CalculateDosageApi - axios parameter creator
 * @export
 */
export const CalculateDosageApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 计算指定产线的碳源加药量 calculate carbon\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageCalculateCarbonDosagePost: async (
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/CalculateCarbonDosage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dosingParamSettingDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 此接口由计算服务在完成每个时刻的滚动计算之后调用 This API is called by compute service each hour after automatic simulation.
     * @summary 加药计算，包括碳源加药和MCCR加药计算 Execute dosage calculation, including carbon source dosage and MCCR dosage
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageCalculateDosageGet: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/CalculateDosage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 加药量日/月统计，定期执行（半小时） Execute dosage daily and monthly statistics periodically (every half an hour)
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户id tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageDosageStatisticDailyGet: async (
      currentTime?: string,
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/DosageStatisticDaily`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (currentTime !== undefined) {
        localVarQueryParameter['currentTime'] = currentTime
      }

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 执行碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [username]
     * @param {string} [password]
     * @param {number} [expirationTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageExcutePLCGet: async (
      currentTime?: string,
      tenantId?: string,
      username?: string,
      password?: string,
      expirationTime?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/ExcutePLC`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (currentTime !== undefined) {
        localVarQueryParameter['currentTime'] = currentTime
      }

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (username !== undefined) {
        localVarQueryParameter['username'] = username
      }

      if (password !== undefined) {
        localVarQueryParameter['password'] = password
      }

      if (expirationTime !== undefined) {
        localVarQueryParameter['expirationTime'] = expirationTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 执行指定产线的碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs by specify product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageExecuteCarbonPLCByProductLinePost: async (
      executePlcInput?: ExecutePlcInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/ExecuteCarbonPLCByProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        executePlcInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosage alarm logs based on dosage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageJudgeDosagePost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/JudgeDosage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新计算参数-推送指定产线的数据（清洗数据） Push processed time-series data to dosage algorithm for one product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 产线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersByProductLineGet: async (
      scenarioId?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/UpdateComputerParametersByProductLine`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新计算参数-推送数据（清洗数据） Push processed time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersGet: async (
      tenantId?: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/UpdateComputerParameters`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新计算参数-推送数据（mccr相关点位推送原表数据） Push source time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersSourceDataGet: async (
      tenantId?: string,
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/CalculateDosage/UpdateComputerParametersSourceData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CalculateDosageApi - functional programming interface
 * @export
 */
export const CalculateDosageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CalculateDosageApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 计算指定产线的碳源加药量 calculate carbon\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageCalculateCarbonDosagePost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageCalculateCarbonDosagePost(
          dosingParamSettingDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 此接口由计算服务在完成每个时刻的滚动计算之后调用 This API is called by compute service each hour after automatic simulation.
     * @summary 加药计算，包括碳源加药和MCCR加药计算 Execute dosage calculation, including carbon source dosage and MCCR dosage
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageCalculateDosageGet(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageCalculateDosageGet(tenantId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 加药量日/月统计，定期执行（半小时） Execute dosage daily and monthly statistics periodically (every half an hour)
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户id tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageDosageStatisticDailyGet(
      currentTime?: string,
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageDosageStatisticDailyGet(
          currentTime,
          tenantId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 执行碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [username]
     * @param {string} [password]
     * @param {number} [expirationTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageExcutePLCGet(
      currentTime?: string,
      tenantId?: string,
      username?: string,
      password?: string,
      expirationTime?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCalculateDosageExcutePLCGet(
        currentTime,
        tenantId,
        username,
        password,
        expirationTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 执行指定产线的碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs by specify product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageExecuteCarbonPLCByProductLinePost(
      executePlcInput?: ExecutePlcInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageExecuteCarbonPLCByProductLinePost(
          executePlcInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosage alarm logs based on dosage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageJudgeDosagePost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCalculateDosageJudgeDosagePost(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新计算参数-推送指定产线的数据（清洗数据） Push processed time-series data to dosage algorithm for one product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 产线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageUpdateComputerParametersByProductLineGet(
      scenarioId?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageUpdateComputerParametersByProductLineGet(
          scenarioId,
          productLine,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新计算参数-推送数据（清洗数据） Push processed time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageUpdateComputerParametersGet(
      tenantId?: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageUpdateComputerParametersGet(
          tenantId,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新计算参数-推送数据（mccr相关点位推送原表数据） Push source time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCalculateDosageUpdateComputerParametersSourceDataGet(
      tenantId?: string,
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiCalculateDosageUpdateComputerParametersSourceDataGet(
          tenantId,
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * CalculateDosageApi - factory interface
 * @export
 */
export const CalculateDosageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CalculateDosageApiFp(configuration)
  return {
    /**
     *
     * @summary 计算指定产线的碳源加药量 calculate carbon\'s dosage by product line
     * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageCalculateCarbonDosagePost(
      dosingParamSettingDto?: Array<DosingParamSettingDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageCalculateCarbonDosagePost(dosingParamSettingDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 此接口由计算服务在完成每个时刻的滚动计算之后调用 This API is called by compute service each hour after automatic simulation.
     * @summary 加药计算，包括碳源加药和MCCR加药计算 Execute dosage calculation, including carbon source dosage and MCCR dosage
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageCalculateDosageGet(tenantId?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageCalculateDosageGet(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 加药量日/月统计，定期执行（半小时） Execute dosage daily and monthly statistics periodically (every half an hour)
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户id tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageDosageStatisticDailyGet(
      currentTime?: string,
      tenantId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageDosageStatisticDailyGet(currentTime, tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 执行碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs
     * @param {string} [currentTime] 当前时间 current time
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [username]
     * @param {string} [password]
     * @param {number} [expirationTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageExcutePLCGet(
      currentTime?: string,
      tenantId?: string,
      username?: string,
      password?: string,
      expirationTime?: number,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageExcutePLCGet(
          currentTime,
          tenantId,
          username,
          password,
          expirationTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 执行指定产线的碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs by specify product line
     * @param {ExecutePlcInput} [executePlcInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageExecuteCarbonPLCByProductLinePost(
      executePlcInput?: ExecutePlcInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageExecuteCarbonPLCByProductLinePost(executePlcInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 判断加药量，写入报警日志 Write dosage alarm logs based on dosage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageJudgeDosagePost(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageJudgeDosagePost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新计算参数-推送指定产线的数据（清洗数据） Push processed time-series data to dosage algorithm for one product line
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [productLine] 产线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersByProductLineGet(
      scenarioId?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageUpdateComputerParametersByProductLineGet(
          scenarioId,
          productLine,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新计算参数-推送数据（清洗数据） Push processed time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersGet(
      tenantId?: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageUpdateComputerParametersGet(tenantId, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新计算参数-推送数据（mccr相关点位推送原表数据） Push source time-series data to dosage algorithm
     * @param {string} [tenantId] 租户ID tenant id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCalculateDosageUpdateComputerParametersSourceDataGet(
      tenantId?: string,
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiCalculateDosageUpdateComputerParametersSourceDataGet(tenantId, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CalculateDosageApi - object-oriented interface
 * @export
 * @class CalculateDosageApi
 * @extends {BaseAPI}
 */
export class CalculateDosageApi extends BaseAPI {
  /**
   *
   * @summary 计算指定产线的碳源加药量 calculate carbon\'s dosage by product line
   * @param {Array<DosingParamSettingDto>} [dosingParamSettingDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageCalculateCarbonDosagePost(
    dosingParamSettingDto?: Array<DosingParamSettingDto>,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageCalculateCarbonDosagePost(dosingParamSettingDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 此接口由计算服务在完成每个时刻的滚动计算之后调用 This API is called by compute service each hour after automatic simulation.
   * @summary 加药计算，包括碳源加药和MCCR加药计算 Execute dosage calculation, including carbon source dosage and MCCR dosage
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageCalculateDosageGet(tenantId?: string, options?: AxiosRequestConfig) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageCalculateDosageGet(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 加药量日/月统计，定期执行（半小时） Execute dosage daily and monthly statistics periodically (every half an hour)
   * @param {string} [currentTime] 当前时间 current time
   * @param {string} [tenantId] 租户id tenant id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageDosageStatisticDailyGet(
    currentTime?: string,
    tenantId?: string,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageDosageStatisticDailyGet(currentTime, tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 执行碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs
   * @param {string} [currentTime] 当前时间 current time
   * @param {string} [tenantId] 租户ID tenant id
   * @param {string} [username]
   * @param {string} [password]
   * @param {number} [expirationTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageExcutePLCGet(
    currentTime?: string,
    tenantId?: string,
    username?: string,
    password?: string,
    expirationTime?: number,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageExcutePLCGet(
        currentTime,
        tenantId,
        username,
        password,
        expirationTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 执行指定产线的碳源加药plc控制，同时写入加药日志 Execute carbon source dosing plc control and write dosing logs by specify product line
   * @param {ExecutePlcInput} [executePlcInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageExecuteCarbonPLCByProductLinePost(
    executePlcInput?: ExecutePlcInput,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageExecuteCarbonPLCByProductLinePost(executePlcInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 判断加药量，写入报警日志 Write dosage alarm logs based on dosage
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageJudgeDosagePost(options?: AxiosRequestConfig) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageJudgeDosagePost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新计算参数-推送指定产线的数据（清洗数据） Push processed time-series data to dosage algorithm for one product line
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [productLine] 产线 product line
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageUpdateComputerParametersByProductLineGet(
    scenarioId?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageUpdateComputerParametersByProductLineGet(scenarioId, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新计算参数-推送数据（清洗数据） Push processed time-series data to dosage algorithm
   * @param {string} [tenantId] 租户ID tenant id
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageUpdateComputerParametersGet(
    tenantId?: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageUpdateComputerParametersGet(tenantId, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新计算参数-推送数据（mccr相关点位推送原表数据） Push source time-series data to dosage algorithm
   * @param {string} [tenantId] 租户ID tenant id
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculateDosageApi
   */
  public apiCalculateDosageUpdateComputerParametersSourceDataGet(
    tenantId?: string,
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return CalculateDosageApiFp(this.configuration)
      .apiCalculateDosageUpdateComputerParametersSourceDataGet(tenantId, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
