/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { GetTimeSeriesDataInput } from '../models'
// @ts-ignore
import { GetTimeSeriesDataOutput } from '../models'
// @ts-ignore
import { ItemInfo } from '../models'
// @ts-ignore
import { ItemValue } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { TableOutput } from '../models'
/**
 * AerationControlApi - axios parameter creator
 * @export
 */
export const AerationControlApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 调用曝气控制算法，计算风量 Calculate air volume using Aeration Control algorithm
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlCalculatePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/calculate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取曝气控制的当前状态信息 Get aeration control current status
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlControlStatusGet: async (
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/control-status`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的url用于下载 Excel file will be stored to distributed file system, and url will be returned for the front-end to download the file
     * @summary 将指定时间段内的曝气统计与曝气记录数据统一导出到一个excel文件中 Export aeration control statistic data and history data of a certain period to one excel file
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlExportExcelGet: async (
      start?: string,
      end?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/export-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (start !== undefined) {
        localVarQueryParameter['start'] = start
      }

      if (end !== undefined) {
        localVarQueryParameter['end'] = end
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 曝气记录信息查询 Get aeration control related history data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlHistoryGet: async (
      start?: string,
      end?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/history`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (start !== undefined) {
        localVarQueryParameter['start'] = start
      }

      if (end !== undefined) {
        localVarQueryParameter['end'] = end
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 执行曝气控制 Execute aeration control
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlPlcControlPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/plc-control`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 设置曝气控制执行的频率Set aeration control frequency
     * @param {number} [minutes] 分钟数 frequency in minutes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlSetControlFrequencyPost: async (
      minutes?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/set-control-frequency`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (minutes !== undefined) {
        localVarQueryParameter['minutes'] = minutes
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 曝气统计信息查询 Get aeration control statistic data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlStatisticGet: async (
      start?: string,
      end?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/statistic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (start !== undefined) {
        localVarQueryParameter['start'] = start
      }

      if (end !== undefined) {
        localVarQueryParameter['end'] = end
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取控制相关的时间序列项 Get aeration control related time-series items
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlTimeSeriesItemsGet: async (
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/time-series-items`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取控制相关的时间序列 Get aeration control related time-series data
     * @param {GetTimeSeriesDataInput} [getTimeSeriesDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlTimeSeriesPost: async (
      getTimeSeriesDataInput?: GetTimeSeriesDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/aeration-control/time-series`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getTimeSeriesDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AerationControlApi - functional programming interface
 * @export
 */
export const AerationControlApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AerationControlApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 调用曝气控制算法，计算风量 Calculate air volume using Aeration Control algorithm
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlCalculatePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlCalculatePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取曝气控制的当前状态信息 Get aeration control current status
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlControlStatusGet(
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemValue>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2AerationControlControlStatusGet(productLine, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的url用于下载 Excel file will be stored to distributed file system, and url will be returned for the front-end to download the file
     * @summary 将指定时间段内的曝气统计与曝气记录数据统一导出到一个excel文件中 Export aeration control statistic data and history data of a certain period to one excel file
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlExportExcelGet(
      start?: string,
      end?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlExportExcelGet(
        start,
        end,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 曝气记录信息查询 Get aeration control related history data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlHistoryGet(
      start?: string,
      end?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlHistoryGet(
        start,
        end,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 执行曝气控制 Execute aeration control
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlPlcControlPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlPlcControlPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 设置曝气控制执行的频率Set aeration control frequency
     * @param {number} [minutes] 分钟数 frequency in minutes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlSetControlFrequencyPost(
      minutes?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2AerationControlSetControlFrequencyPost(
          minutes,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 曝气统计信息查询 Get aeration control statistic data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlStatisticGet(
      start?: string,
      end?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemValue>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlStatisticGet(
        start,
        end,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取控制相关的时间序列项 Get aeration control related time-series items
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlTimeSeriesItemsGet(
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2AerationControlTimeSeriesItemsGet(productLine, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取控制相关的时间序列 Get aeration control related time-series data
     * @param {GetTimeSeriesDataInput} [getTimeSeriesDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2AerationControlTimeSeriesPost(
      getTimeSeriesDataInput?: GetTimeSeriesDataInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTimeSeriesDataOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AerationControlTimeSeriesPost(
        getTimeSeriesDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AerationControlApi - factory interface
 * @export
 */
export const AerationControlApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AerationControlApiFp(configuration)
  return {
    /**
     *
     * @summary 调用曝气控制算法，计算风量 Calculate air volume using Aeration Control algorithm
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlCalculatePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2AerationControlCalculatePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取曝气控制的当前状态信息 Get aeration control current status
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlControlStatusGet(
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<ItemValue>> {
      return localVarFp
        .apiV2AerationControlControlStatusGet(productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 文件会被保存到分布式文件系统，接口会返回文件的url用于下载 Excel file will be stored to distributed file system, and url will be returned for the front-end to download the file
     * @summary 将指定时间段内的曝气统计与曝气记录数据统一导出到一个excel文件中 Export aeration control statistic data and history data of a certain period to one excel file
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlExportExcelGet(
      start?: string,
      end?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV2AerationControlExportExcelGet(start, end, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 曝气记录信息查询 Get aeration control related history data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlHistoryGet(
      start?: string,
      end?: string,
      options?: any,
    ): AxiosPromise<TableOutput> {
      return localVarFp
        .apiV2AerationControlHistoryGet(start, end, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 执行曝气控制 Execute aeration control
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlPlcControlPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2AerationControlPlcControlPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 设置曝气控制执行的频率Set aeration control frequency
     * @param {number} [minutes] 分钟数 frequency in minutes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlSetControlFrequencyPost(
      minutes?: number,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2AerationControlSetControlFrequencyPost(minutes, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 曝气统计信息查询 Get aeration control statistic data
     * @param {string} [start] 开始时间 start time
     * @param {string} [end] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlStatisticGet(
      start?: string,
      end?: string,
      options?: any,
    ): AxiosPromise<Array<ItemValue>> {
      return localVarFp
        .apiV2AerationControlStatisticGet(start, end, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取控制相关的时间序列项 Get aeration control related time-series items
     * @param {string} [productLine] 工艺线 product line
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlTimeSeriesItemsGet(
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<ItemInfo>> {
      return localVarFp
        .apiV2AerationControlTimeSeriesItemsGet(productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取控制相关的时间序列 Get aeration control related time-series data
     * @param {GetTimeSeriesDataInput} [getTimeSeriesDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AerationControlTimeSeriesPost(
      getTimeSeriesDataInput?: GetTimeSeriesDataInput,
      options?: any,
    ): AxiosPromise<Array<GetTimeSeriesDataOutput>> {
      return localVarFp
        .apiV2AerationControlTimeSeriesPost(getTimeSeriesDataInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AerationControlApi - object-oriented interface
 * @export
 * @class AerationControlApi
 * @extends {BaseAPI}
 */
export class AerationControlApi extends BaseAPI {
  /**
   *
   * @summary 调用曝气控制算法，计算风量 Calculate air volume using Aeration Control algorithm
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlCalculatePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlCalculatePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取曝气控制的当前状态信息 Get aeration control current status
   * @param {string} [productLine] 工艺线 product line
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlControlStatusGet(productLine?: string, options?: AxiosRequestConfig) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlControlStatusGet(productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 文件会被保存到分布式文件系统，接口会返回文件的url用于下载 Excel file will be stored to distributed file system, and url will be returned for the front-end to download the file
   * @summary 将指定时间段内的曝气统计与曝气记录数据统一导出到一个excel文件中 Export aeration control statistic data and history data of a certain period to one excel file
   * @param {string} [start] 开始时间 start time
   * @param {string} [end] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlExportExcelGet(
    start?: string,
    end?: string,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlExportExcelGet(start, end, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 曝气记录信息查询 Get aeration control related history data
   * @param {string} [start] 开始时间 start time
   * @param {string} [end] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlHistoryGet(
    start?: string,
    end?: string,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlHistoryGet(start, end, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 执行曝气控制 Execute aeration control
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlPlcControlPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlPlcControlPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 设置曝气控制执行的频率Set aeration control frequency
   * @param {number} [minutes] 分钟数 frequency in minutes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlSetControlFrequencyPost(
    minutes?: number,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlSetControlFrequencyPost(minutes, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 曝气统计信息查询 Get aeration control statistic data
   * @param {string} [start] 开始时间 start time
   * @param {string} [end] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlStatisticGet(
    start?: string,
    end?: string,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlStatisticGet(start, end, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取控制相关的时间序列项 Get aeration control related time-series items
   * @param {string} [productLine] 工艺线 product line
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlTimeSeriesItemsGet(
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlTimeSeriesItemsGet(productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取控制相关的时间序列 Get aeration control related time-series data
   * @param {GetTimeSeriesDataInput} [getTimeSeriesDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AerationControlApi
   */
  public apiV2AerationControlTimeSeriesPost(
    getTimeSeriesDataInput?: GetTimeSeriesDataInput,
    options?: AxiosRequestConfig,
  ) {
    return AerationControlApiFp(this.configuration)
      .apiV2AerationControlTimeSeriesPost(getTimeSeriesDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
