/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AssemblyConfigOutput } from '../models'
// @ts-ignore
import { ChemicalCostPerFlowOutput } from '../models'
// @ts-ignore
import { DataBoardFullOut } from '../models'
// @ts-ignore
import { DeviceMaintenanceOutput } from '../models'
// @ts-ignore
import { EnergyCostOutput } from '../models'
// @ts-ignore
import { EntireProcessWqOut } from '../models'
// @ts-ignore
import { InletWqOut } from '../models'
// @ts-ignore
import { ModelOptimDto } from '../models'
// @ts-ignore
import { ModelPrecision } from '../models'
// @ts-ignore
import { OutletWqOut } from '../models'
// @ts-ignore
import { PredictAlarmOut } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { StatisDataBoardsView } from '../models'
// @ts-ignore
import { TankRealTimeOutput } from '../models'
/**
 * GeneralDataApi - axios parameter creator
 * @export
 */
export const GeneralDataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 根据展示类型获取点位配置信息
     * @summary 根据展示类型获取点位配置信息
     * @param {number} [displayTypeEnum] 展示类型
     * @param {string} [modelName] 模型名称
     * @param {string} [productLine] 工艺线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetAssemblyConfigsGet: async (
      displayTypeEnum?: number,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetAssemblyConfigs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (displayTypeEnum !== undefined) {
        localVarQueryParameter['displayTypeEnum'] = displayTypeEnum
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetInletWQGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetInletWQ`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetModelPrecisionGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetModelPrecision`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
     * @summary 获取优化建议 Get optimization recommendation data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetOptimOutDataGet: async (
      startTime?: string,
      endTime?: string,
      productLine?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetOptimOutData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetOutletWQGet: async (
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetOutletWQ`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {Array<string>} [alarmTypes] 消息类型 alarm types
     * @param {string} [isNationalStandard] 是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetPredictAlarmGet: async (
      startTime?: string,
      endTime?: string,
      alarmTypes?: Array<string>,
      isNationalStandard?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/GeneralData/GetPredictAlarm`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      if (alarmTypes !== undefined) {
        localVarQueryParameter['AlarmTypes'] = alarmTypes
      }

      if (isNationalStandard !== undefined) {
        localVarQueryParameter['IsNationalStandard'] = isNationalStandard
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
     * @summary 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
     * @param {string} [modelName] 模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputChemicalCostGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/chemical-cost`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取数据看板统计数据 Get statistic data for data board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputDataBoardsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/data-boards`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询关键设备维护预警信息 Get key device maintenance warning information
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputDeviceMaintenanceGet: async (
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/device/maintenance`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 返回过去七天，每天每条工艺线上的实际吨水能耗，总吨水能耗以及与上周的对比情况 energy cost per ton of water of each product line and each day in the past seven days will be returned, as well as total energy cost per ton of water and raise ratio compared to last week
     * @summary 查询吨水能耗统计信息 Get energy cost per ton of inflow water statistic result
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputEnergyCostGet: async (
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/energy-cost`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
     * @summary 通过生产线获取全流程水质 Get water quality entire process data by product line
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputEntireProcessTsByProductlineGet: async (
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/entire-process/ts-by-productline`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取MABR池水质项的分层时间序列数据 Get water quality time-series data in MABR layers
     * @param {string} [productLine]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputMabrLayerDataGet: async (
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/mabr-layer-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 定时统计看板数据
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputRefreshDataBoardsGet: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/refresh-data-boards`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取各个生化池上最新一个时刻的观测值 Get latest monitor data for biochemical tanks
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputTankMonitorDataGet: async (
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/tank-monitor-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (currentTime !== undefined) {
        localVarQueryParameter['currentTime'] = currentTime
      }

      if (modelName !== undefined) {
        localVarQueryParameter['modelName'] = modelName
      }

      if (productLine !== undefined) {
        localVarQueryParameter['productLine'] = productLine
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GeneralDataApi - functional programming interface
 * @export
 */
export const GeneralDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GeneralDataApiAxiosParamCreator(configuration)
  return {
    /**
     * 根据展示类型获取点位配置信息
     * @summary 根据展示类型获取点位配置信息
     * @param {number} [displayTypeEnum] 展示类型
     * @param {string} [modelName] 模型名称
     * @param {string} [productLine] 工艺线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetAssemblyConfigsGet(
      displayTypeEnum?: number,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssemblyConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetAssemblyConfigsGet(
        displayTypeEnum,
        modelName,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetInletWQGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InletWqOut>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetInletWQGet(
        startTime,
        endTime,
        modelName,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetModelPrecisionGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPrecision>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetModelPrecisionGet(
        startTime,
        endTime,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
     * @summary 获取优化建议 Get optimization recommendation data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetOptimOutDataGet(
      startTime?: string,
      endTime?: string,
      productLine?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOptimDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetOptimOutDataGet(
        startTime,
        endTime,
        productLine,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetOutletWQGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutletWqOut>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetOutletWQGet(
        startTime,
        endTime,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {Array<string>} [alarmTypes] 消息类型 alarm types
     * @param {string} [isNationalStandard] 是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiGeneralDataGetPredictAlarmGet(
      startTime?: string,
      endTime?: string,
      alarmTypes?: Array<string>,
      isNationalStandard?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PredictAlarmOut>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiGeneralDataGetPredictAlarmGet(
        startTime,
        endTime,
        alarmTypes,
        isNationalStandard,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
     * @summary 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
     * @param {string} [modelName] 模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputChemicalCostGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChemicalCostPerFlowOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputChemicalCostGet(
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取数据看板统计数据 Get statistic data for data board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputDataBoardsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataBoardFullOut>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputDataBoardsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询关键设备维护预警信息 Get key device maintenance warning information
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputDeviceMaintenanceGet(
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceMaintenanceOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputDeviceMaintenanceGet(
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 返回过去七天，每天每条工艺线上的实际吨水能耗，总吨水能耗以及与上周的对比情况 energy cost per ton of water of each product line and each day in the past seven days will be returned, as well as total energy cost per ton of water and raise ratio compared to last week
     * @summary 查询吨水能耗统计信息 Get energy cost per ton of inflow water statistic result
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputEnergyCostGet(
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnergyCostOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputEnergyCostGet(
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
     * @summary 通过生产线获取全流程水质 Get water quality entire process data by product line
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputEntireProcessTsByProductlineGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntireProcessWqOut>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2OutputEntireProcessTsByProductlineGet(
          productLine,
          startTime,
          endTime,
          modelName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取MABR池水质项的分层时间序列数据 Get water quality time-series data in MABR layers
     * @param {string} [productLine]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputMabrLayerDataGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntireProcessWqOut>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputMabrLayerDataGet(
        productLine,
        startTime,
        endTime,
        modelName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 定时统计看板数据
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputRefreshDataBoardsGet(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatisDataBoardsView>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputRefreshDataBoardsGet(
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取各个生化池上最新一个时刻的观测值 Get latest monitor data for biochemical tanks
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputTankMonitorDataGet(
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TankRealTimeOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputTankMonitorDataGet(
        currentTime,
        modelName,
        productLine,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * GeneralDataApi - factory interface
 * @export
 */
export const GeneralDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GeneralDataApiFp(configuration)
  return {
    /**
     * 根据展示类型获取点位配置信息
     * @summary 根据展示类型获取点位配置信息
     * @param {number} [displayTypeEnum] 展示类型
     * @param {string} [modelName] 模型名称
     * @param {string} [productLine] 工艺线
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetAssemblyConfigsGet(
      displayTypeEnum?: number,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<AssemblyConfigOutput>> {
      return localVarFp
        .apiGeneralDataGetAssemblyConfigsGet(displayTypeEnum, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetInletWQGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<InletWqOut>> {
      return localVarFp
        .apiGeneralDataGetInletWQGet(startTime, endTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetModelPrecisionGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<ModelPrecision>> {
      return localVarFp
        .apiGeneralDataGetModelPrecisionGet(startTime, endTime, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
     * @summary 获取优化建议 Get optimization recommendation data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetOptimOutDataGet(
      startTime?: string,
      endTime?: string,
      productLine?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<ModelOptimDto> {
      return localVarFp
        .apiGeneralDataGetOptimOutDataGet(startTime, endTime, productLine, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetOutletWQGet(
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<OutletWqOut>> {
      return localVarFp
        .apiGeneralDataGetOutletWQGet(startTime, endTime, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {Array<string>} [alarmTypes] 消息类型 alarm types
     * @param {string} [isNationalStandard] 是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiGeneralDataGetPredictAlarmGet(
      startTime?: string,
      endTime?: string,
      alarmTypes?: Array<string>,
      isNationalStandard?: string,
      options?: any,
    ): AxiosPromise<Array<PredictAlarmOut>> {
      return localVarFp
        .apiGeneralDataGetPredictAlarmGet(
          startTime,
          endTime,
          alarmTypes,
          isNationalStandard,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
     * @summary 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
     * @param {string} [modelName] 模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputChemicalCostGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<ChemicalCostPerFlowOutput>> {
      return localVarFp
        .apiV2OutputChemicalCostGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取数据看板统计数据 Get statistic data for data board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputDataBoardsGet(options?: any): AxiosPromise<Array<DataBoardFullOut>> {
      return localVarFp
        .apiV2OutputDataBoardsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询关键设备维护预警信息 Get key device maintenance warning information
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputDeviceMaintenanceGet(
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<DeviceMaintenanceOutput>> {
      return localVarFp
        .apiV2OutputDeviceMaintenanceGet(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 返回过去七天，每天每条工艺线上的实际吨水能耗，总吨水能耗以及与上周的对比情况 energy cost per ton of water of each product line and each day in the past seven days will be returned, as well as total energy cost per ton of water and raise ratio compared to last week
     * @summary 查询吨水能耗统计信息 Get energy cost per ton of inflow water statistic result
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputEnergyCostGet(
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<EnergyCostOutput>> {
      return localVarFp
        .apiV2OutputEnergyCostGet(modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
     * @summary 通过生产线获取全流程水质 Get water quality entire process data by product line
     * @param {string} [productLine] 工艺线代码 product line code
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputEntireProcessTsByProductlineGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<EntireProcessWqOut>> {
      return localVarFp
        .apiV2OutputEntireProcessTsByProductlineGet(
          productLine,
          startTime,
          endTime,
          modelName,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取MABR池水质项的分层时间序列数据 Get water quality time-series data in MABR layers
     * @param {string} [productLine]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [modelName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputMabrLayerDataGet(
      productLine?: string,
      startTime?: string,
      endTime?: string,
      modelName?: string,
      options?: any,
    ): AxiosPromise<Array<EntireProcessWqOut>> {
      return localVarFp
        .apiV2OutputMabrLayerDataGet(productLine, startTime, endTime, modelName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 定时统计看板数据
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputRefreshDataBoardsGet(
      tenantId?: string,
      options?: any,
    ): AxiosPromise<StatisDataBoardsView> {
      return localVarFp
        .apiV2OutputRefreshDataBoardsGet(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取各个生化池上最新一个时刻的观测值 Get latest monitor data for biochemical tanks
     * @param {string} [currentTime] 当前时刻 current time
     * @param {string} [modelName] 模板模型名称 template model name
     * @param {string} [productLine] 工艺线编码 product line code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputTankMonitorDataGet(
      currentTime?: string,
      modelName?: string,
      productLine?: string,
      options?: any,
    ): AxiosPromise<Array<TankRealTimeOutput>> {
      return localVarFp
        .apiV2OutputTankMonitorDataGet(currentTime, modelName, productLine, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GeneralDataApi - object-oriented interface
 * @export
 * @class GeneralDataApi
 * @extends {BaseAPI}
 */
export class GeneralDataApi extends BaseAPI {
  /**
   * 根据展示类型获取点位配置信息
   * @summary 根据展示类型获取点位配置信息
   * @param {number} [displayTypeEnum] 展示类型
   * @param {string} [modelName] 模型名称
   * @param {string} [productLine] 工艺线
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetAssemblyConfigsGet(
    displayTypeEnum?: number,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetAssemblyConfigsGet(displayTypeEnum, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetInletWQGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetInletWQGet(startTime, endTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetModelPrecisionGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetModelPrecisionGet(startTime, endTime, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
   * @summary 获取优化建议 Get optimization recommendation data
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetOptimOutDataGet(
    startTime?: string,
    endTime?: string,
    productLine?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetOptimOutDataGet(startTime, endTime, productLine, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetOutletWQGet(
    startTime?: string,
    endTime?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetOutletWQGet(startTime, endTime, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {Array<string>} [alarmTypes] 消息类型 alarm types
   * @param {string} [isNationalStandard] 是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiGeneralDataGetPredictAlarmGet(
    startTime?: string,
    endTime?: string,
    alarmTypes?: Array<string>,
    isNationalStandard?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiGeneralDataGetPredictAlarmGet(startTime, endTime, alarmTypes, isNationalStandard, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
   * @summary 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
   * @param {string} [modelName] 模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputChemicalCostGet(modelName?: string, options?: AxiosRequestConfig) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputChemicalCostGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取数据看板统计数据 Get statistic data for data board
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputDataBoardsGet(options?: AxiosRequestConfig) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputDataBoardsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询关键设备维护预警信息 Get key device maintenance warning information
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputDeviceMaintenanceGet(
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputDeviceMaintenanceGet(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 返回过去七天，每天每条工艺线上的实际吨水能耗，总吨水能耗以及与上周的对比情况 energy cost per ton of water of each product line and each day in the past seven days will be returned, as well as total energy cost per ton of water and raise ratio compared to last week
   * @summary 查询吨水能耗统计信息 Get energy cost per ton of inflow water statistic result
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputEnergyCostGet(modelName?: string, options?: AxiosRequestConfig) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputEnergyCostGet(modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
   * @summary 通过生产线获取全流程水质 Get water quality entire process data by product line
   * @param {string} [productLine] 工艺线代码 product line code
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputEntireProcessTsByProductlineGet(
    productLine?: string,
    startTime?: string,
    endTime?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputEntireProcessTsByProductlineGet(
        productLine,
        startTime,
        endTime,
        modelName,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取MABR池水质项的分层时间序列数据 Get water quality time-series data in MABR layers
   * @param {string} [productLine]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {string} [modelName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputMabrLayerDataGet(
    productLine?: string,
    startTime?: string,
    endTime?: string,
    modelName?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputMabrLayerDataGet(productLine, startTime, endTime, modelName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 定时统计看板数据
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputRefreshDataBoardsGet(tenantId?: string, options?: AxiosRequestConfig) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputRefreshDataBoardsGet(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取各个生化池上最新一个时刻的观测值 Get latest monitor data for biochemical tanks
   * @param {string} [currentTime] 当前时刻 current time
   * @param {string} [modelName] 模板模型名称 template model name
   * @param {string} [productLine] 工艺线编码 product line code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeneralDataApi
   */
  public apiV2OutputTankMonitorDataGet(
    currentTime?: string,
    modelName?: string,
    productLine?: string,
    options?: AxiosRequestConfig,
  ) {
    return GeneralDataApiFp(this.configuration)
      .apiV2OutputTankMonitorDataGet(currentTime, modelName, productLine, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
