/* eslint-disable */
/**
 * 污水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { RealTimeOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { ToxicAlarmsOutput } from '../models'
// @ts-ignore
import { ToxicityInput } from '../models'
// @ts-ignore
import { ToxicityOutput } from '../models'
/**
 * ToxicityMonitorApi - axios parameter creator
 * @export
 */
export const ToxicityMonitorApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 首页预警信息 Get toxicity alarm data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputToxicAlarmsGet: async (
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/output/toxic-alarms`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (startTime !== undefined) {
        localVarQueryParameter['startTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取预警记录 Get historical toxicity alarm records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorAlarmHistoryPost: async (
      toxicityInput?: ToxicityInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/toxicity-monitor/alarm-history`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        toxicityInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取质控记录 Get historical quality control records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorControlHistoryPost: async (
      toxicityInput?: ToxicityInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/toxicity-monitor/control-history`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        toxicityInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取毒性监测记录 Get historical toxicity monitoring records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorMonitorHistoryPost: async (
      toxicityInput?: ToxicityInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/toxicity-monitor/monitor-history`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        toxicityInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorRealTimeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/toxicity-monitor/real-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ToxicityMonitorApi - functional programming interface
 * @export
 */
export const ToxicityMonitorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ToxicityMonitorApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 首页预警信息 Get toxicity alarm data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OutputToxicAlarmsGet(
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ToxicAlarmsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OutputToxicAlarmsGet(
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取预警记录 Get historical toxicity alarm records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ToxicityMonitorAlarmHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToxicityOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ToxicityMonitorAlarmHistoryPost(toxicityInput, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取质控记录 Get historical quality control records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ToxicityMonitorControlHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToxicityOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ToxicityMonitorControlHistoryPost(
          toxicityInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取毒性监测记录 Get historical toxicity monitoring records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ToxicityMonitorMonitorHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToxicityOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ToxicityMonitorMonitorHistoryPost(
          toxicityInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2ToxicityMonitorRealTimeGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RealTimeOutput>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2ToxicityMonitorRealTimeGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ToxicityMonitorApi - factory interface
 * @export
 */
export const ToxicityMonitorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ToxicityMonitorApiFp(configuration)
  return {
    /**
     *
     * @summary 首页预警信息 Get toxicity alarm data
     * @param {string} [startTime] 开始时间 start time
     * @param {string} [endTime] 结束时间 end time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OutputToxicAlarmsGet(
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<ToxicAlarmsOutput>> {
      return localVarFp
        .apiV2OutputToxicAlarmsGet(startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取预警记录 Get historical toxicity alarm records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorAlarmHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: any,
    ): AxiosPromise<ToxicityOutput> {
      return localVarFp
        .apiV2ToxicityMonitorAlarmHistoryPost(toxicityInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取质控记录 Get historical quality control records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorControlHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: any,
    ): AxiosPromise<ToxicityOutput> {
      return localVarFp
        .apiV2ToxicityMonitorControlHistoryPost(toxicityInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取毒性监测记录 Get historical toxicity monitoring records
     * @param {ToxicityInput} [toxicityInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorMonitorHistoryPost(
      toxicityInput?: ToxicityInput,
      options?: any,
    ): AxiosPromise<ToxicityOutput> {
      return localVarFp
        .apiV2ToxicityMonitorMonitorHistoryPost(toxicityInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ToxicityMonitorRealTimeGet(options?: any): AxiosPromise<Array<RealTimeOutput>> {
      return localVarFp
        .apiV2ToxicityMonitorRealTimeGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ToxicityMonitorApi - object-oriented interface
 * @export
 * @class ToxicityMonitorApi
 * @extends {BaseAPI}
 */
export class ToxicityMonitorApi extends BaseAPI {
  /**
   *
   * @summary 首页预警信息 Get toxicity alarm data
   * @param {string} [startTime] 开始时间 start time
   * @param {string} [endTime] 结束时间 end time
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToxicityMonitorApi
   */
  public apiV2OutputToxicAlarmsGet(
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ToxicityMonitorApiFp(this.configuration)
      .apiV2OutputToxicAlarmsGet(startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取预警记录 Get historical toxicity alarm records
   * @param {ToxicityInput} [toxicityInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToxicityMonitorApi
   */
  public apiV2ToxicityMonitorAlarmHistoryPost(
    toxicityInput?: ToxicityInput,
    options?: AxiosRequestConfig,
  ) {
    return ToxicityMonitorApiFp(this.configuration)
      .apiV2ToxicityMonitorAlarmHistoryPost(toxicityInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取质控记录 Get historical quality control records
   * @param {ToxicityInput} [toxicityInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToxicityMonitorApi
   */
  public apiV2ToxicityMonitorControlHistoryPost(
    toxicityInput?: ToxicityInput,
    options?: AxiosRequestConfig,
  ) {
    return ToxicityMonitorApiFp(this.configuration)
      .apiV2ToxicityMonitorControlHistoryPost(toxicityInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取毒性监测记录 Get historical toxicity monitoring records
   * @param {ToxicityInput} [toxicityInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToxicityMonitorApi
   */
  public apiV2ToxicityMonitorMonitorHistoryPost(
    toxicityInput?: ToxicityInput,
    options?: AxiosRequestConfig,
  ) {
    return ToxicityMonitorApiFp(this.configuration)
      .apiV2ToxicityMonitorMonitorHistoryPost(toxicityInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToxicityMonitorApi
   */
  public apiV2ToxicityMonitorRealTimeGet(options?: AxiosRequestConfig) {
    return ToxicityMonitorApiFp(this.configuration)
      .apiV2ToxicityMonitorRealTimeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
