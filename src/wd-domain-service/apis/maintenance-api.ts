/* eslint-disable */
/**
 * 供水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddRepairEventDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { RepairEventDto } from '../models'
// @ts-ignore
import { RepairEventFilterSearchInput } from '../models'
// @ts-ignore
import { RepairEventStatisticDto } from '../models'
/**
 * MaintenanceApi - axios parameter creator
 * @export
 */
export const MaintenanceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增维修事件
     * @param {AddRepairEventDto} [addRepairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceAddRepairEventPost: async (
      addRepairEventDto?: AddRepairEventDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/maintenance/add-repair-event`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addRepairEventDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除维修事件
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceDeleteRepairEventPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/maintenance/delete-repair-event`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型id获取关联的维修事件列表
     * @param {string} [modelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceGetRepairEventListGet: async (
      modelId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/maintenance/get-repair-event-list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelId !== undefined) {
        localVarQueryParameter['modelId'] = modelId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取维修事件统计信息
     * @param {RepairEventFilterSearchInput} [repairEventFilterSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceGetRepairEventStatisticPost: async (
      repairEventFilterSearchInput?: RepairEventFilterSearchInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/maintenance/get-repair-event-statistic`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        repairEventFilterSearchInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新维修事件
     * @param {RepairEventDto} [repairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceUpdateRepairEventPost: async (
      repairEventDto?: RepairEventDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/maintenance/update-repair-event`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        repairEventDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MaintenanceApi - functional programming interface
 * @export
 */
export const MaintenanceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MaintenanceApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增维修事件
     * @param {AddRepairEventDto} [addRepairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdMaintenanceAddRepairEventPost(
      addRepairEventDto?: AddRepairEventDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepairEventDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdMaintenanceAddRepairEventPost(
          addRepairEventDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除维修事件
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdMaintenanceDeleteRepairEventPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdMaintenanceDeleteRepairEventPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型id获取关联的维修事件列表
     * @param {string} [modelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdMaintenanceGetRepairEventListGet(
      modelId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RepairEventDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdMaintenanceGetRepairEventListGet(
          modelId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取维修事件统计信息
     * @param {RepairEventFilterSearchInput} [repairEventFilterSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdMaintenanceGetRepairEventStatisticPost(
      repairEventFilterSearchInput?: RepairEventFilterSearchInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RepairEventStatisticDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdMaintenanceGetRepairEventStatisticPost(
          repairEventFilterSearchInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新维修事件
     * @param {RepairEventDto} [repairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdMaintenanceUpdateRepairEventPost(
      repairEventDto?: RepairEventDto,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepairEventDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdMaintenanceUpdateRepairEventPost(
          repairEventDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * MaintenanceApi - factory interface
 * @export
 */
export const MaintenanceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MaintenanceApiFp(configuration)
  return {
    /**
     *
     * @summary 新增维修事件
     * @param {AddRepairEventDto} [addRepairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceAddRepairEventPost(
      addRepairEventDto?: AddRepairEventDto,
      options?: any,
    ): AxiosPromise<RepairEventDto> {
      return localVarFp
        .apiV1DomainWdMaintenanceAddRepairEventPost(addRepairEventDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除维修事件
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceDeleteRepairEventPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DomainWdMaintenanceDeleteRepairEventPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型id获取关联的维修事件列表
     * @param {string} [modelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceGetRepairEventListGet(
      modelId?: string,
      options?: any,
    ): AxiosPromise<Array<RepairEventDto>> {
      return localVarFp
        .apiV1DomainWdMaintenanceGetRepairEventListGet(modelId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取维修事件统计信息
     * @param {RepairEventFilterSearchInput} [repairEventFilterSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceGetRepairEventStatisticPost(
      repairEventFilterSearchInput?: RepairEventFilterSearchInput,
      options?: any,
    ): AxiosPromise<Array<RepairEventStatisticDto>> {
      return localVarFp
        .apiV1DomainWdMaintenanceGetRepairEventStatisticPost(repairEventFilterSearchInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新维修事件
     * @param {RepairEventDto} [repairEventDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdMaintenanceUpdateRepairEventPost(
      repairEventDto?: RepairEventDto,
      options?: any,
    ): AxiosPromise<RepairEventDto> {
      return localVarFp
        .apiV1DomainWdMaintenanceUpdateRepairEventPost(repairEventDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * MaintenanceApi - object-oriented interface
 * @export
 * @class MaintenanceApi
 * @extends {BaseAPI}
 */
export class MaintenanceApi extends BaseAPI {
  /**
   *
   * @summary 新增维修事件
   * @param {AddRepairEventDto} [addRepairEventDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintenanceApi
   */
  public apiV1DomainWdMaintenanceAddRepairEventPost(
    addRepairEventDto?: AddRepairEventDto,
    options?: AxiosRequestConfig,
  ) {
    return MaintenanceApiFp(this.configuration)
      .apiV1DomainWdMaintenanceAddRepairEventPost(addRepairEventDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除维修事件
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintenanceApi
   */
  public apiV1DomainWdMaintenanceDeleteRepairEventPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return MaintenanceApiFp(this.configuration)
      .apiV1DomainWdMaintenanceDeleteRepairEventPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型id获取关联的维修事件列表
   * @param {string} [modelId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintenanceApi
   */
  public apiV1DomainWdMaintenanceGetRepairEventListGet(
    modelId?: string,
    options?: AxiosRequestConfig,
  ) {
    return MaintenanceApiFp(this.configuration)
      .apiV1DomainWdMaintenanceGetRepairEventListGet(modelId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取维修事件统计信息
   * @param {RepairEventFilterSearchInput} [repairEventFilterSearchInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintenanceApi
   */
  public apiV1DomainWdMaintenanceGetRepairEventStatisticPost(
    repairEventFilterSearchInput?: RepairEventFilterSearchInput,
    options?: AxiosRequestConfig,
  ) {
    return MaintenanceApiFp(this.configuration)
      .apiV1DomainWdMaintenanceGetRepairEventStatisticPost(repairEventFilterSearchInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新维修事件
   * @param {RepairEventDto} [repairEventDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintenanceApi
   */
  public apiV1DomainWdMaintenanceUpdateRepairEventPost(
    repairEventDto?: RepairEventDto,
    options?: AxiosRequestConfig,
  ) {
    return MaintenanceApiFp(this.configuration)
      .apiV1DomainWdMaintenanceUpdateRepairEventPost(repairEventDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
