/* eslint-disable */
/**
 * 供水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CurrentOnlineData } from '../models'
// @ts-ignore
import { CurrentOnlineModelData } from '../models'
// @ts-ignore
import { DeviceDetailInfo } from '../models'
// @ts-ignore
import { DeviceIndicatorInfo } from '../models'
// @ts-ignore
import { DeviceIndicatorPara } from '../models'
// @ts-ignore
import { GetAccuracyPara } from '../models'
// @ts-ignore
import { GetCurrentDataPara } from '../models'
// @ts-ignore
import { GetOnlineModelDataPara } from '../models'
// @ts-ignore
import { OnlineAccuracyData } from '../models'
// @ts-ignore
import { OnlineData } from '../models'
// @ts-ignore
import { OnlineModelData } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { TankStorageData } from '../models'
/**
 * OnlineApi - axios parameter creator
 * @export
 */
export const OnlineApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 根据方案id和数据类型获取当前方案的模型精度
     * @param {GetAccuracyPara} [getAccuracyPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetAccuracyByScenarioidPost: async (
      getAccuracyPara?: GetAccuracyPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-accuracy-by-scenarioid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAccuracyPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [templateId]
     * @param {string} [bForceRefreshCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetAllDeviceGet: async (
      templateId?: string,
      bForceRefreshCache?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-all-device`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (bForceRefreshCache !== undefined) {
        localVarQueryParameter['bForceRefreshCache'] = bForceRefreshCache
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetCurrentOnlineDataPost: async (
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-current-online-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deviceIndicatorPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetCurrentOnlineModelDataPost: async (
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-current-online-model-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deviceIndicatorPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据分组获取设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetDeviceByGroupidGet: async (
      groupId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-device-by-groupid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取实测点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetOnlineDataPost: async (
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-online-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOnlineModelDataPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取实测和模拟点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetOnlineModelDataPost: async (
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-online-model-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOnlineModelDataPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取水池可调蓄量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetTankStoragePost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/online/get-tank-storage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdOnlineGetCurrentOnlineDataPost: async (
      getCurrentDataPara?: GetCurrentDataPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/online/get-current-online-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getCurrentDataPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdOnlineGetCurrentOnlineModelDataPost: async (
      getCurrentDataPara?: GetCurrentDataPara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/online/get-current-online-model-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getCurrentDataPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OnlineApi - functional programming interface
 * @export
 */
export const OnlineApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OnlineApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据方案id和数据类型获取当前方案的模型精度
     * @param {GetAccuracyPara} [getAccuracyPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetAccuracyByScenarioidPost(
      getAccuracyPara?: GetAccuracyPara,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineAccuracyData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetAccuracyByScenarioidPost(
          getAccuracyPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [templateId]
     * @param {string} [bForceRefreshCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetAllDeviceGet(
      templateId?: string,
      bForceRefreshCache?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceDetailInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdOnlineGetAllDeviceGet(
        templateId,
        bForceRefreshCache,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetCurrentOnlineDataPost(
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrentOnlineData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetCurrentOnlineDataPost(
          deviceIndicatorPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrentOnlineModelData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(
          deviceIndicatorPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据分组获取设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetDeviceByGroupidGet(
      groupId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetDeviceByGroupidGet(groupId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取实测点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetOnlineDataPost(
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineData>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetOnlineDataPost(
          getOnlineModelDataPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取实测和模拟点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetOnlineModelDataPost(
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineModelData>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetOnlineModelDataPost(
          getOnlineModelDataPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取水池可调蓄量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdOnlineGetTankStoragePost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TankStorageData>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdOnlineGetTankStoragePost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdOnlineGetCurrentOnlineDataPost(
      getCurrentDataPara?: GetCurrentDataPara,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrentOnlineData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2DomainWdOnlineGetCurrentOnlineDataPost(
          getCurrentDataPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(
      getCurrentDataPara?: GetCurrentDataPara,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrentOnlineModelData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(
          getCurrentDataPara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * OnlineApi - factory interface
 * @export
 */
export const OnlineApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OnlineApiFp(configuration)
  return {
    /**
     *
     * @summary 根据方案id和数据类型获取当前方案的模型精度
     * @param {GetAccuracyPara} [getAccuracyPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetAccuracyByScenarioidPost(
      getAccuracyPara?: GetAccuracyPara,
      options?: any,
    ): AxiosPromise<Array<OnlineAccuracyData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetAccuracyByScenarioidPost(getAccuracyPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [templateId]
     * @param {string} [bForceRefreshCache]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetAllDeviceGet(
      templateId?: string,
      bForceRefreshCache?: string,
      options?: any,
    ): AxiosPromise<Array<DeviceDetailInfo>> {
      return localVarFp
        .apiV1DomainWdOnlineGetAllDeviceGet(templateId, bForceRefreshCache, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetCurrentOnlineDataPost(
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options?: any,
    ): AxiosPromise<Array<CurrentOnlineData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetCurrentOnlineDataPost(deviceIndicatorPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(
      deviceIndicatorPara?: Array<DeviceIndicatorPara>,
      options?: any,
    ): AxiosPromise<Array<CurrentOnlineModelData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(deviceIndicatorPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据分组获取设备详细信息（包含设备下的指标信息和对应的模型点位信息）
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetDeviceByGroupidGet(
      groupId?: string,
      options?: any,
    ): AxiosPromise<Array<DeviceIndicatorInfo>> {
      return localVarFp
        .apiV1DomainWdOnlineGetDeviceByGroupidGet(groupId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取实测点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetOnlineDataPost(
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options?: any,
    ): AxiosPromise<Array<OnlineData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetOnlineDataPost(getOnlineModelDataPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取实测和模拟点位的时序值
     * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetOnlineModelDataPost(
      getOnlineModelDataPara?: GetOnlineModelDataPara,
      options?: any,
    ): AxiosPromise<Array<OnlineModelData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetOnlineModelDataPost(getOnlineModelDataPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取水池可调蓄量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdOnlineGetTankStoragePost(options?: any): AxiosPromise<Array<TankStorageData>> {
      return localVarFp
        .apiV1DomainWdOnlineGetTankStoragePost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取当前时刻测点的实测
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdOnlineGetCurrentOnlineDataPost(
      getCurrentDataPara?: GetCurrentDataPara,
      options?: any,
    ): AxiosPromise<Array<CurrentOnlineData>> {
      return localVarFp
        .apiV2DomainWdOnlineGetCurrentOnlineDataPost(getCurrentDataPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取当前时刻测点的实测及对应的模拟值
     * @param {GetCurrentDataPara} [getCurrentDataPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(
      getCurrentDataPara?: GetCurrentDataPara,
      options?: any,
    ): AxiosPromise<Array<CurrentOnlineModelData>> {
      return localVarFp
        .apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(getCurrentDataPara, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OnlineApi - object-oriented interface
 * @export
 * @class OnlineApi
 * @extends {BaseAPI}
 */
export class OnlineApi extends BaseAPI {
  /**
   *
   * @summary 根据方案id和数据类型获取当前方案的模型精度
   * @param {GetAccuracyPara} [getAccuracyPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetAccuracyByScenarioidPost(
    getAccuracyPara?: GetAccuracyPara,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetAccuracyByScenarioidPost(getAccuracyPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有设备详细信息（包含设备下的指标信息和对应的模型点位信息）
   * @param {string} [templateId]
   * @param {string} [bForceRefreshCache]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetAllDeviceGet(
    templateId?: string,
    bForceRefreshCache?: string,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetAllDeviceGet(templateId, bForceRefreshCache, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取当前时刻测点的实测
   * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetCurrentOnlineDataPost(
    deviceIndicatorPara?: Array<DeviceIndicatorPara>,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetCurrentOnlineDataPost(deviceIndicatorPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取当前时刻测点的实测及对应的模拟值
   * @param {Array<DeviceIndicatorPara>} [deviceIndicatorPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(
    deviceIndicatorPara?: Array<DeviceIndicatorPara>,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetCurrentOnlineModelDataPost(deviceIndicatorPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据分组获取设备详细信息（包含设备下的指标信息和对应的模型点位信息）
   * @param {string} [groupId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetDeviceByGroupidGet(groupId?: string, options?: AxiosRequestConfig) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetDeviceByGroupidGet(groupId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取实测点位的时序值
   * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetOnlineDataPost(
    getOnlineModelDataPara?: GetOnlineModelDataPara,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetOnlineDataPost(getOnlineModelDataPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取实测和模拟点位的时序值
   * @param {GetOnlineModelDataPara} [getOnlineModelDataPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetOnlineModelDataPost(
    getOnlineModelDataPara?: GetOnlineModelDataPara,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetOnlineModelDataPost(getOnlineModelDataPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取水池可调蓄量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV1DomainWdOnlineGetTankStoragePost(options?: AxiosRequestConfig) {
    return OnlineApiFp(this.configuration)
      .apiV1DomainWdOnlineGetTankStoragePost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取当前时刻测点的实测
   * @param {GetCurrentDataPara} [getCurrentDataPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV2DomainWdOnlineGetCurrentOnlineDataPost(
    getCurrentDataPara?: GetCurrentDataPara,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV2DomainWdOnlineGetCurrentOnlineDataPost(getCurrentDataPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取当前时刻测点的实测及对应的模拟值
   * @param {GetCurrentDataPara} [getCurrentDataPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnlineApi
   */
  public apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(
    getCurrentDataPara?: GetCurrentDataPara,
    options?: AxiosRequestConfig,
  ) {
    return OnlineApiFp(this.configuration)
      .apiV2DomainWdOnlineGetCurrentOnlineModelDataPost(getCurrentDataPara, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
