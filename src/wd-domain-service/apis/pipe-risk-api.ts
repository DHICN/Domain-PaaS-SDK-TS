/* eslint-disable */
/**
 * wd-domain-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddBrokenPipeRiskParaCfgInput } from '../models'
// @ts-ignore
import { AddPipeRiskPropertyInput } from '../models'
// @ts-ignore
import { AddPipeRiskWeightInput } from '../models'
// @ts-ignore
import { Int32DoubleKeyValue } from '../models'
// @ts-ignore
import { Int32ModelPipeInfoListKeyValue } from '../models'
// @ts-ignore
import { ModelPipeInfo } from '../models'
// @ts-ignore
import { PipeRiskParamOutput } from '../models'
// @ts-ignore
import { PipeRiskPropertyOutput } from '../models'
// @ts-ignore
import { PipeRiskWeightOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdatePipeRiskParamInput } from '../models'
// @ts-ignore
import { UpdatePipeRiskPropertyInput } from '../models'
// @ts-ignore
import { UpdatePipeRiskWeightInput } from '../models'
/**
 * PipeRiskApi - axios parameter creator
 * @export
 */
export const PipeRiskApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 爆管风险计算
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskCalculateGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/calculate`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取各风险等级管道长度所占全管道长度比例
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskGetLengthPercentGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/get-length-percent`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量新增爆管风险参数信息
     * @param {Array<AddBrokenPipeRiskParaCfgInput>} [addBrokenPipeRiskParaCfgInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaAddPost: async (
      addBrokenPipeRiskParaCfgInput?: Array<AddBrokenPipeRiskParaCfgInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/para/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addBrokenPipeRiskParaCfgInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除参数配置信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/para/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据权重Id获取爆管风险参数信息
     * @param {string} [riskWeightId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet: async (
      riskWeightId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/para/get-by-weight-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (riskWeightId !== undefined) {
        localVarQueryParameter['riskWeightId'] = riskWeightId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新爆管风险参数信息
     * @param {Array<UpdatePipeRiskParamInput>} [updatePipeRiskParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaUpdatePost: async (
      updatePipeRiskParamInput?: Array<UpdatePipeRiskParamInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/para/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePipeRiskParamInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取各个等级的风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/result/get-classify-pipes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取高爆管风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/result/get-highrisk-pipes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增管道风险相关属性信息
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyAddPost: async (
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/risk-property/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPipeRiskPropertyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有爆管相关属性
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/risk-property/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除管道风险相关属性
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/risk-property/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 重新保存所有爆管相关属性
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyResavePost: async (
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/risk-property/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPipeRiskPropertyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新管道风险相关属性
     * @param {Array<UpdatePipeRiskPropertyInput>} [updatePipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost: async (
      updatePipeRiskPropertyInput?: Array<UpdatePipeRiskPropertyInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/risk-property/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePipeRiskPropertyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量新增爆管风险权重
     * @param {Array<AddPipeRiskWeightInput>} [addPipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightAddPost: async (
      addPipeRiskWeightInput?: Array<AddPipeRiskWeightInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/weight/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPipeRiskWeightInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有爆管风险权重信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/weight/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除权重信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/weight/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新爆管风险权重
     * @param {Array<UpdatePipeRiskWeightInput>} [updatePipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightUpdatePost: async (
      updatePipeRiskWeightInput?: Array<UpdatePipeRiskWeightInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/config/pipe-risk/weight/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePipeRiskWeightInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PipeRiskApi - functional programming interface
 * @export
 */
export const PipeRiskApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PipeRiskApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 爆管风险计算
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskCalculateGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskCalculateGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取各风险等级管道长度所占全管道长度比例
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskGetLengthPercentGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Int32DoubleKeyValue>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskGetLengthPercentGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量新增爆管风险参数信息
     * @param {Array<AddBrokenPipeRiskParaCfgInput>} [addBrokenPipeRiskParaCfgInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskParaAddPost(
      addBrokenPipeRiskParaCfgInput?: Array<AddBrokenPipeRiskParaCfgInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskParaAddPost(
          addBrokenPipeRiskParaCfgInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除参数配置信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskParaDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskParaDeletePost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据权重Id获取爆管风险参数信息
     * @param {string} [riskWeightId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(
      riskWeightId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PipeRiskParamOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(
          riskWeightId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新爆管风险参数信息
     * @param {Array<UpdatePipeRiskParamInput>} [updatePipeRiskParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskParaUpdatePost(
      updatePipeRiskParamInput?: Array<UpdatePipeRiskParamInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskParaUpdatePost(
          updatePipeRiskParamInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取各个等级的风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Int32ModelPipeInfoListKeyValue>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取高爆管风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPipeInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增管道风险相关属性信息
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(
          addPipeRiskPropertyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有爆管相关属性
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PipeRiskPropertyOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除管道风险相关属性
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 重新保存所有爆管相关属性
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(
          addPipeRiskPropertyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新管道风险相关属性
     * @param {Array<UpdatePipeRiskPropertyInput>} [updatePipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(
      updatePipeRiskPropertyInput?: Array<UpdatePipeRiskPropertyInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(
          updatePipeRiskPropertyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量新增爆管风险权重
     * @param {Array<AddPipeRiskWeightInput>} [addPipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskWeightAddPost(
      addPipeRiskWeightInput?: Array<AddPipeRiskWeightInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskWeightAddPost(
          addPipeRiskWeightInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有爆管风险权重信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskWeightAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PipeRiskWeightOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskWeightAllGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除权重信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskWeightDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskWeightDeletePost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新爆管风险权重
     * @param {Array<UpdatePipeRiskWeightInput>} [updatePipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdConfigPipeRiskWeightUpdatePost(
      updatePipeRiskWeightInput?: Array<UpdatePipeRiskWeightInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdConfigPipeRiskWeightUpdatePost(
          updatePipeRiskWeightInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * PipeRiskApi - factory interface
 * @export
 */
export const PipeRiskApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PipeRiskApiFp(configuration)
  return {
    /**
     *
     * @summary 爆管风险计算
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskCalculateGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskCalculateGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取各风险等级管道长度所占全管道长度比例
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskGetLengthPercentGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<Int32DoubleKeyValue>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskGetLengthPercentGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量新增爆管风险参数信息
     * @param {Array<AddBrokenPipeRiskParaCfgInput>} [addBrokenPipeRiskParaCfgInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaAddPost(
      addBrokenPipeRiskParaCfgInput?: Array<AddBrokenPipeRiskParaCfgInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskParaAddPost(addBrokenPipeRiskParaCfgInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除参数配置信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskParaDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据权重Id获取爆管风险参数信息
     * @param {string} [riskWeightId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(
      riskWeightId?: string,
      options?: any,
    ): AxiosPromise<Array<PipeRiskParamOutput>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(riskWeightId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新爆管风险参数信息
     * @param {Array<UpdatePipeRiskParamInput>} [updatePipeRiskParamInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskParaUpdatePost(
      updatePipeRiskParamInput?: Array<UpdatePipeRiskParamInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskParaUpdatePost(updatePipeRiskParamInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取各个等级的风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<Int32ModelPipeInfoListKeyValue>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取高爆管风险管道信息
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<ModelPipeInfo>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增管道风险相关属性信息
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(addPipeRiskPropertyInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有爆管相关属性
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(
      options?: any,
    ): AxiosPromise<Array<PipeRiskPropertyOutput>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除管道风险相关属性
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 重新保存所有爆管相关属性
     * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(
      addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(addPipeRiskPropertyInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新管道风险相关属性
     * @param {Array<UpdatePipeRiskPropertyInput>} [updatePipeRiskPropertyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(
      updatePipeRiskPropertyInput?: Array<UpdatePipeRiskPropertyInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(updatePipeRiskPropertyInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量新增爆管风险权重
     * @param {Array<AddPipeRiskWeightInput>} [addPipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightAddPost(
      addPipeRiskWeightInput?: Array<AddPipeRiskWeightInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskWeightAddPost(addPipeRiskWeightInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有爆管风险权重信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightAllGet(
      options?: any,
    ): AxiosPromise<Array<PipeRiskWeightOutput>> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskWeightAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除权重信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskWeightDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新爆管风险权重
     * @param {Array<UpdatePipeRiskWeightInput>} [updatePipeRiskWeightInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdConfigPipeRiskWeightUpdatePost(
      updatePipeRiskWeightInput?: Array<UpdatePipeRiskWeightInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdConfigPipeRiskWeightUpdatePost(updatePipeRiskWeightInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PipeRiskApi - object-oriented interface
 * @export
 * @class PipeRiskApi
 * @extends {BaseAPI}
 */
export class PipeRiskApi extends BaseAPI {
  /**
   *
   * @summary 爆管风险计算
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskCalculateGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskCalculateGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取各风险等级管道长度所占全管道长度比例
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskGetLengthPercentGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskGetLengthPercentGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量新增爆管风险参数信息
   * @param {Array<AddBrokenPipeRiskParaCfgInput>} [addBrokenPipeRiskParaCfgInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskParaAddPost(
    addBrokenPipeRiskParaCfgInput?: Array<AddBrokenPipeRiskParaCfgInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskParaAddPost(addBrokenPipeRiskParaCfgInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除参数配置信息
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskParaDeletePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskParaDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据权重Id获取爆管风险参数信息
   * @param {string} [riskWeightId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(
    riskWeightId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskParaGetByWeightIdGet(riskWeightId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新爆管风险参数信息
   * @param {Array<UpdatePipeRiskParamInput>} [updatePipeRiskParamInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskParaUpdatePost(
    updatePipeRiskParamInput?: Array<UpdatePipeRiskParamInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskParaUpdatePost(updatePipeRiskParamInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取各个等级的风险管道信息
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskResultGetClassifyPipesGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取高爆管风险管道信息
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskResultGetHighriskPipesGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增管道风险相关属性信息
   * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(
    addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskRiskPropertyAddPost(addPipeRiskPropertyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有爆管相关属性
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(options?: AxiosRequestConfig) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskRiskPropertyAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除管道风险相关属性
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskRiskPropertyDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 重新保存所有爆管相关属性
   * @param {Array<AddPipeRiskPropertyInput>} [addPipeRiskPropertyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(
    addPipeRiskPropertyInput?: Array<AddPipeRiskPropertyInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskRiskPropertyResavePost(addPipeRiskPropertyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新管道风险相关属性
   * @param {Array<UpdatePipeRiskPropertyInput>} [updatePipeRiskPropertyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(
    updatePipeRiskPropertyInput?: Array<UpdatePipeRiskPropertyInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskRiskPropertyUpdatePost(updatePipeRiskPropertyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量新增爆管风险权重
   * @param {Array<AddPipeRiskWeightInput>} [addPipeRiskWeightInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskWeightAddPost(
    addPipeRiskWeightInput?: Array<AddPipeRiskWeightInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskWeightAddPost(addPipeRiskWeightInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有爆管风险权重信息
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskWeightAllGet(options?: AxiosRequestConfig) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskWeightAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除权重信息
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskWeightDeletePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskWeightDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新爆管风险权重
   * @param {Array<UpdatePipeRiskWeightInput>} [updatePipeRiskWeightInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipeRiskApi
   */
  public apiV1DomainWdConfigPipeRiskWeightUpdatePost(
    updatePipeRiskWeightInput?: Array<UpdatePipeRiskWeightInput>,
    options?: AxiosRequestConfig,
  ) {
    return PipeRiskApiFp(this.configuration)
      .apiV1DomainWdConfigPipeRiskWeightUpdatePost(updatePipeRiskWeightInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
