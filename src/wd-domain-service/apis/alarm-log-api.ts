/* eslint-disable */
/**
 * wd-domain-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AlarmLogDto } from '../models'
// @ts-ignore
import { GetAlarmLogByTypeInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * AlarmLogApi - axios parameter creator
 * @export
 */
export const AlarmLogApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增报警日志
     * @param {string} [tenantId]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmAddPost: async (
      tenantId?: string,
      realSyncFrequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/log/alarm/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (realSyncFrequency !== undefined) {
        localVarQueryParameter['realSyncFrequency'] = realSyncFrequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据类型获取报警日志
     * @param {GetAlarmLogByTypeInput} [getAlarmLogByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmGetByTypePost: async (
      getAlarmLogByTypeInput?: GetAlarmLogByTypeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/log/alarm/get-by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAlarmLogByTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 注册调度日志
     * @param {string} [cron]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmRegisterGet: async (
      cron?: string,
      realSyncFrequency?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/log/alarm/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (cron !== undefined) {
        localVarQueryParameter['cron'] = cron
      }

      if (realSyncFrequency !== undefined) {
        localVarQueryParameter['realSyncFrequency'] = realSyncFrequency
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AlarmLogApi - functional programming interface
 * @export
 */
export const AlarmLogApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AlarmLogApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增报警日志
     * @param {string} [tenantId]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdLogAlarmAddPost(
      tenantId?: string,
      realSyncFrequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdLogAlarmAddPost(
        tenantId,
        realSyncFrequency,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据类型获取报警日志
     * @param {GetAlarmLogByTypeInput} [getAlarmLogByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdLogAlarmGetByTypePost(
      getAlarmLogByTypeInput?: GetAlarmLogByTypeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlarmLogDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdLogAlarmGetByTypePost(
        getAlarmLogByTypeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 注册调度日志
     * @param {string} [cron]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdLogAlarmRegisterGet(
      cron?: string,
      realSyncFrequency?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdLogAlarmRegisterGet(
        cron,
        realSyncFrequency,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AlarmLogApi - factory interface
 * @export
 */
export const AlarmLogApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AlarmLogApiFp(configuration)
  return {
    /**
     *
     * @summary 新增报警日志
     * @param {string} [tenantId]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmAddPost(
      tenantId?: string,
      realSyncFrequency?: number,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DomainWdLogAlarmAddPost(tenantId, realSyncFrequency, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据类型获取报警日志
     * @param {GetAlarmLogByTypeInput} [getAlarmLogByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmGetByTypePost(
      getAlarmLogByTypeInput?: GetAlarmLogByTypeInput,
      options?: any,
    ): AxiosPromise<Array<AlarmLogDto>> {
      return localVarFp
        .apiV1DomainWdLogAlarmGetByTypePost(getAlarmLogByTypeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 注册调度日志
     * @param {string} [cron]
     * @param {number} [realSyncFrequency]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdLogAlarmRegisterGet(
      cron?: string,
      realSyncFrequency?: number,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DomainWdLogAlarmRegisterGet(cron, realSyncFrequency, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AlarmLogApi - object-oriented interface
 * @export
 * @class AlarmLogApi
 * @extends {BaseAPI}
 */
export class AlarmLogApi extends BaseAPI {
  /**
   *
   * @summary 新增报警日志
   * @param {string} [tenantId]
   * @param {number} [realSyncFrequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmLogApi
   */
  public apiV1DomainWdLogAlarmAddPost(
    tenantId?: string,
    realSyncFrequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return AlarmLogApiFp(this.configuration)
      .apiV1DomainWdLogAlarmAddPost(tenantId, realSyncFrequency, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据类型获取报警日志
   * @param {GetAlarmLogByTypeInput} [getAlarmLogByTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmLogApi
   */
  public apiV1DomainWdLogAlarmGetByTypePost(
    getAlarmLogByTypeInput?: GetAlarmLogByTypeInput,
    options?: AxiosRequestConfig,
  ) {
    return AlarmLogApiFp(this.configuration)
      .apiV1DomainWdLogAlarmGetByTypePost(getAlarmLogByTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 注册调度日志
   * @param {string} [cron]
   * @param {number} [realSyncFrequency]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AlarmLogApi
   */
  public apiV1DomainWdLogAlarmRegisterGet(
    cron?: string,
    realSyncFrequency?: number,
    options?: AxiosRequestConfig,
  ) {
    return AlarmLogApiFp(this.configuration)
      .apiV1DomainWdLogAlarmRegisterGet(cron, realSyncFrequency, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
