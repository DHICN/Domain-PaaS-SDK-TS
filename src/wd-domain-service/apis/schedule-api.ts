/* eslint-disable */
/**
 * wd-domain-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ControlTsInfo } from '../models'
// @ts-ignore
import { CurveInfo } from '../models'
// @ts-ignore
import { CurveTsInfo } from '../models'
// @ts-ignore
import { PatternInfo } from '../models'
// @ts-ignore
import { PatternTsInfo } from '../models'
// @ts-ignore
import { PumpInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateControlTsInput } from '../models'
// @ts-ignore
import { UpdateCurveTsInput } from '../models'
// @ts-ignore
import { UpdatePatternTsInput } from '../models'
// @ts-ignore
import { ValveInfo } from '../models'
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取curve 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveListGet: async (
      itemTypes: Array<string>,
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemTypes' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleCurveListGet', 'itemTypes', itemTypes)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleCurveListGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/curve/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (itemTypes !== undefined) {
        localVarQueryParameter['ItemTypes'] = itemTypes
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取curve 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveTimeseriesGet: async (
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelFeatureId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleCurveTimeseriesGet', 'modelFeatureId', modelFeatureId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleCurveTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/curve/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelFeatureId !== undefined) {
        localVarQueryParameter['ModelFeatureId'] = modelFeatureId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新curve 时间序列数据
     * @param {UpdateCurveTsInput} [updateCurveTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveTimeseriesUpdatePost: async (
      updateCurveTsInput?: UpdateCurveTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/schedule/curve/timeseries/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCurveTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取Pattern 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternListGet: async (
      itemTypes: Array<string>,
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemTypes' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePatternListGet', 'itemTypes', itemTypes)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePatternListGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/pattern/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (itemTypes !== undefined) {
        localVarQueryParameter['ItemTypes'] = itemTypes
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取pattern 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternTimeseriesGet: async (
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelFeatureId' is not null or undefined
      assertParamExists(
        'apiV1DomainWdSchedulePatternTimeseriesGet',
        'modelFeatureId',
        modelFeatureId,
      )
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePatternTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/pattern/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelFeatureId !== undefined) {
        localVarQueryParameter['ModelFeatureId'] = modelFeatureId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新Pattern 时间序列数据
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternTimeseriesUpdatePost: async (
      updatePatternTsInput?: UpdatePatternTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/schedule/pattern/timeseries/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePatternTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取泵的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpListGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePumpListGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/pump/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/domain-wd/schedule/pump/timeseries
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpTimeseriesGet: async (
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelFeatureId' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePumpTimeseriesGet', 'modelFeatureId', modelFeatureId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdSchedulePumpTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/pump/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelFeatureId !== undefined) {
        localVarQueryParameter['ModelFeatureId'] = modelFeatureId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpTimeseriesUpdatePost: async (
      updateControlTsInput?: UpdateControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/schedule/pump/timeseries/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取阀的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveListGet: async (
      scenarioId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleValveListGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/valve/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取阀时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveTimeseriesGet: async (
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'modelFeatureId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleValveTimeseriesGet', 'modelFeatureId', modelFeatureId)
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiV1DomainWdScheduleValveTimeseriesGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/v1/domain-wd/schedule/valve/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (modelFeatureId !== undefined) {
        localVarQueryParameter['ModelFeatureId'] = modelFeatureId
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新阀时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveTimeseriesUpdatePost: async (
      updateControlTsInput?: UpdateControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/domain-wd/schedule/valve/timeseries/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取curve 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleCurveListGet(
      itemTypes: Array<string>,
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurveInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdScheduleCurveListGet(
        itemTypes,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取curve 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleCurveTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurveTsInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdScheduleCurveTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新curve 时间序列数据
     * @param {UpdateCurveTsInput} [updateCurveTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleCurveTimeseriesUpdatePost(
      updateCurveTsInput?: UpdateCurveTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdScheduleCurveTimeseriesUpdatePost(
          updateCurveTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取Pattern 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePatternListGet(
      itemTypes: Array<string>,
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatternInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdSchedulePatternListGet(
        itemTypes,
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取pattern 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePatternTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatternTsInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdSchedulePatternTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新Pattern 时间序列数据
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePatternTimeseriesUpdatePost(
      updatePatternTsInput?: UpdatePatternTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdSchedulePatternTimeseriesUpdatePost(
          updatePatternTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取泵的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePumpListGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PumpInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdSchedulePumpListGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/domain-wd/schedule/pump/timeseries
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePumpTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlTsInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdSchedulePumpTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdSchedulePumpTimeseriesUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdSchedulePumpTimeseriesUpdatePost(
          updateControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取阀的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleValveListGet(
      scenarioId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ValveInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainWdScheduleValveListGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取阀时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleValveTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlTsInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdScheduleValveTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新阀时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DomainWdScheduleValveTimeseriesUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DomainWdScheduleValveTimeseriesUpdatePost(
          updateControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScheduleApiFp(configuration)
  return {
    /**
     *
     * @summary 获取curve 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveListGet(
      itemTypes: Array<string>,
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<CurveInfo>> {
      return localVarFp
        .apiV1DomainWdScheduleCurveListGet(itemTypes, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取curve 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<CurveTsInfo>> {
      return localVarFp
        .apiV1DomainWdScheduleCurveTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新curve 时间序列数据
     * @param {UpdateCurveTsInput} [updateCurveTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleCurveTimeseriesUpdatePost(
      updateCurveTsInput?: UpdateCurveTsInput,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV1DomainWdScheduleCurveTimeseriesUpdatePost(updateCurveTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取Pattern 的列表
     * @param {Array<string>} itemTypes
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternListGet(
      itemTypes: Array<string>,
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<PatternInfo>> {
      return localVarFp
        .apiV1DomainWdSchedulePatternListGet(itemTypes, scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取pattern 时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<PatternTsInfo>> {
      return localVarFp
        .apiV1DomainWdSchedulePatternTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新Pattern 时间序列数据
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePatternTimeseriesUpdatePost(
      updatePatternTsInput?: UpdatePatternTsInput,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV1DomainWdSchedulePatternTimeseriesUpdatePost(updatePatternTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取泵的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpListGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<PumpInfo>> {
      return localVarFp
        .apiV1DomainWdSchedulePumpListGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/domain-wd/schedule/pump/timeseries
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<ControlTsInfo>> {
      return localVarFp
        .apiV1DomainWdSchedulePumpTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdSchedulePumpTimeseriesUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV1DomainWdSchedulePumpTimeseriesUpdatePost(updateControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取阀的列表
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveListGet(
      scenarioId: string,
      options?: any,
    ): AxiosPromise<Array<ValveInfo>> {
      return localVarFp
        .apiV1DomainWdScheduleValveListGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取阀时序数据
     * @param {Array<string>} modelFeatureId
     * @param {string} scenarioId
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveTimeseriesGet(
      modelFeatureId: Array<string>,
      scenarioId: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<Array<ControlTsInfo>> {
      return localVarFp
        .apiV1DomainWdScheduleValveTimeseriesGet(
          modelFeatureId,
          scenarioId,
          startTime,
          endTime,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新阀时序数据
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DomainWdScheduleValveTimeseriesUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV1DomainWdScheduleValveTimeseriesUpdatePost(updateControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
  /**
   *
   * @summary 获取curve 的列表
   * @param {Array<string>} itemTypes
   * @param {string} scenarioId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleCurveListGet(
    itemTypes: Array<string>,
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleCurveListGet(itemTypes, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取curve 时序数据
   * @param {Array<string>} modelFeatureId
   * @param {string} scenarioId
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleCurveTimeseriesGet(
    modelFeatureId: Array<string>,
    scenarioId: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleCurveTimeseriesGet(
        modelFeatureId,
        scenarioId,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新curve 时间序列数据
   * @param {UpdateCurveTsInput} [updateCurveTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleCurveTimeseriesUpdatePost(
    updateCurveTsInput?: UpdateCurveTsInput,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleCurveTimeseriesUpdatePost(updateCurveTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取Pattern 的列表
   * @param {Array<string>} itemTypes
   * @param {string} scenarioId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePatternListGet(
    itemTypes: Array<string>,
    scenarioId: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePatternListGet(itemTypes, scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取pattern 时序数据
   * @param {Array<string>} modelFeatureId
   * @param {string} scenarioId
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePatternTimeseriesGet(
    modelFeatureId: Array<string>,
    scenarioId: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePatternTimeseriesGet(
        modelFeatureId,
        scenarioId,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新Pattern 时间序列数据
   * @param {UpdatePatternTsInput} [updatePatternTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePatternTimeseriesUpdatePost(
    updatePatternTsInput?: UpdatePatternTsInput,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePatternTimeseriesUpdatePost(updatePatternTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取泵的列表
   * @param {string} scenarioId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePumpListGet(scenarioId: string, options?: AxiosRequestConfig) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePumpListGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/domain-wd/schedule/pump/timeseries
   * @param {Array<string>} modelFeatureId
   * @param {string} scenarioId
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePumpTimeseriesGet(
    modelFeatureId: Array<string>,
    scenarioId: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePumpTimeseriesGet(
        modelFeatureId,
        scenarioId,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新时序数据
   * @param {UpdateControlTsInput} [updateControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdSchedulePumpTimeseriesUpdatePost(
    updateControlTsInput?: UpdateControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdSchedulePumpTimeseriesUpdatePost(updateControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取阀的列表
   * @param {string} scenarioId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleValveListGet(scenarioId: string, options?: AxiosRequestConfig) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleValveListGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取阀时序数据
   * @param {Array<string>} modelFeatureId
   * @param {string} scenarioId
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleValveTimeseriesGet(
    modelFeatureId: Array<string>,
    scenarioId: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleValveTimeseriesGet(
        modelFeatureId,
        scenarioId,
        startTime,
        endTime,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新阀时序数据
   * @param {UpdateControlTsInput} [updateControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScheduleApi
   */
  public apiV1DomainWdScheduleValveTimeseriesUpdatePost(
    updateControlTsInput?: UpdateControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return ScheduleApiFp(this.configuration)
      .apiV1DomainWdScheduleValveTimeseriesUpdatePost(updateControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
