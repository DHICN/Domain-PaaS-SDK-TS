/* eslint-disable */
/**
 * 供水业务中台领域服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddThresholdConfigInput } from '../models'
// @ts-ignore
import { DeleteThresholdConfigInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { ThresholdConfigDto } from '../models'
/**
 * ThresholdConfigApi - axios parameter creator
 * @export
 */
export const ThresholdConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量设置阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量新增阈值配置信息
     * @param {Array<AddThresholdConfigInput>} [addThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdAddPost: async (
      addThresholdConfigInput?: Array<AddThresholdConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/config/threshold/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addThresholdConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示所有的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 获取所有阈值配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdAllGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/config/threshold/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 根据类型查询阈值配置
     * @param {number} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdByTypeGet: async (
      type?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/config/threshold/by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (type !== undefined) {
        localVarQueryParameter['type'] = type
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量删除阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。   输入：      Ids来自接口：api/v2/domain-wd/config/threshold/all，返回数据列表中每个元素的id
     * @summary 删除阈值配置信息
     * @param {DeleteThresholdConfigInput} [deleteThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdDeletePost: async (
      deleteThresholdConfigInput?: DeleteThresholdConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/config/threshold/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteThresholdConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      更新某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量更新阈值配置信息
     * @param {Array<ThresholdConfigDto>} [thresholdConfigDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdUpdatePost: async (
      thresholdConfigDto?: Array<ThresholdConfigDto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/domain-wd/config/threshold/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        thresholdConfigDto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ThresholdConfigApi - functional programming interface
 * @export
 */
export const ThresholdConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ThresholdConfigApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量设置阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量新增阈值配置信息
     * @param {Array<AddThresholdConfigInput>} [addThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdConfigThresholdAddPost(
      addThresholdConfigInput?: Array<AddThresholdConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DomainWdConfigThresholdAddPost(
        addThresholdConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示所有的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 获取所有阈值配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdConfigThresholdAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ThresholdConfigDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DomainWdConfigThresholdAllGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 根据类型查询阈值配置
     * @param {number} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdConfigThresholdByTypeGet(
      type?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ThresholdConfigDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2DomainWdConfigThresholdByTypeGet(type, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量删除阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。   输入：      Ids来自接口：api/v2/domain-wd/config/threshold/all，返回数据列表中每个元素的id
     * @summary 删除阈值配置信息
     * @param {DeleteThresholdConfigInput} [deleteThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdConfigThresholdDeletePost(
      deleteThresholdConfigInput?: DeleteThresholdConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2DomainWdConfigThresholdDeletePost(
          deleteThresholdConfigInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      更新某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量更新阈值配置信息
     * @param {Array<ThresholdConfigDto>} [thresholdConfigDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DomainWdConfigThresholdUpdatePost(
      thresholdConfigDto?: Array<ThresholdConfigDto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2DomainWdConfigThresholdUpdatePost(
          thresholdConfigDto,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ThresholdConfigApi - factory interface
 * @export
 */
export const ThresholdConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ThresholdConfigApiFp(configuration)
  return {
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量设置阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量新增阈值配置信息
     * @param {Array<AddThresholdConfigInput>} [addThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdAddPost(
      addThresholdConfigInput?: Array<AddThresholdConfigInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2DomainWdConfigThresholdAddPost(addThresholdConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示所有的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 获取所有阈值配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdAllGet(options?: any): AxiosPromise<Array<ThresholdConfigDto>> {
      return localVarFp
        .apiV2DomainWdConfigThresholdAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      展示某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 根据类型查询阈值配置
     * @param {number} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdByTypeGet(
      type?: number,
      options?: any,
    ): AxiosPromise<Array<ThresholdConfigDto>> {
      return localVarFp
        .apiV2DomainWdConfigThresholdByTypeGet(type, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      批量删除阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。   输入：      Ids来自接口：api/v2/domain-wd/config/threshold/all，返回数据列表中每个元素的id
     * @summary 删除阈值配置信息
     * @param {DeleteThresholdConfigInput} [deleteThresholdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdDeletePost(
      deleteThresholdConfigInput?: DeleteThresholdConfigInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2DomainWdConfigThresholdDeletePost(deleteThresholdConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、阈值配置  使用场景：      更新某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
     * @summary 批量更新阈值配置信息
     * @param {Array<ThresholdConfigDto>} [thresholdConfigDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DomainWdConfigThresholdUpdatePost(
      thresholdConfigDto?: Array<ThresholdConfigDto>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV2DomainWdConfigThresholdUpdatePost(thresholdConfigDto, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ThresholdConfigApi - object-oriented interface
 * @export
 * @class ThresholdConfigApi
 * @extends {BaseAPI}
 */
export class ThresholdConfigApi extends BaseAPI {
  /**
   * 关键词：      供水、阈值配置  使用场景：      批量设置阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
   * @summary 批量新增阈值配置信息
   * @param {Array<AddThresholdConfigInput>} [addThresholdConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThresholdConfigApi
   */
  public apiV2DomainWdConfigThresholdAddPost(
    addThresholdConfigInput?: Array<AddThresholdConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return ThresholdConfigApiFp(this.configuration)
      .apiV2DomainWdConfigThresholdAddPost(addThresholdConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、阈值配置  使用场景：      展示所有的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
   * @summary 获取所有阈值配置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThresholdConfigApi
   */
  public apiV2DomainWdConfigThresholdAllGet(options?: AxiosRequestConfig) {
    return ThresholdConfigApiFp(this.configuration)
      .apiV2DomainWdConfigThresholdAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、阈值配置  使用场景：      展示某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
   * @summary 根据类型查询阈值配置
   * @param {number} [type]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThresholdConfigApi
   */
  public apiV2DomainWdConfigThresholdByTypeGet(type?: number, options?: AxiosRequestConfig) {
    return ThresholdConfigApiFp(this.configuration)
      .apiV2DomainWdConfigThresholdByTypeGet(type, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、阈值配置  使用场景：      批量删除阈值配置  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。   输入：      Ids来自接口：api/v2/domain-wd/config/threshold/all，返回数据列表中每个元素的id
   * @summary 删除阈值配置信息
   * @param {DeleteThresholdConfigInput} [deleteThresholdConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThresholdConfigApi
   */
  public apiV2DomainWdConfigThresholdDeletePost(
    deleteThresholdConfigInput?: DeleteThresholdConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ThresholdConfigApiFp(this.configuration)
      .apiV2DomainWdConfigThresholdDeletePost(deleteThresholdConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、阈值配置  使用场景：      更新某一类型的阈值配置时，调用该接口  相关背景：      阈值配置包括精度配置和受影响的管道，其中精度配置是统计模型精度（参考接口：/api/v2/domain-wd/online/get-accuracy）的前置条件。
   * @summary 批量更新阈值配置信息
   * @param {Array<ThresholdConfigDto>} [thresholdConfigDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThresholdConfigApi
   */
  public apiV2DomainWdConfigThresholdUpdatePost(
    thresholdConfigDto?: Array<ThresholdConfigDto>,
    options?: AxiosRequestConfig,
  ) {
    return ThresholdConfigApiFp(this.configuration)
      .apiV2DomainWdConfigThresholdUpdatePost(thresholdConfigDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
