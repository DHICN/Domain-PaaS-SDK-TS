/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { LatestTimeSeriesByTimeInput } from '../models'
// @ts-ignore
import { LatestTimeSeriesInputV3 } from '../models'
// @ts-ignore
import { LatestTimeSeriesOutputV3 } from '../models'
// @ts-ignore
import { SaveTelemetryStructDataBatchInput } from '../models'
// @ts-ignore
import { TimeseriesBatchForV3Input } from '../models'
// @ts-ignore
import { TimeseriesBatchForV3Output } from '../models'
/**
 * TelemetryApi - axios parameter creator
 * @export
 */
export const TelemetryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：设备、设备指标、时间点、实测数据、获取、查询  使用场景：  该接口一般用于基于某个时间点创建的预案中，如果需要查询该预案时刻下的最近实测数据，则使用该接口，若要查询实时数据，请用/api/v3/iot/latest-timeseries接口  输入：设备编码、指标名称、时间点  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取离指定时间点最近的实测数据
     * @param {LatestTimeSeriesByTimeInput} [latestTimeSeriesByTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotLatestTimeseriesByTimePost: async (
      latestTimeSeriesByTimeInput?: LatestTimeSeriesByTimeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/latest-timeseries-by-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        latestTimeSeriesByTimeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据,和接口/api/v1/iot/timeseries的区别在于此接口不指定时间排序方式，只能倒序查询数据  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据,按时间倒序排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryOnlineProcessedTimeseriesGet: async (
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'deviceId', deviceId)
      // verify required parameter 'keys' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'keys', keys)
      // verify required parameter 'startTs' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'startTs', startTs)
      // verify required parameter 'endTs' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'endTs', endTs)
      const localVarPath = `/api/v1/iot/query-online-processed-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (deviceId !== undefined) {
        localVarQueryParameter['DeviceId'] = deviceId
      }

      if (keys !== undefined) {
        localVarQueryParameter['Keys'] = keys
      }

      if (startTs !== undefined) {
        localVarQueryParameter['StartTs'] =
          (startTs as any) instanceof Date ? (startTs as any).toISOString() : startTs
      }

      if (endTs !== undefined) {
        localVarQueryParameter['EndTs'] =
          (endTs as any) instanceof Date ? (endTs as any).toISOString() : endTs
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['OrderBy'] = orderBy
      }

      if (interval !== undefined) {
        localVarQueryParameter['Interval'] = interval
      }

      if (agg !== undefined) {
        localVarQueryParameter['Agg'] = agg
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据，可按时间排序，该数据来自系统接入的实测数据，可用于展示到前端界面  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据，可根据排序方式OrderBy按时间排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesGet: async (
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'deviceId', deviceId)
      // verify required parameter 'keys' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'keys', keys)
      // verify required parameter 'startTs' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'startTs', startTs)
      // verify required parameter 'endTs' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'endTs', endTs)
      const localVarPath = `/api/v1/iot/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (deviceId !== undefined) {
        localVarQueryParameter['DeviceId'] = deviceId
      }

      if (keys !== undefined) {
        localVarQueryParameter['Keys'] = keys
      }

      if (startTs !== undefined) {
        localVarQueryParameter['StartTs'] =
          (startTs as any) instanceof Date ? (startTs as any).toISOString() : startTs
      }

      if (endTs !== undefined) {
        localVarQueryParameter['EndTs'] =
          (endTs as any) instanceof Date ? (endTs as any).toISOString() : endTs
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['OrderBy'] = orderBy
      }

      if (interval !== undefined) {
        localVarQueryParameter['Interval'] = interval
      }

      if (agg !== undefined) {
        localVarQueryParameter['Agg'] = agg
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  与接口/api/v3/iot/latest-timeseries优先读取缓存中的数据不同，该接口始终从数据库中读取最新一条实测数据，这些数据的入库时间通常经过了对齐处理，  在接口/api/v1/historical-data/search-latest中会调用该接口获取最新一条实测数据，并返回相同时间的模拟数据  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据,只从数据库中读取，不读缓存数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotLatestTimeseriesFromDbPost: async (
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/iot/latest-timeseries-from-db`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        latestTimeSeriesInputV3,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotLatestTimeseriesPost: async (
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/iot/latest-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        latestTimeSeriesInputV3,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：时间戳、设备、设备指标、实测数据、消息队列、更新  使用场景：批量保存或更新多个设备指标实测数据，更新到缓存中并推送到消息队列做数据存储，保存的数据可通过查询接口/api/v3/iot/timeseries-batch查询做进一步数据处理或展示  输入：时间戳、设备编码、指标名称、数值  输出：无
     * @summary 以结构化的数据格式通过消息队列批量保存或更新实测数据
     * @param {Array<SaveTelemetryStructDataBatchInput>} [saveTelemetryStructDataBatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotSaveTelemetryDataBatchPost: async (
      saveTelemetryStructDataBatchInput?: Array<SaveTelemetryStructDataBatchInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/iot/save-telemetry-data-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveTelemetryStructDataBatchInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、批量查询、抽样  使用场景：批量查询多个设备指标在某个时间段内的时间序列数据，可抽样查询，并按时间排序，默认按照时间从大到小排序；如:sample=minutes,interval=5,表示按照5分钟进行抽样，用于多个设备指标同时展示实测数据的情景  输入：设备、指标、时间区间、抽样类型、抽样频率  输出：多个设备、指标的时间序列数据
     * @summary 批量查询多个设备指标的时间序列数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotTimeseriesBatchPost: async (
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v3/iot/timeseries-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        timeseriesBatchForV3Input,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TelemetryApi - functional programming interface
 * @export
 */
export const TelemetryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TelemetryApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：设备、设备指标、时间点、实测数据、获取、查询  使用场景：  该接口一般用于基于某个时间点创建的预案中，如果需要查询该预案时刻下的最近实测数据，则使用该接口，若要查询实时数据，请用/api/v3/iot/latest-timeseries接口  输入：设备编码、指标名称、时间点  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取离指定时间点最近的实测数据
     * @param {LatestTimeSeriesByTimeInput} [latestTimeSeriesByTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotLatestTimeseriesByTimePost(
      latestTimeSeriesByTimeInput?: LatestTimeSeriesByTimeInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LatestTimeSeriesOutputV3>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotLatestTimeseriesByTimePost(
        latestTimeSeriesByTimeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据,和接口/api/v1/iot/timeseries的区别在于此接口不指定时间排序方式，只能倒序查询数据  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据,按时间倒序排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotQueryOnlineProcessedTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<object> }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotQueryOnlineProcessedTimeseriesGet(
          deviceId,
          keys,
          startTs,
          endTs,
          orderBy,
          interval,
          agg,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据，可按时间排序，该数据来自系统接入的实测数据，可用于展示到前端界面  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据，可根据排序方式OrderBy按时间排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<object> }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotTimeseriesGet(
        deviceId,
        keys,
        startTs,
        endTs,
        orderBy,
        interval,
        agg,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  与接口/api/v3/iot/latest-timeseries优先读取缓存中的数据不同，该接口始终从数据库中读取最新一条实测数据，这些数据的入库时间通常经过了对齐处理，  在接口/api/v1/historical-data/search-latest中会调用该接口获取最新一条实测数据，并返回相同时间的模拟数据  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据,只从数据库中读取，不读缓存数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3IotLatestTimeseriesFromDbPost(
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LatestTimeSeriesOutputV3>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3IotLatestTimeseriesFromDbPost(
        latestTimeSeriesInputV3,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3IotLatestTimeseriesPost(
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LatestTimeSeriesOutputV3>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3IotLatestTimeseriesPost(
        latestTimeSeriesInputV3,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：时间戳、设备、设备指标、实测数据、消息队列、更新  使用场景：批量保存或更新多个设备指标实测数据，更新到缓存中并推送到消息队列做数据存储，保存的数据可通过查询接口/api/v3/iot/timeseries-batch查询做进一步数据处理或展示  输入：时间戳、设备编码、指标名称、数值  输出：无
     * @summary 以结构化的数据格式通过消息队列批量保存或更新实测数据
     * @param {Array<SaveTelemetryStructDataBatchInput>} [saveTelemetryStructDataBatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3IotSaveTelemetryDataBatchPost(
      saveTelemetryStructDataBatchInput?: Array<SaveTelemetryStructDataBatchInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3IotSaveTelemetryDataBatchPost(
        saveTelemetryStructDataBatchInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、批量查询、抽样  使用场景：批量查询多个设备指标在某个时间段内的时间序列数据，可抽样查询，并按时间排序，默认按照时间从大到小排序；如:sample=minutes,interval=5,表示按照5分钟进行抽样，用于多个设备指标同时展示实测数据的情景  输入：设备、指标、时间区间、抽样类型、抽样频率  输出：多个设备、指标的时间序列数据
     * @summary 批量查询多个设备指标的时间序列数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV3IotTimeseriesBatchPost(
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeseriesBatchForV3Output>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3IotTimeseriesBatchPost(
        timeseriesBatchForV3Input,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TelemetryApi - factory interface
 * @export
 */
export const TelemetryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TelemetryApiFp(configuration)
  return {
    /**
     * 关键词：设备、设备指标、时间点、实测数据、获取、查询  使用场景：  该接口一般用于基于某个时间点创建的预案中，如果需要查询该预案时刻下的最近实测数据，则使用该接口，若要查询实时数据，请用/api/v3/iot/latest-timeseries接口  输入：设备编码、指标名称、时间点  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取离指定时间点最近的实测数据
     * @param {LatestTimeSeriesByTimeInput} [latestTimeSeriesByTimeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotLatestTimeseriesByTimePost(
      latestTimeSeriesByTimeInput?: LatestTimeSeriesByTimeInput,
      options?: any,
    ): AxiosPromise<Array<LatestTimeSeriesOutputV3>> {
      return localVarFp
        .apiV1IotLatestTimeseriesByTimePost(latestTimeSeriesByTimeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据,和接口/api/v1/iot/timeseries的区别在于此接口不指定时间排序方式，只能倒序查询数据  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据,按时间倒序排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryOnlineProcessedTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options?: any,
    ): AxiosPromise<{ [key: string]: Array<object> }> {
      return localVarFp
        .apiV1IotQueryOnlineProcessedTimeseriesGet(
          deviceId,
          keys,
          startTs,
          endTs,
          orderBy,
          interval,
          agg,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据，可按时间排序，该数据来自系统接入的实测数据，可用于展示到前端界面  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
     * @summary 查询设备指标在指定时间段内的时间序列数据，可根据排序方式OrderBy按时间排序
     * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
     * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
     * @param {string} startTs 查询开始时间
     * @param {string} endTs 查询结束时间
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
     * @param {number} [interval] 时间间隔，默认是1分钟
     * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      interval?: number,
      agg?: string,
      options?: any,
    ): AxiosPromise<{ [key: string]: Array<object> }> {
      return localVarFp
        .apiV1IotTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, interval, agg, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  与接口/api/v3/iot/latest-timeseries优先读取缓存中的数据不同，该接口始终从数据库中读取最新一条实测数据，这些数据的入库时间通常经过了对齐处理，  在接口/api/v1/historical-data/search-latest中会调用该接口获取最新一条实测数据，并返回相同时间的模拟数据  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据,只从数据库中读取，不读缓存数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotLatestTimeseriesFromDbPost(
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options?: any,
    ): AxiosPromise<Array<LatestTimeSeriesOutputV3>> {
      return localVarFp
        .apiV3IotLatestTimeseriesFromDbPost(latestTimeSeriesInputV3, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
     * @summary 根据设备编码和指标名获取最新实测数据
     * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotLatestTimeseriesPost(
      latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
      options?: any,
    ): AxiosPromise<Array<LatestTimeSeriesOutputV3>> {
      return localVarFp
        .apiV3IotLatestTimeseriesPost(latestTimeSeriesInputV3, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：时间戳、设备、设备指标、实测数据、消息队列、更新  使用场景：批量保存或更新多个设备指标实测数据，更新到缓存中并推送到消息队列做数据存储，保存的数据可通过查询接口/api/v3/iot/timeseries-batch查询做进一步数据处理或展示  输入：时间戳、设备编码、指标名称、数值  输出：无
     * @summary 以结构化的数据格式通过消息队列批量保存或更新实测数据
     * @param {Array<SaveTelemetryStructDataBatchInput>} [saveTelemetryStructDataBatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotSaveTelemetryDataBatchPost(
      saveTelemetryStructDataBatchInput?: Array<SaveTelemetryStructDataBatchInput>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV3IotSaveTelemetryDataBatchPost(saveTelemetryStructDataBatchInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、批量查询、抽样  使用场景：批量查询多个设备指标在某个时间段内的时间序列数据，可抽样查询，并按时间排序，默认按照时间从大到小排序；如:sample=minutes,interval=5,表示按照5分钟进行抽样，用于多个设备指标同时展示实测数据的情景  输入：设备、指标、时间区间、抽样类型、抽样频率  输出：多个设备、指标的时间序列数据
     * @summary 批量查询多个设备指标的时间序列数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV3IotTimeseriesBatchPost(
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options?: any,
    ): AxiosPromise<Array<TimeseriesBatchForV3Output>> {
      return localVarFp
        .apiV3IotTimeseriesBatchPost(timeseriesBatchForV3Input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TelemetryApi - object-oriented interface
 * @export
 * @class TelemetryApi
 * @extends {BaseAPI}
 */
export class TelemetryApi extends BaseAPI {
  /**
   * 关键词：设备、设备指标、时间点、实测数据、获取、查询  使用场景：  该接口一般用于基于某个时间点创建的预案中，如果需要查询该预案时刻下的最近实测数据，则使用该接口，若要查询实时数据，请用/api/v3/iot/latest-timeseries接口  输入：设备编码、指标名称、时间点  输出：设备编码、指标的时间序列数据
   * @summary 根据设备编码和指标名获取离指定时间点最近的实测数据
   * @param {LatestTimeSeriesByTimeInput} [latestTimeSeriesByTimeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotLatestTimeseriesByTimePost(
    latestTimeSeriesByTimeInput?: LatestTimeSeriesByTimeInput,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotLatestTimeseriesByTimePost(latestTimeSeriesByTimeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：设备、设备指标、设备指标时间序列数据、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据,和接口/api/v1/iot/timeseries的区别在于此接口不指定时间排序方式，只能倒序查询数据  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
   * @summary 查询设备指标在指定时间段内的时间序列数据,按时间倒序排序
   * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
   * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
   * @param {string} startTs 查询开始时间
   * @param {string} endTs 查询结束时间
   * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
   * @param {number} [interval] 时间间隔，默认是1分钟
   * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotQueryOnlineProcessedTimeseriesGet(
    deviceId: string,
    keys: Array<string>,
    startTs: string,
    endTs: string,
    orderBy?: string,
    interval?: number,
    agg?: string,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotQueryOnlineProcessedTimeseriesGet(
        deviceId,
        keys,
        startTs,
        endTs,
        orderBy,
        interval,
        agg,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、查询  使用场景：查询设备多个指标在某个时间段内的时间序列数据，可按时间排序，该数据来自系统接入的实测数据，可用于展示到前端界面  输入：设备、指标、时间区间  输出：指标与时间序列数据的键值对
   * @summary 查询设备指标在指定时间段内的时间序列数据，可根据排序方式OrderBy按时间排序
   * @param {string} deviceId 设备ID，如：065cd960-67d4-11ee-a501-41ab9ac02e38
   * @param {Array<string>} keys 指标列表，如：ceshi_1_shuichang_flow、ceshi_1_shuichang_waterlevel
   * @param {string} startTs 查询开始时间
   * @param {string} endTs 查询结束时间
   * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING);默认是降序DESC
   * @param {number} [interval] 时间间隔，默认是1分钟
   * @param {string} [agg] 用于指定聚合函数，如AVG（平均值）、SUM（总和）、MIN（最小值）、MAX（最大值）等
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotTimeseriesGet(
    deviceId: string,
    keys: Array<string>,
    startTs: string,
    endTs: string,
    orderBy?: string,
    interval?: number,
    agg?: string,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, interval, agg, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  与接口/api/v3/iot/latest-timeseries优先读取缓存中的数据不同，该接口始终从数据库中读取最新一条实测数据，这些数据的入库时间通常经过了对齐处理，  在接口/api/v1/historical-data/search-latest中会调用该接口获取最新一条实测数据，并返回相同时间的模拟数据  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
   * @summary 根据设备编码和指标名获取最新实测数据,只从数据库中读取，不读缓存数据
   * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV3IotLatestTimeseriesFromDbPost(
    latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV3IotLatestTimeseriesFromDbPost(latestTimeSeriesInputV3, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：设备、设备指标、最新、实测数据、获取、查询  使用场景：批量查询多个设备指标最新的实测数据，根据TimeRange控制是否有最新数据的时间范围（分钟），若TimeRange=5则查询距离当前时刻5分钟内的最新实测数据，用于多个设备指标只展示最新实测数据的情景  输入：设备编码、指标名称、离当前时刻最近的数据范围  输出：设备编码、指标的时间序列数据
   * @summary 根据设备编码和指标名获取最新实测数据
   * @param {Array<LatestTimeSeriesInputV3>} [latestTimeSeriesInputV3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV3IotLatestTimeseriesPost(
    latestTimeSeriesInputV3?: Array<LatestTimeSeriesInputV3>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV3IotLatestTimeseriesPost(latestTimeSeriesInputV3, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：时间戳、设备、设备指标、实测数据、消息队列、更新  使用场景：批量保存或更新多个设备指标实测数据，更新到缓存中并推送到消息队列做数据存储，保存的数据可通过查询接口/api/v3/iot/timeseries-batch查询做进一步数据处理或展示  输入：时间戳、设备编码、指标名称、数值  输出：无
   * @summary 以结构化的数据格式通过消息队列批量保存或更新实测数据
   * @param {Array<SaveTelemetryStructDataBatchInput>} [saveTelemetryStructDataBatchInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV3IotSaveTelemetryDataBatchPost(
    saveTelemetryStructDataBatchInput?: Array<SaveTelemetryStructDataBatchInput>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV3IotSaveTelemetryDataBatchPost(saveTelemetryStructDataBatchInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：设备、设备指标、设备指标时间序列数据、时间、排序、批量查询、抽样  使用场景：批量查询多个设备指标在某个时间段内的时间序列数据，可抽样查询，并按时间排序，默认按照时间从大到小排序；如:sample=minutes,interval=5,表示按照5分钟进行抽样，用于多个设备指标同时展示实测数据的情景  输入：设备、指标、时间区间、抽样类型、抽样频率  输出：多个设备、指标的时间序列数据
   * @summary 批量查询多个设备指标的时间序列数据
   * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV3IotTimeseriesBatchPost(
    timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV3IotTimeseriesBatchPost(timeseriesBatchForV3Input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
