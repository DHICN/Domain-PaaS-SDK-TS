/* eslint-disable */
/**
 * iot-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { MockDeviceDataInput } from '../models'
// @ts-ignore
import { SaveTelemetryDataInput } from '../models'
// @ts-ignore
import { TimeseriesBatchOutput } from '../models'
// @ts-ignore
import { TimeseriesInput } from '../models'
/**
 * TelemetryApi - axios parameter creator
 * @export
 */
export const TelemetryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Mock Device Data
     * @param {MockDeviceDataInput} [mockDeviceDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMockDeviceDataPost: async (
      mockDeviceDataInput?: MockDeviceDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mock-device-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mockDeviceDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据 Query time-series data of multiple indicators of a device by time.
     * @summary 查询设备指标的时间序列数据 Query time-series data of device indicators
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryOnlineProcessedTimeseriesGet: async (
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'deviceId', deviceId)
      // verify required parameter 'keys' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'keys', keys)
      // verify required parameter 'startTs' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'startTs', startTs)
      // verify required parameter 'endTs' is not null or undefined
      assertParamExists('apiV1IotQueryOnlineProcessedTimeseriesGet', 'endTs', endTs)
      const localVarPath = `/api/v1/iot/query-online-processed-timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceId !== undefined) {
        localVarQueryParameter['DeviceId'] = deviceId
      }

      if (keys !== undefined) {
        localVarQueryParameter['Keys'] = keys
      }

      if (startTs !== undefined) {
        localVarQueryParameter['StartTs'] = startTs
      }

      if (endTs !== undefined) {
        localVarQueryParameter['EndTs'] = endTs
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['OrderBy'] = orderBy
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Batch save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 批量保存或更新时间序列数据 Batch save or update time-series data
     * @param {Array<SaveTelemetryDataInput>} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveTelemetryDataBatchPost: async (
      saveTelemetryDataInput?: Array<SaveTelemetryDataInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/save-telemetry-data-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveTelemetryDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 保存或更新时间序列数据 Save or update time-series data
     * @param {SaveTelemetryDataInput} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveTelemetryDataPost: async (
      saveTelemetryDataInput?: SaveTelemetryDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/save-telemetry-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveTelemetryDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple indicators of a device by time and order by time.
     * @summary 批量查询设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesBatchPost: async (
      timeseriesInput?: Array<TimeseriesInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/timeseries-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        timeseriesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Query time-series data of multiple indicators of a device by time and order by time.
     * @summary 查询设备指标的时间序列数据，按时间排序 Query time-series data of device indicators order by time
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesGet: async (
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceId' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'deviceId', deviceId)
      // verify required parameter 'keys' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'keys', keys)
      // verify required parameter 'startTs' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'startTs', startTs)
      // verify required parameter 'endTs' is not null or undefined
      assertParamExists('apiV1IotTimeseriesGet', 'endTs', endTs)
      const localVarPath = `/api/v1/iot/timeseries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceId !== undefined) {
        localVarQueryParameter['DeviceId'] = deviceId
      }

      if (keys !== undefined) {
        localVarQueryParameter['Keys'] = keys
      }

      if (startTs !== undefined) {
        localVarQueryParameter['StartTs'] = startTs
      }

      if (endTs !== undefined) {
        localVarQueryParameter['EndTs'] = endTs
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['OrderBy'] = orderBy
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量查询多个设备指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple device indicators by time and order by time.
     * @summary 批量查询多个设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotTimeseriesBatchPost: async (
      timeseriesInput?: Array<TimeseriesInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/timeseries-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        timeseriesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TelemetryApi - functional programming interface
 * @export
 */
export const TelemetryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TelemetryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Mock Device Data
     * @param {MockDeviceDataInput} [mockDeviceDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMockDeviceDataPost(
      mockDeviceDataInput?: MockDeviceDataInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMockDeviceDataPost(
        mockDeviceDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据 Query time-series data of multiple indicators of a device by time.
     * @summary 查询设备指标的时间序列数据 Query time-series data of device indicators
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotQueryOnlineProcessedTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<object> }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotQueryOnlineProcessedTimeseriesGet(
          deviceId,
          keys,
          startTs,
          endTs,
          orderBy,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Batch save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 批量保存或更新时间序列数据 Batch save or update time-series data
     * @param {Array<SaveTelemetryDataInput>} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotSaveTelemetryDataBatchPost(
      saveTelemetryDataInput?: Array<SaveTelemetryDataInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotSaveTelemetryDataBatchPost(
        saveTelemetryDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 保存或更新时间序列数据 Save or update time-series data
     * @param {SaveTelemetryDataInput} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotSaveTelemetryDataPost(
      saveTelemetryDataInput?: SaveTelemetryDataInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotSaveTelemetryDataPost(
        saveTelemetryDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple indicators of a device by time and order by time.
     * @summary 批量查询设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotTimeseriesBatchPost(
      timeseriesInput?: Array<TimeseriesInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<{ [key: string]: Array<object> }>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotTimeseriesBatchPost(
        timeseriesInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Query time-series data of multiple indicators of a device by time and order by time.
     * @summary 查询设备指标的时间序列数据，按时间排序 Query time-series data of device indicators order by time
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<object> }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotTimeseriesGet(
        deviceId,
        keys,
        startTs,
        endTs,
        orderBy,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量查询多个设备指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple device indicators by time and order by time.
     * @summary 批量查询多个设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotTimeseriesBatchPost(
      timeseriesInput?: Array<TimeseriesInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeseriesBatchOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2IotTimeseriesBatchPost(
        timeseriesInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TelemetryApi - factory interface
 * @export
 */
export const TelemetryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TelemetryApiFp(configuration)
  return {
    /**
     *
     * @summary Mock Device Data
     * @param {MockDeviceDataInput} [mockDeviceDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMockDeviceDataPost(
      mockDeviceDataInput?: MockDeviceDataInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotMockDeviceDataPost(mockDeviceDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据 Query time-series data of multiple indicators of a device by time.
     * @summary 查询设备指标的时间序列数据 Query time-series data of device indicators
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryOnlineProcessedTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options?: any,
    ): AxiosPromise<{ [key: string]: Array<object> }> {
      return localVarFp
        .apiV1IotQueryOnlineProcessedTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Batch save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 批量保存或更新时间序列数据 Batch save or update time-series data
     * @param {Array<SaveTelemetryDataInput>} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveTelemetryDataBatchPost(
      saveTelemetryDataInput?: Array<SaveTelemetryDataInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotSaveTelemetryDataBatchPost(saveTelemetryDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Save or update device indicator time-series data, data is transferred in the format of json.
     * @summary 保存或更新时间序列数据 Save or update time-series data
     * @param {SaveTelemetryDataInput} [saveTelemetryDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveTelemetryDataPost(
      saveTelemetryDataInput?: SaveTelemetryDataInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotSaveTelemetryDataPost(saveTelemetryDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple indicators of a device by time and order by time.
     * @summary 批量查询设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesBatchPost(
      timeseriesInput?: Array<TimeseriesInput>,
      options?: any,
    ): AxiosPromise<Array<{ [key: string]: Array<object> }>> {
      return localVarFp
        .apiV1IotTimeseriesBatchPost(timeseriesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Query time-series data of multiple indicators of a device by time and order by time.
     * @summary 查询设备指标的时间序列数据，按时间排序 Query time-series data of device indicators order by time
     * @param {string} deviceId 设备ID device id
     * @param {Array<string>} keys 指标列表 indicators
     * @param {string} startTs 查询开始时间 start time
     * @param {string} endTs 查询结束时间 end time
     * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotTimeseriesGet(
      deviceId: string,
      keys: Array<string>,
      startTs: string,
      endTs: string,
      orderBy?: string,
      options?: any,
    ): AxiosPromise<{ [key: string]: Array<object> }> {
      return localVarFp
        .apiV1IotTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量查询多个设备指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple device indicators by time and order by time.
     * @summary 批量查询多个设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
     * @param {Array<TimeseriesInput>} [timeseriesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotTimeseriesBatchPost(
      timeseriesInput?: Array<TimeseriesInput>,
      options?: any,
    ): AxiosPromise<Array<TimeseriesBatchOutput>> {
      return localVarFp
        .apiV2IotTimeseriesBatchPost(timeseriesInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TelemetryApi - object-oriented interface
 * @export
 * @class TelemetryApi
 * @extends {BaseAPI}
 */
export class TelemetryApi extends BaseAPI {
  /**
   *
   * @summary Mock Device Data
   * @param {MockDeviceDataInput} [mockDeviceDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotMockDeviceDataPost(
    mockDeviceDataInput?: MockDeviceDataInput,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotMockDeviceDataPost(mockDeviceDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询设备多个指标在某个时间段内的时间序列数据 Query time-series data of multiple indicators of a device by time.
   * @summary 查询设备指标的时间序列数据 Query time-series data of device indicators
   * @param {string} deviceId 设备ID device id
   * @param {Array<string>} keys 指标列表 indicators
   * @param {string} startTs 查询开始时间 start time
   * @param {string} endTs 查询结束时间 end time
   * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotQueryOnlineProcessedTimeseriesGet(
    deviceId: string,
    keys: Array<string>,
    startTs: string,
    endTs: string,
    orderBy?: string,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotQueryOnlineProcessedTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Batch save or update device indicator time-series data, data is transferred in the format of json.
   * @summary 批量保存或更新时间序列数据 Batch save or update time-series data
   * @param {Array<SaveTelemetryDataInput>} [saveTelemetryDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotSaveTelemetryDataBatchPost(
    saveTelemetryDataInput?: Array<SaveTelemetryDataInput>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotSaveTelemetryDataBatchPost(saveTelemetryDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 保存或更新设备指标的时间序列数据，时间序列数据以json格式传递 Save or update device indicator time-series data, data is transferred in the format of json.
   * @summary 保存或更新时间序列数据 Save or update time-series data
   * @param {SaveTelemetryDataInput} [saveTelemetryDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotSaveTelemetryDataPost(
    saveTelemetryDataInput?: SaveTelemetryDataInput,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotSaveTelemetryDataPost(saveTelemetryDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple indicators of a device by time and order by time.
   * @summary 批量查询设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
   * @param {Array<TimeseriesInput>} [timeseriesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotTimeseriesBatchPost(
    timeseriesInput?: Array<TimeseriesInput>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotTimeseriesBatchPost(timeseriesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询设备多个指标在某个时间段内的时间序列数据，可按时间排序 Query time-series data of multiple indicators of a device by time and order by time.
   * @summary 查询设备指标的时间序列数据，按时间排序 Query time-series data of device indicators order by time
   * @param {string} deviceId 设备ID device id
   * @param {Array<string>} keys 指标列表 indicators
   * @param {string} startTs 查询开始时间 start time
   * @param {string} endTs 查询结束时间 end time
   * @param {string} [orderBy] 排序方式，ASC (升序)，DESC (降序) sort order, ASC (ASCENDING) or DESC (DESCENDING)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV1IotTimeseriesGet(
    deviceId: string,
    keys: Array<string>,
    startTs: string,
    endTs: string,
    orderBy?: string,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV1IotTimeseriesGet(deviceId, keys, startTs, endTs, orderBy, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量查询多个设备指标在某个时间段内的时间序列数据，可按时间排序 Batch query time-series data of multiple device indicators by time and order by time.
   * @summary 批量查询多个设备指标的时间序列数据，按时间排序 Batch query time-series data of device indicators order by time
   * @param {Array<TimeseriesInput>} [timeseriesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryApi
   */
  public apiV2IotTimeseriesBatchPost(
    timeseriesInput?: Array<TimeseriesInput>,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryApiFp(this.configuration)
      .apiV2IotTimeseriesBatchPost(timeseriesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
