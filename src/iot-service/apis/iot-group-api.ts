/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddGroupInput } from '../models'
// @ts-ignore
import { AddIotGroupEquipRel } from '../models'
// @ts-ignore
import { GroupTreeOutput } from '../models'
// @ts-ignore
import { IotGroupConfigOutput } from '../models'
// @ts-ignore
import { IotGroupEquipRelOutput } from '../models'
// @ts-ignore
import { QueryIdsInput } from '../models'
// @ts-ignore
import { UpdateGroupInput } from '../models'
/**
 * IotGroupApi - axios parameter creator
 * @export
 */
export const IotGroupApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 批量增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {Array<AddIotGroupEquipRel>} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddBatchRelationInfoPost: async (
      addIotGroupEquipRel?: Array<AddIotGroupEquipRel>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/add-batch-relation-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addIotGroupEquipRel,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 增加分组配置 Add group configuration
     * @param {AddGroupInput} [addGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddPost: async (
      addGroupInput?: AddGroupInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addGroupInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {AddIotGroupEquipRel} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddRelationInfoPost: async (
      addIotGroupEquipRel?: AddIotGroupEquipRel,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/add-relation-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addIotGroupEquipRel,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除租户下所有分组和资产设备关联信息 Delete all group and asset device association information under the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeleteAllRelationInfoDelete: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/delete-all-relation-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除分组配置，包括下面的所有子孙分组和关联信息 Delete the group configuration, including all descendant groups and associated information below
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeletePost: async (
      queryIdsInput?: QueryIdsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryIdsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除分组和资产设备关联信息 Delete group and asset device association information
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeleteRelationInfoPost: async (
      queryIdsInput?: QueryIdsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/delete-relation-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryIdsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据分组id获取所有子孙分组配置及其关联的iot实体信息 Obtain all descendant group configurations and their associated iot entity information according to the group id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetDetailByGroupIdGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/get-detail-by-groupId`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据分组id获取分组配置，包括所有子孙分组 Get the group configuration according to the group id, including all descendant groups
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetListByGroupIdGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/get-list-by-groupId`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取分组和资产设备关联信息 Get group and asset device association information
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetRelationInfoGet: async (
      groupId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/get-relation-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (groupId !== undefined) {
        localVarQueryParameter['groupId'] = groupId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取根分组配置 Get root group configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetRootGroupGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/get-root-group`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改分组配置 Modify group configuration
     * @param {UpdateGroupInput} [updateGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupUpdatePut: async (
      updateGroupInput?: UpdateGroupInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/group/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateGroupInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IotGroupApi - functional programming interface
 * @export
 */
export const IotGroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IotGroupApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 批量增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {Array<AddIotGroupEquipRel>} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupAddBatchRelationInfoPost(
      addIotGroupEquipRel?: Array<AddIotGroupEquipRel>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotGroupAddBatchRelationInfoPost(
          addIotGroupEquipRel,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 增加分组配置 Add group configuration
     * @param {AddGroupInput} [addGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupAddPost(
      addGroupInput?: AddGroupInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IotGroupConfigOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupAddPost(
        addGroupInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {AddIotGroupEquipRel} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupAddRelationInfoPost(
      addIotGroupEquipRel?: AddIotGroupEquipRel,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IotGroupEquipRelOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupAddRelationInfoPost(
        addIotGroupEquipRel,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除租户下所有分组和资产设备关联信息 Delete all group and asset device association information under the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupDeleteAllRelationInfoDelete(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotGroupDeleteAllRelationInfoDelete(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除分组配置，包括下面的所有子孙分组和关联信息 Delete the group configuration, including all descendant groups and associated information below
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupDeletePost(
      queryIdsInput?: QueryIdsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupDeletePost(
        queryIdsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除分组和资产设备关联信息 Delete group and asset device association information
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupDeleteRelationInfoPost(
      queryIdsInput?: QueryIdsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupDeleteRelationInfoPost(
        queryIdsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据分组id获取所有子孙分组配置及其关联的iot实体信息 Obtain all descendant group configurations and their associated iot entity information according to the group id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupGetDetailByGroupIdGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupTreeOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupGetDetailByGroupIdGet(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据分组id获取分组配置，包括所有子孙分组 Get the group configuration according to the group id, including all descendant groups
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupGetListByGroupIdGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IotGroupConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupGetListByGroupIdGet(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取分组和资产设备关联信息 Get group and asset device association information
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupGetRelationInfoGet(
      groupId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IotGroupEquipRelOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupGetRelationInfoGet(
        groupId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取根分组配置 Get root group configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupGetRootGroupGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IotGroupConfigOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotGroupGetRootGroupGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改分组配置 Modify group configuration
     * @param {UpdateGroupInput} [updateGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotGroupUpdatePut(
      updateGroupInput?: UpdateGroupInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotGroupUpdatePut(
        updateGroupInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IotGroupApi - factory interface
 * @export
 */
export const IotGroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IotGroupApiFp(configuration)
  return {
    /**
     *
     * @summary 批量增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {Array<AddIotGroupEquipRel>} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddBatchRelationInfoPost(
      addIotGroupEquipRel?: Array<AddIotGroupEquipRel>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotGroupAddBatchRelationInfoPost(addIotGroupEquipRel, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 增加分组配置 Add group configuration
     * @param {AddGroupInput} [addGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddPost(
      addGroupInput?: AddGroupInput,
      options?: any,
    ): AxiosPromise<IotGroupConfigOutput> {
      return localVarFp
        .apiV1IotGroupAddPost(addGroupInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 增加分组和资产设备关联信息 Add group and asset equipment association information
     * @param {AddIotGroupEquipRel} [addIotGroupEquipRel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupAddRelationInfoPost(
      addIotGroupEquipRel?: AddIotGroupEquipRel,
      options?: any,
    ): AxiosPromise<IotGroupEquipRelOutput> {
      return localVarFp
        .apiV1IotGroupAddRelationInfoPost(addIotGroupEquipRel, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除租户下所有分组和资产设备关联信息 Delete all group and asset device association information under the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeleteAllRelationInfoDelete(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotGroupDeleteAllRelationInfoDelete(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除分组配置，包括下面的所有子孙分组和关联信息 Delete the group configuration, including all descendant groups and associated information below
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeletePost(queryIdsInput?: QueryIdsInput, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotGroupDeletePost(queryIdsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除分组和资产设备关联信息 Delete group and asset device association information
     * @param {QueryIdsInput} [queryIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupDeleteRelationInfoPost(
      queryIdsInput?: QueryIdsInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotGroupDeleteRelationInfoPost(queryIdsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据分组id获取所有子孙分组配置及其关联的iot实体信息 Obtain all descendant group configurations and their associated iot entity information according to the group id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetDetailByGroupIdGet(id?: string, options?: any): AxiosPromise<GroupTreeOutput> {
      return localVarFp
        .apiV1IotGroupGetDetailByGroupIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据分组id获取分组配置，包括所有子孙分组 Get the group configuration according to the group id, including all descendant groups
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetListByGroupIdGet(
      id?: string,
      options?: any,
    ): AxiosPromise<Array<IotGroupConfigOutput>> {
      return localVarFp
        .apiV1IotGroupGetListByGroupIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取分组和资产设备关联信息 Get group and asset device association information
     * @param {string} [groupId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetRelationInfoGet(
      groupId?: string,
      options?: any,
    ): AxiosPromise<Array<IotGroupEquipRelOutput>> {
      return localVarFp
        .apiV1IotGroupGetRelationInfoGet(groupId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取根分组配置 Get root group configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupGetRootGroupGet(options?: any): AxiosPromise<Array<IotGroupConfigOutput>> {
      return localVarFp
        .apiV1IotGroupGetRootGroupGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改分组配置 Modify group configuration
     * @param {UpdateGroupInput} [updateGroupInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotGroupUpdatePut(
      updateGroupInput?: UpdateGroupInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotGroupUpdatePut(updateGroupInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IotGroupApi - object-oriented interface
 * @export
 * @class IotGroupApi
 * @extends {BaseAPI}
 */
export class IotGroupApi extends BaseAPI {
  /**
   *
   * @summary 批量增加分组和资产设备关联信息 Add group and asset equipment association information
   * @param {Array<AddIotGroupEquipRel>} [addIotGroupEquipRel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupAddBatchRelationInfoPost(
    addIotGroupEquipRel?: Array<AddIotGroupEquipRel>,
    options?: AxiosRequestConfig,
  ) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupAddBatchRelationInfoPost(addIotGroupEquipRel, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 增加分组配置 Add group configuration
   * @param {AddGroupInput} [addGroupInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupAddPost(addGroupInput?: AddGroupInput, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupAddPost(addGroupInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 增加分组和资产设备关联信息 Add group and asset equipment association information
   * @param {AddIotGroupEquipRel} [addIotGroupEquipRel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupAddRelationInfoPost(
    addIotGroupEquipRel?: AddIotGroupEquipRel,
    options?: AxiosRequestConfig,
  ) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupAddRelationInfoPost(addIotGroupEquipRel, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除租户下所有分组和资产设备关联信息 Delete all group and asset device association information under the tenant
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupDeleteAllRelationInfoDelete(options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupDeleteAllRelationInfoDelete(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除分组配置，包括下面的所有子孙分组和关联信息 Delete the group configuration, including all descendant groups and associated information below
   * @param {QueryIdsInput} [queryIdsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupDeletePost(queryIdsInput?: QueryIdsInput, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupDeletePost(queryIdsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除分组和资产设备关联信息 Delete group and asset device association information
   * @param {QueryIdsInput} [queryIdsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupDeleteRelationInfoPost(
    queryIdsInput?: QueryIdsInput,
    options?: AxiosRequestConfig,
  ) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupDeleteRelationInfoPost(queryIdsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据分组id获取所有子孙分组配置及其关联的iot实体信息 Obtain all descendant group configurations and their associated iot entity information according to the group id
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupGetDetailByGroupIdGet(id?: string, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupGetDetailByGroupIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据分组id获取分组配置，包括所有子孙分组 Get the group configuration according to the group id, including all descendant groups
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupGetListByGroupIdGet(id?: string, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupGetListByGroupIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取分组和资产设备关联信息 Get group and asset device association information
   * @param {string} [groupId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupGetRelationInfoGet(groupId?: string, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupGetRelationInfoGet(groupId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取根分组配置 Get root group configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupGetRootGroupGet(options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupGetRootGroupGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改分组配置 Modify group configuration
   * @param {UpdateGroupInput} [updateGroupInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IotGroupApi
   */
  public apiV1IotGroupUpdatePut(updateGroupInput?: UpdateGroupInput, options?: AxiosRequestConfig) {
    return IotGroupApiFp(this.configuration)
      .apiV1IotGroupUpdatePut(updateGroupInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
