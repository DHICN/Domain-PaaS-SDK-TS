/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

import { MqttBrokerBaseInfo } from '../models'
// @ts-ignore
import { MqttBrokerInfo } from '../models'
// @ts-ignore
import { MqttPayloadHandlerBaseInfo } from '../models'
// @ts-ignore
import { MqttPayloadHandlerInfo } from '../models'
/**
 * MqttBrokerApi - axios parameter creator
 * @export
 */
export const MqttBrokerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerAddPost: async (
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttBrokerBaseInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerAddPost_1: async (
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttBrokerBaseInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerDeletePost: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerDeletePost_2: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerListGet_3: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerAddPost: async (
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttPayloadHandlerBaseInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerAddPost_4: async (
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttPayloadHandlerBaseInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerDeletePost: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerDeletePost_5: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerListGet: async (
      broker?: string,
      topic?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (broker !== undefined) {
        localVarQueryParameter['broker'] = broker
      }

      if (topic !== undefined) {
        localVarQueryParameter['topic'] = topic
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerListGet_6: async (
      broker?: string,
      topic?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (broker !== undefined) {
        localVarQueryParameter['broker'] = broker
      }

      if (topic !== undefined) {
        localVarQueryParameter['topic'] = topic
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerUpdatePost: async (
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttPayloadHandlerInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerUpdatePost_7: async (
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/payload-handler/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttPayloadHandlerInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerUpdatePost: async (
      mqttBrokerInfo?: MqttBrokerInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttBrokerInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerUpdatePost_8: async (
      mqttBrokerInfo?: MqttBrokerInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/mqtt-broker/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        mqttBrokerInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MqttBrokerApi - functional programming interface
 * @export
 */
export const MqttBrokerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MqttBrokerApiAxiosParamCreator(configuration)
  return {
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerAddPost(
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MqttBrokerInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerAddPost(
        mqttBrokerBaseInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerAddPost_1(
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MqttBrokerInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerAddPost_1(
        mqttBrokerBaseInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerDeletePost(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerDeletePost(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerDeletePost_2(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerDeletePost_2(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerListGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MqttBrokerInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerListGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerListGet_3(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MqttBrokerInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerListGet_3(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerAddPost(
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MqttPayloadHandlerInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerAddPost(
          mqttPayloadHandlerBaseInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerAddPost_4(
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MqttPayloadHandlerInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerAddPost_4(
          mqttPayloadHandlerBaseInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerDeletePost(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerDeletePost(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerDeletePost_5(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerDeletePost_5(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerListGet(
      broker?: string,
      topic?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MqttPayloadHandlerInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerListGet(
          broker,
          topic,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerListGet_6(
      broker?: string,
      topic?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MqttPayloadHandlerInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerListGet_6(
          broker,
          topic,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerUpdatePost(
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerUpdatePost(
          mqttPayloadHandlerInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(
          mqttPayloadHandlerInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerUpdatePost(
      mqttBrokerInfo?: MqttBrokerInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerUpdatePost(
        mqttBrokerInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMqttBrokerUpdatePost_8(
      mqttBrokerInfo?: MqttBrokerInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMqttBrokerUpdatePost_8(
        mqttBrokerInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * MqttBrokerApi - factory interface
 * @export
 */
export const MqttBrokerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MqttBrokerApiFp(configuration)
  return {
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerAddPost(
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options?: any,
    ): AxiosPromise<MqttBrokerInfo> {
      return localVarFp
        .apiV1IotMqttBrokerAddPost(mqttBrokerBaseInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
     * @summary 添加broker配置
     * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerAddPost_1(
      mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
      options?: any,
    ): AxiosPromise<MqttBrokerInfo> {
      return localVarFp
        .apiV1IotMqttBrokerAddPost_1(mqttBrokerBaseInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerDeletePost(id?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerDeletePost(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
     * @summary 删除broker
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerDeletePost_2(id?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerDeletePost_2(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerListGet(options?: any): AxiosPromise<Array<MqttBrokerInfo>> {
      return localVarFp
        .apiV1IotMqttBrokerListGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取broker列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerListGet_3(options?: any): AxiosPromise<Array<MqttBrokerInfo>> {
      return localVarFp
        .apiV1IotMqttBrokerListGet_3(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerAddPost(
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options?: any,
    ): AxiosPromise<MqttPayloadHandlerInfo> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerAddPost(mqttPayloadHandlerBaseInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
     * @summary 添加消息处理程序
     * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerAddPost_4(
      mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
      options?: any,
    ): AxiosPromise<MqttPayloadHandlerInfo> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerAddPost_4(mqttPayloadHandlerBaseInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerDeletePost(id?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerDeletePost(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
     * @summary 删除消息处理程序
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerDeletePost_5(
      id?: string,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerDeletePost_5(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerListGet(
      broker?: string,
      topic?: string,
      options?: any,
    ): AxiosPromise<Array<MqttPayloadHandlerInfo>> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerListGet(broker, topic, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取消息处理程序列表
     * @param {string} [broker]
     * @param {string} [topic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerListGet_6(
      broker?: string,
      topic?: string,
      options?: any,
    ): AxiosPromise<Array<MqttPayloadHandlerInfo>> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerListGet_6(broker, topic, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerUpdatePost(
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerUpdatePost(mqttPayloadHandlerInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新消息处理程序
     * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(
      mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(mqttPayloadHandlerInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerUpdatePost(
      mqttBrokerInfo?: MqttBrokerInfo,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerUpdatePost(mqttBrokerInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新broker配置
     * @param {MqttBrokerInfo} [mqttBrokerInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMqttBrokerUpdatePost_8(
      mqttBrokerInfo?: MqttBrokerInfo,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1IotMqttBrokerUpdatePost_8(mqttBrokerInfo, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * MqttBrokerApi - object-oriented interface
 * @export
 * @class MqttBrokerApi
 * @extends {BaseAPI}
 */
export class MqttBrokerApi extends BaseAPI {
  /**
   * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
   * @summary 添加broker配置
   * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerAddPost(
    mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerAddPost(mqttBrokerBaseInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 添加broker, 添加时，如果客户端Id为空，则将使用Flag作为客户端Id，授权类型暂时只支持用户名密码
   * @summary 添加broker配置
   * @param {MqttBrokerBaseInfo} [mqttBrokerBaseInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerAddPost_1(
    mqttBrokerBaseInfo?: MqttBrokerBaseInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerAddPost_1(mqttBrokerBaseInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
   * @summary 删除broker
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerDeletePost(id?: string, options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerDeletePost(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 在删除数据时，会校验是否已经添加过相关的Topic订阅程序，如果存在订阅关系，则不允许删除
   * @summary 删除broker
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerDeletePost_2(id?: string, options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerDeletePost_2(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取broker列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerListGet(options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerListGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取broker列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerListGet_3(options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerListGet_3(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
   * @summary 添加消息处理程序
   * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerAddPost(
    mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerAddPost(mqttPayloadHandlerBaseInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 因为从 MQTT中传入的消息没有统一的标准，需要针对每个订阅的Topic添加定制化的解析处理程序，在配置时，如果topic为空，则认为是该Broker的默认处理程序，接收到数据时，优先匹配不为空的Topic，匹配不到时，则适用默认处理程序来处理。如果未配置任何处理程序，则该消息直接丢弃。
   * @summary 添加消息处理程序
   * @param {MqttPayloadHandlerBaseInfo} [mqttPayloadHandlerBaseInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerAddPost_4(
    mqttPayloadHandlerBaseInfo?: MqttPayloadHandlerBaseInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerAddPost_4(mqttPayloadHandlerBaseInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
   * @summary 删除消息处理程序
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerDeletePost(id?: string, options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerDeletePost(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 在删除数据时，会检查是否有设备已经订阅了Topic上的数据，如果存在订阅，则不允许删除
   * @summary 删除消息处理程序
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerDeletePost_5(id?: string, options?: AxiosRequestConfig) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerDeletePost_5(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取消息处理程序列表
   * @param {string} [broker]
   * @param {string} [topic]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerListGet(
    broker?: string,
    topic?: string,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerListGet(broker, topic, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取消息处理程序列表
   * @param {string} [broker]
   * @param {string} [topic]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerListGet_6(
    broker?: string,
    topic?: string,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerListGet_6(broker, topic, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新消息处理程序
   * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerUpdatePost(
    mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerUpdatePost(mqttPayloadHandlerInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新消息处理程序
   * @param {MqttPayloadHandlerInfo} [mqttPayloadHandlerInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(
    mqttPayloadHandlerInfo?: MqttPayloadHandlerInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerPayloadHandlerUpdatePost_7(mqttPayloadHandlerInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新broker配置
   * @param {MqttBrokerInfo} [mqttBrokerInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerUpdatePost(
    mqttBrokerInfo?: MqttBrokerInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerUpdatePost(mqttBrokerInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新broker配置
   * @param {MqttBrokerInfo} [mqttBrokerInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MqttBrokerApi
   */
  public apiV1IotMqttBrokerUpdatePost_8(
    mqttBrokerInfo?: MqttBrokerInfo,
    options?: AxiosRequestConfig,
  ) {
    return MqttBrokerApiFp(this.configuration)
      .apiV1IotMqttBrokerUpdatePost_8(mqttBrokerInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
