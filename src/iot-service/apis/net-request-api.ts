/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDeviceIndicatorInput } from '../models'
// @ts-ignore
import { AddModelPointDataTypeInput } from '../models'
// @ts-ignore
import { AddModelPointsInput } from '../models'
// @ts-ignore
import { AddRealityModelRelationInput } from '../models'
// @ts-ignore
import { DeviceIndicatorOutput } from '../models'
// @ts-ignore
import { GetMultiDeviceIndicatorOutput } from '../models'
// @ts-ignore
import { ModelBoundaryConfigFormat } from '../models'
// @ts-ignore
import { ModelPointOutput } from '../models'
// @ts-ignore
import { PointDataTypeInfo } from '../models'
// @ts-ignore
import { UpdateModelPointDataTypeInput } from '../models'
/**
 * NetRequestApi - axios parameter creator
 * @export
 */
export const NetRequestApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 通过指标编码列表（indicator）批量获取指标信息 Get indicator by code
     * @param {Array<string>} [input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorByCodeGet: async (
      input?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/device-indicator-by-code`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (input !== undefined) {
        localVarQueryParameter['input'] = input
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户下的所有的指标数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/device-indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorsPost: async (
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/device-indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestInitDeviceIndicatorsPost: async (
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/init-device-indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config-list/{templateId}
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelBoundaryConfigListTemplateIdGet: async (
      templateId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'templateId' is not null or undefined
      assertParamExists(
        'apiAppNetRequestModelBoundaryConfigListTemplateIdGet',
        'templateId',
        templateId,
      )
      const localVarPath = `/api/app/net-request/model-boundary-config-list/{templateId}`.replace(
        `{${'templateId'}}`,
        encodeURIComponent(String(templateId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config
     * @param {Array<ModelBoundaryConfigFormat>} [modelBoundaryConfigFormat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelBoundaryConfigPut: async (
      modelBoundaryConfigFormat?: Array<ModelBoundaryConfigFormat>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/model-boundary-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelBoundaryConfigFormat,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointDataTypePost: async (
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/model-point-data-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addModelPointDataTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointDataTypePut: async (
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/model-point-data-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateModelPointDataTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型点位id获取模型点位的详细信息
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {Array<string>} [modelIds] 模型中的ID列表，可为空 model muid list, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsByModelIdsGet: async (
      templateScenarioId: string,
      modelIds?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'templateScenarioId' is not null or undefined
      assertParamExists(
        'apiAppNetRequestModelPointsByModelIdsGet',
        'templateScenarioId',
        templateScenarioId,
      )
      const localVarPath = `/api/app/net-request/model-points-by-model-ids`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['TemplateScenarioId'] = templateScenarioId
      }

      if (modelIds !== undefined) {
        localVarQueryParameter['ModelIds'] = modelIds
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointsInput>} [addModelPointsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsPost: async (
      addModelPointsInput?: Array<AddModelPointsInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/model-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addModelPointsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据Id获取模型点位信息
     * @param {string} scenarioId
     * @param {Array<string>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsScenarioIdGet: async (
      scenarioId: string,
      ids?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scenarioId' is not null or undefined
      assertParamExists('apiAppNetRequestModelPointsScenarioIdGet', 'scenarioId', scenarioId)
      const localVarPath = `/api/app/net-request/model-points/{scenarioId}`.replace(
        `{${'scenarioId'}}`,
        encodeURIComponent(String(scenarioId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (ids !== undefined) {
        localVarQueryParameter['ids'] = ids
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取多个设备指标详情
     * @param {Array<string>} deviceIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestMultiDeviceIndicatorGet: async (
      deviceIds: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceIds' is not null or undefined
      assertParamExists('apiAppNetRequestMultiDeviceIndicatorGet', 'deviceIds', deviceIds)
      const localVarPath = `/api/app/net-request/multi-device-indicator`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceIds !== undefined) {
        localVarQueryParameter['DeviceIds'] = deviceIds
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指标点位与模型数据映射数据
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestPointDataTypeMapTemplateIdGet: async (
      templateId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'templateId' is not null or undefined
      assertParamExists('apiAppNetRequestPointDataTypeMapTemplateIdGet', 'templateId', templateId)
      const localVarPath = `/api/app/net-request/point-data-type-map/{templateId}`.replace(
        `{${'templateId'}}`,
        encodeURIComponent(String(templateId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [input] TemplateId列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestRealityModelRelationByTemplateIdDelete: async (
      input?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/reality-model-relation-by-template-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (input !== undefined) {
        localVarQueryParameter['input'] = input
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestRealityModelRelationsPost: async (
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/net-request/reality-model-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addRealityModelRelationInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * NetRequestApi - functional programming interface
 * @export
 */
export const NetRequestApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NetRequestApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 通过指标编码列表（indicator）批量获取指标信息 Get indicator by code
     * @param {Array<string>} [input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestDeviceIndicatorByCodeGet(
      input?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestDeviceIndicatorByCodeGet(input, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户下的所有的指标数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestDeviceIndicatorsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestDeviceIndicatorsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestDeviceIndicatorsPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestDeviceIndicatorsPost(
          addDeviceIndicatorInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestInitDeviceIndicatorsPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestInitDeviceIndicatorsPost(
          addDeviceIndicatorInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config-list/{templateId}
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelBoundaryConfigListTemplateIdGet(
      templateId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelBoundaryConfigFormat>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelBoundaryConfigListTemplateIdGet(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config
     * @param {Array<ModelBoundaryConfigFormat>} [modelBoundaryConfigFormat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelBoundaryConfigPut(
      modelBoundaryConfigFormat?: Array<ModelBoundaryConfigFormat>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelBoundaryConfigPut(
          modelBoundaryConfigFormat,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelPointDataTypePost(
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelPointDataTypePost(
          addModelPointDataTypeInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelPointDataTypePut(
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelPointDataTypePut(
          updateModelPointDataTypeInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型点位id获取模型点位的详细信息
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {Array<string>} [modelIds] 模型中的ID列表，可为空 model muid list, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelPointsByModelIdsGet(
      templateScenarioId: string,
      modelIds?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelPointsByModelIdsGet(
          templateScenarioId,
          modelIds,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointsInput>} [addModelPointsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelPointsPost(
      addModelPointsInput?: Array<AddModelPointsInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppNetRequestModelPointsPost(
        addModelPointsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据Id获取模型点位信息
     * @param {string} scenarioId
     * @param {Array<string>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestModelPointsScenarioIdGet(
      scenarioId: string,
      ids?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestModelPointsScenarioIdGet(
          scenarioId,
          ids,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取多个设备指标详情
     * @param {Array<string>} deviceIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestMultiDeviceIndicatorGet(
      deviceIds: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetMultiDeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestMultiDeviceIndicatorGet(deviceIds, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指标点位与模型数据映射数据
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestPointDataTypeMapTemplateIdGet(
      templateId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestPointDataTypeMapTemplateIdGet(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [input] TemplateId列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestRealityModelRelationByTemplateIdDelete(
      input?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestRealityModelRelationByTemplateIdDelete(
          input,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppNetRequestRealityModelRelationsPost(
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppNetRequestRealityModelRelationsPost(
          addRealityModelRelationInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * NetRequestApi - factory interface
 * @export
 */
export const NetRequestApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = NetRequestApiFp(configuration)
  return {
    /**
     *
     * @summary 通过指标编码列表（indicator）批量获取指标信息 Get indicator by code
     * @param {Array<string>} [input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorByCodeGet(
      input?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<DeviceIndicatorOutput>> {
      return localVarFp
        .apiAppNetRequestDeviceIndicatorByCodeGet(input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户下的所有的指标数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorsGet(options?: any): AxiosPromise<Array<DeviceIndicatorOutput>> {
      return localVarFp
        .apiAppNetRequestDeviceIndicatorsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestDeviceIndicatorsPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiAppNetRequestDeviceIndicatorsPost(addDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestInitDeviceIndicatorsPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiAppNetRequestInitDeviceIndicatorsPost(addDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config-list/{templateId}
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelBoundaryConfigListTemplateIdGet(
      templateId: string,
      options?: any,
    ): AxiosPromise<Array<ModelBoundaryConfigFormat>> {
      return localVarFp
        .apiAppNetRequestModelBoundaryConfigListTemplateIdGet(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/net-request/model-boundary-config
     * @param {Array<ModelBoundaryConfigFormat>} [modelBoundaryConfigFormat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelBoundaryConfigPut(
      modelBoundaryConfigFormat?: Array<ModelBoundaryConfigFormat>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiAppNetRequestModelBoundaryConfigPut(modelBoundaryConfigFormat, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointDataTypePost(
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiAppNetRequestModelPointDataTypePost(addModelPointDataTypeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointDataTypePut(
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiAppNetRequestModelPointDataTypePut(updateModelPointDataTypeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型点位id获取模型点位的详细信息
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {Array<string>} [modelIds] 模型中的ID列表，可为空 model muid list, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsByModelIdsGet(
      templateScenarioId: string,
      modelIds?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiAppNetRequestModelPointsByModelIdsGet(templateScenarioId, modelIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointsInput>} [addModelPointsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsPost(
      addModelPointsInput?: Array<AddModelPointsInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAppNetRequestModelPointsPost(addModelPointsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据Id获取模型点位信息
     * @param {string} scenarioId
     * @param {Array<string>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestModelPointsScenarioIdGet(
      scenarioId: string,
      ids?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiAppNetRequestModelPointsScenarioIdGet(scenarioId, ids, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取多个设备指标详情
     * @param {Array<string>} deviceIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestMultiDeviceIndicatorGet(
      deviceIds: Array<string>,
      options?: any,
    ): AxiosPromise<Array<GetMultiDeviceIndicatorOutput>> {
      return localVarFp
        .apiAppNetRequestMultiDeviceIndicatorGet(deviceIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指标点位与模型数据映射数据
     * @param {string} templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestPointDataTypeMapTemplateIdGet(
      templateId: string,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiAppNetRequestPointDataTypeMapTemplateIdGet(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [input] TemplateId列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestRealityModelRelationByTemplateIdDelete(
      input?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiAppNetRequestRealityModelRelationByTemplateIdDelete(input, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppNetRequestRealityModelRelationsPost(
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiAppNetRequestRealityModelRelationsPost(addRealityModelRelationInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * NetRequestApi - object-oriented interface
 * @export
 * @class NetRequestApi
 * @extends {BaseAPI}
 */
export class NetRequestApi extends BaseAPI {
  /**
   *
   * @summary 通过指标编码列表（indicator）批量获取指标信息 Get indicator by code
   * @param {Array<string>} [input]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestDeviceIndicatorByCodeGet(
    input?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestDeviceIndicatorByCodeGet(input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户下的所有的指标数据
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestDeviceIndicatorsGet(options?: AxiosRequestConfig) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestDeviceIndicatorsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量增加设备指标信息 batch add device indicators
   * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestDeviceIndicatorsPost(
    addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestDeviceIndicatorsPost(addDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
   * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestInitDeviceIndicatorsPost(
    addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestInitDeviceIndicatorsPost(addDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/net-request/model-boundary-config-list/{templateId}
   * @param {string} templateId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelBoundaryConfigListTemplateIdGet(
    templateId: string,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelBoundaryConfigListTemplateIdGet(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/net-request/model-boundary-config
   * @param {Array<ModelBoundaryConfigFormat>} [modelBoundaryConfigFormat]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelBoundaryConfigPut(
    modelBoundaryConfigFormat?: Array<ModelBoundaryConfigFormat>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelBoundaryConfigPut(modelBoundaryConfigFormat, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
   * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelPointDataTypePost(
    addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelPointDataTypePost(addModelPointDataTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
   * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelPointDataTypePut(
    updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelPointDataTypePut(updateModelPointDataTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型点位id获取模型点位的详细信息
   * @param {string} templateScenarioId 模板方案ID template scenario id
   * @param {Array<string>} [modelIds] 模型中的ID列表，可为空 model muid list, can be empty
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelPointsByModelIdsGet(
    templateScenarioId: string,
    modelIds?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelPointsByModelIdsGet(templateScenarioId, modelIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
   * @param {Array<AddModelPointsInput>} [addModelPointsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelPointsPost(
    addModelPointsInput?: Array<AddModelPointsInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelPointsPost(addModelPointsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据Id获取模型点位信息
   * @param {string} scenarioId
   * @param {Array<string>} [ids]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestModelPointsScenarioIdGet(
    scenarioId: string,
    ids?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestModelPointsScenarioIdGet(scenarioId, ids, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取多个设备指标详情
   * @param {Array<string>} deviceIds
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestMultiDeviceIndicatorGet(
    deviceIds: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestMultiDeviceIndicatorGet(deviceIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指标点位与模型数据映射数据
   * @param {string} templateId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestPointDataTypeMapTemplateIdGet(
    templateId: string,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestPointDataTypeMapTemplateIdGet(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
   * @param {Array<string>} [input] TemplateId列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestRealityModelRelationByTemplateIdDelete(
    input?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestRealityModelRelationByTemplateIdDelete(input, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
   * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NetRequestApi
   */
  public apiAppNetRequestRealityModelRelationsPost(
    addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
    options?: AxiosRequestConfig,
  ) {
    return NetRequestApiFp(this.configuration)
      .apiAppNetRequestRealityModelRelationsPost(addRealityModelRelationInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
