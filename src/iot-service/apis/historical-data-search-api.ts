/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { HisDataSearchInput } from '../models'
// @ts-ignore
import { HistorySearchRecordOutput } from '../models'
// @ts-ignore
import { SaveHistorySearchRecordInput } from '../models'
// @ts-ignore
import { SearchCategoryOutput } from '../models'
// @ts-ignore
import { SearchOutput } from '../models'
/**
 * HistoricalDataSearchApi - axios parameter creator
 * @export
 */
export const HistoricalDataSearchApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 历史数据搜索条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchConditionsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/historical-data/search/conditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 历史数据查询 / historical data query
     * @param {Array<HisDataSearchInput>} [hisDataSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchPost: async (
      hisDataSearchInput?: Array<HisDataSearchInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/historical-data/search`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        hisDataSearchInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 历史数据搜索记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/historical-data/search/records`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 另存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsSaveAsPost: async (
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/historical-data/search/records/save-as`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveHistorySearchRecordInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsSavePost: async (
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/historical-data/search/records/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveHistorySearchRecordInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * HistoricalDataSearchApi - functional programming interface
 * @export
 */
export const HistoricalDataSearchApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HistoricalDataSearchApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 历史数据搜索条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1HistoricalDataSearchConditionsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchCategoryOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1HistoricalDataSearchConditionsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 历史数据查询 / historical data query
     * @param {Array<HisDataSearchInput>} [hisDataSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1HistoricalDataSearchPost(
      hisDataSearchInput?: Array<HisDataSearchInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1HistoricalDataSearchPost(
        hisDataSearchInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 历史数据搜索记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1HistoricalDataSearchRecordsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistorySearchRecordOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1HistoricalDataSearchRecordsGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 另存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1HistoricalDataSearchRecordsSaveAsPost(
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1HistoricalDataSearchRecordsSaveAsPost(
          saveHistorySearchRecordInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1HistoricalDataSearchRecordsSavePost(
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1HistoricalDataSearchRecordsSavePost(
          saveHistorySearchRecordInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * HistoricalDataSearchApi - factory interface
 * @export
 */
export const HistoricalDataSearchApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HistoricalDataSearchApiFp(configuration)
  return {
    /**
     *
     * @summary 历史数据搜索条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchConditionsGet(
      options?: any,
    ): AxiosPromise<Array<SearchCategoryOutput>> {
      return localVarFp
        .apiV1HistoricalDataSearchConditionsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 历史数据查询 / historical data query
     * @param {Array<HisDataSearchInput>} [hisDataSearchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchPost(
      hisDataSearchInput?: Array<HisDataSearchInput>,
      options?: any,
    ): AxiosPromise<SearchOutput> {
      return localVarFp
        .apiV1HistoricalDataSearchPost(hisDataSearchInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 历史数据搜索记录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsGet(
      options?: any,
    ): AxiosPromise<Array<HistorySearchRecordOutput>> {
      return localVarFp
        .apiV1HistoricalDataSearchRecordsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 另存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsSaveAsPost(
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1HistoricalDataSearchRecordsSaveAsPost(saveHistorySearchRecordInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存历史数据搜索记录
     * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HistoricalDataSearchRecordsSavePost(
      saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1HistoricalDataSearchRecordsSavePost(saveHistorySearchRecordInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * HistoricalDataSearchApi - object-oriented interface
 * @export
 * @class HistoricalDataSearchApi
 * @extends {BaseAPI}
 */
export class HistoricalDataSearchApi extends BaseAPI {
  /**
   *
   * @summary 历史数据搜索条件
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoricalDataSearchApi
   */
  public apiV1HistoricalDataSearchConditionsGet(options?: AxiosRequestConfig) {
    return HistoricalDataSearchApiFp(this.configuration)
      .apiV1HistoricalDataSearchConditionsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 历史数据查询 / historical data query
   * @param {Array<HisDataSearchInput>} [hisDataSearchInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoricalDataSearchApi
   */
  public apiV1HistoricalDataSearchPost(
    hisDataSearchInput?: Array<HisDataSearchInput>,
    options?: AxiosRequestConfig,
  ) {
    return HistoricalDataSearchApiFp(this.configuration)
      .apiV1HistoricalDataSearchPost(hisDataSearchInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 历史数据搜索记录
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoricalDataSearchApi
   */
  public apiV1HistoricalDataSearchRecordsGet(options?: AxiosRequestConfig) {
    return HistoricalDataSearchApiFp(this.configuration)
      .apiV1HistoricalDataSearchRecordsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 另存历史数据搜索记录
   * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoricalDataSearchApi
   */
  public apiV1HistoricalDataSearchRecordsSaveAsPost(
    saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
    options?: AxiosRequestConfig,
  ) {
    return HistoricalDataSearchApiFp(this.configuration)
      .apiV1HistoricalDataSearchRecordsSaveAsPost(saveHistorySearchRecordInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存历史数据搜索记录
   * @param {Array<SaveHistorySearchRecordInput>} [saveHistorySearchRecordInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HistoricalDataSearchApi
   */
  public apiV1HistoricalDataSearchRecordsSavePost(
    saveHistorySearchRecordInput?: Array<SaveHistorySearchRecordInput>,
    options?: AxiosRequestConfig,
  ) {
    return HistoricalDataSearchApiFp(this.configuration)
      .apiV1HistoricalDataSearchRecordsSavePost(saveHistorySearchRecordInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
