/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
/**
 * TelemetryMockDataApi - axios parameter creator
 * @export
 */
export const TelemetryMockDataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 将mock数据作为遥感数据写入设备
     * @param {string} [tenantId]
     * @param {string} [dataTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TelemetryMockDataInsertGet: async (
      tenantId?: string,
      dataTag?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/telemetry/mock_data/insert`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (dataTag !== undefined) {
        localVarQueryParameter['DataTag'] = dataTag
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 上传mock数据的excel表
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TelemetryMockDataUploadPost: async (
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/telemetry/mock_data/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TelemetryMockDataApi - functional programming interface
 * @export
 */
export const TelemetryMockDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TelemetryMockDataApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 将mock数据作为遥感数据写入设备
     * @param {string} [tenantId]
     * @param {string} [dataTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TelemetryMockDataInsertGet(
      tenantId?: string,
      dataTag?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TelemetryMockDataInsertGet(
        tenantId,
        dataTag,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 上传mock数据的excel表
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TelemetryMockDataUploadPost(
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TelemetryMockDataUploadPost(
        excelFile,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TelemetryMockDataApi - factory interface
 * @export
 */
export const TelemetryMockDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TelemetryMockDataApiFp(configuration)
  return {
    /**
     *
     * @summary 将mock数据作为遥感数据写入设备
     * @param {string} [tenantId]
     * @param {string} [dataTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TelemetryMockDataInsertGet(
      tenantId?: string,
      dataTag?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1TelemetryMockDataInsertGet(tenantId, dataTag, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 上传mock数据的excel表
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TelemetryMockDataUploadPost(excelFile?: any, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1TelemetryMockDataUploadPost(excelFile, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TelemetryMockDataApi - object-oriented interface
 * @export
 * @class TelemetryMockDataApi
 * @extends {BaseAPI}
 */
export class TelemetryMockDataApi extends BaseAPI {
  /**
   *
   * @summary 将mock数据作为遥感数据写入设备
   * @param {string} [tenantId]
   * @param {string} [dataTag]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryMockDataApi
   */
  public apiV1TelemetryMockDataInsertGet(
    tenantId?: string,
    dataTag?: string,
    options?: AxiosRequestConfig,
  ) {
    return TelemetryMockDataApiFp(this.configuration)
      .apiV1TelemetryMockDataInsertGet(tenantId, dataTag, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 上传mock数据的excel表
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TelemetryMockDataApi
   */
  public apiV1TelemetryMockDataUploadPost(excelFile?: any, options?: AxiosRequestConfig) {
    return TelemetryMockDataApiFp(this.configuration)
      .apiV1TelemetryMockDataUploadPost(excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
