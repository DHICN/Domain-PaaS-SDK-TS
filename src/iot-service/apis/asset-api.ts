/* eslint-disable */
/**
 * iot-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddAssetInput } from '../models'
// @ts-ignore
import { AssetDetailsOutput } from '../models'
// @ts-ignore
import { AssetInfoOutputPage } from '../models'
// @ts-ignore
import { AssetRelationsInput } from '../models'
// @ts-ignore
import { DeleteAssetsInput } from '../models'
// @ts-ignore
import { UpdateAssetInput } from '../models'
/**
 * AssetApi - axios parameter creator
 * @export
 */
export const AssetApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加一条资产信息 Add an asset
     * @param {AddAssetInput} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAddAssetPost: async (
      addAssetInput?: AddAssetInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/add-asset`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addAssetInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据资产ID获取资产的详细信息，包括资产属性、子资产、子设备等 Get detailed information of an asset, including attributes, sub-assets and sub-devices by asset ID.
     * @summary 根据资产ID获取资产详细信息 Get asset details through asset ID
     * @param {string} [id] 资产ID asset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetDetailsGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/asset-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 分页获取资产列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get asset list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页获取资产列表 Get asset list: pagination query of assets
     * @param {number} [sortProperty] 用于排序的属性 sort property:  0-createdTime,  1-customerTitle,  2-label,  3-name,  4-type
     * @param {number} [sortOrder] 排序的方式 order type:  0-ASC,  1-DESC
     * @param {string} [type] 资产类型（自定义） asset type (customized)
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetListGet: async (
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/asset-list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sortProperty !== undefined) {
        localVarQueryParameter['SortProperty'] = sortProperty
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['SortOrder'] = sortOrder
      }

      if (type !== undefined) {
        localVarQueryParameter['Type'] = type
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter['PageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['PageSize'] = pageSize
      }

      if (keyWords !== undefined) {
        localVarQueryParameter['KeyWords'] = keyWords
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetRelationsPost: async (
      assetRelationsInput?: AssetRelationsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/asset-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        assetRelationsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {Array<AssetRelationsInput>} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetsRelationsPost: async (
      assetRelationsInput?: Array<AssetRelationsInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/assets-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        assetRelationsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量添加资产，如果部分资产已经存在，则会更新 Batch add assets, if some of the assets already exists, they will be updated
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<AddAssetInput>} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchAddAssetPost: async (
      addAssetInput?: Array<AddAssetInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/batch-add-asset`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addAssetInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 移除资产、设备之间的从属关系 Remove subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteAssetRelationsPost: async (
      assetRelationsInput?: AssetRelationsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/delete-asset-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        assetRelationsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量删除资产 Batch delete assets
     * @param {DeleteAssetsInput} [deleteAssetsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteAssetsPost: async (
      deleteAssetsInput?: DeleteAssetsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/delete-assets`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteAssetsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 更新资产信息，同时可更新资产属性 Update an asset, as well as it\'s attributes
     * @summary 更新一条资产信息 Update an asset
     * @param {UpdateAssetInput} [updateAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotUpdateAssetPost: async (
      updateAssetInput?: UpdateAssetInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/update-asset`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAssetInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AssetApi - functional programming interface
 * @export
 */
export const AssetApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AssetApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加一条资产信息 Add an asset
     * @param {AddAssetInput} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAddAssetPost(
      addAssetInput?: AddAssetInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAddAssetPost(
        addAssetInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据资产ID获取资产的详细信息，包括资产属性、子资产、子设备等 Get detailed information of an asset, including attributes, sub-assets and sub-devices by asset ID.
     * @summary 根据资产ID获取资产详细信息 Get asset details through asset ID
     * @param {string} [id] 资产ID asset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAssetDetailsGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDetailsOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAssetDetailsGet(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 分页获取资产列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get asset list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页获取资产列表 Get asset list: pagination query of assets
     * @param {number} [sortProperty] 用于排序的属性 sort property:  0-createdTime,  1-customerTitle,  2-label,  3-name,  4-type
     * @param {number} [sortOrder] 排序的方式 order type:  0-ASC,  1-DESC
     * @param {string} [type] 资产类型（自定义） asset type (customized)
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAssetListGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetInfoOutputPage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAssetListGet(
        sortProperty,
        sortOrder,
        type,
        pageIndex,
        pageSize,
        keyWords,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAssetRelationsPost(
      assetRelationsInput?: AssetRelationsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAssetRelationsPost(
        assetRelationsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {Array<AssetRelationsInput>} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAssetsRelationsPost(
      assetRelationsInput?: Array<AssetRelationsInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAssetsRelationsPost(
        assetRelationsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量添加资产，如果部分资产已经存在，则会更新 Batch add assets, if some of the assets already exists, they will be updated
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<AddAssetInput>} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotBatchAddAssetPost(
      addAssetInput?: Array<AddAssetInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotBatchAddAssetPost(
        addAssetInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 移除资产、设备之间的从属关系 Remove subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeleteAssetRelationsPost(
      assetRelationsInput?: AssetRelationsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeleteAssetRelationsPost(
        assetRelationsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量删除资产 Batch delete assets
     * @param {DeleteAssetsInput} [deleteAssetsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeleteAssetsPost(
      deleteAssetsInput?: DeleteAssetsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeleteAssetsPost(
        deleteAssetsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 更新资产信息，同时可更新资产属性 Update an asset, as well as it\'s attributes
     * @summary 更新一条资产信息 Update an asset
     * @param {UpdateAssetInput} [updateAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotUpdateAssetPost(
      updateAssetInput?: UpdateAssetInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotUpdateAssetPost(
        updateAssetInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AssetApi - factory interface
 * @export
 */
export const AssetApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AssetApiFp(configuration)
  return {
    /**
     *
     * @summary 添加一条资产信息 Add an asset
     * @param {AddAssetInput} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAddAssetPost(addAssetInput?: AddAssetInput, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiV1IotAddAssetPost(addAssetInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据资产ID获取资产的详细信息，包括资产属性、子资产、子设备等 Get detailed information of an asset, including attributes, sub-assets and sub-devices by asset ID.
     * @summary 根据资产ID获取资产详细信息 Get asset details through asset ID
     * @param {string} [id] 资产ID asset id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetDetailsGet(id?: string, options?: any): AxiosPromise<AssetDetailsOutput> {
      return localVarFp
        .apiV1IotAssetDetailsGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 分页获取资产列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get asset list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页获取资产列表 Get asset list: pagination query of assets
     * @param {number} [sortProperty] 用于排序的属性 sort property:  0-createdTime,  1-customerTitle,  2-label,  3-name,  4-type
     * @param {number} [sortOrder] 排序的方式 order type:  0-ASC,  1-DESC
     * @param {string} [type] 资产类型（自定义） asset type (customized)
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetListGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: any,
    ): AxiosPromise<AssetInfoOutputPage> {
      return localVarFp
        .apiV1IotAssetListGet(sortProperty, sortOrder, type, pageIndex, pageSize, keyWords, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetRelationsPost(
      assetRelationsInput?: AssetRelationsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotAssetRelationsPost(assetRelationsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
     * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
     * @param {Array<AssetRelationsInput>} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAssetsRelationsPost(
      assetRelationsInput?: Array<AssetRelationsInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotAssetsRelationsPost(assetRelationsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量添加资产，如果部分资产已经存在，则会更新 Batch add assets, if some of the assets already exists, they will be updated
     * @summary 批量添加资产信息 Batch add assets
     * @param {Array<AddAssetInput>} [addAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchAddAssetPost(
      addAssetInput?: Array<AddAssetInput>,
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .apiV1IotBatchAddAssetPost(addAssetInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 移除资产、设备之间的从属关系 Remove subordinate relationship among assets and devices
     * @param {AssetRelationsInput} [assetRelationsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteAssetRelationsPost(
      assetRelationsInput?: AssetRelationsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotDeleteAssetRelationsPost(assetRelationsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量删除资产 Batch delete assets
     * @param {DeleteAssetsInput} [deleteAssetsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteAssetsPost(
      deleteAssetsInput?: DeleteAssetsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotDeleteAssetsPost(deleteAssetsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 更新资产信息，同时可更新资产属性 Update an asset, as well as it\'s attributes
     * @summary 更新一条资产信息 Update an asset
     * @param {UpdateAssetInput} [updateAssetInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotUpdateAssetPost(
      updateAssetInput?: UpdateAssetInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1IotUpdateAssetPost(updateAssetInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AssetApi - object-oriented interface
 * @export
 * @class AssetApi
 * @extends {BaseAPI}
 */
export class AssetApi extends BaseAPI {
  /**
   *
   * @summary 添加一条资产信息 Add an asset
   * @param {AddAssetInput} [addAssetInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotAddAssetPost(addAssetInput?: AddAssetInput, options?: AxiosRequestConfig) {
    return AssetApiFp(this.configuration)
      .apiV1IotAddAssetPost(addAssetInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据资产ID获取资产的详细信息，包括资产属性、子资产、子设备等 Get detailed information of an asset, including attributes, sub-assets and sub-devices by asset ID.
   * @summary 根据资产ID获取资产详细信息 Get asset details through asset ID
   * @param {string} [id] 资产ID asset id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotAssetDetailsGet(id?: string, options?: AxiosRequestConfig) {
    return AssetApiFp(this.configuration)
      .apiV1IotAssetDetailsGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 分页获取资产列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get asset list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
   * @summary 分页获取资产列表 Get asset list: pagination query of assets
   * @param {number} [sortProperty] 用于排序的属性 sort property:  0-createdTime,  1-customerTitle,  2-label,  3-name,  4-type
   * @param {number} [sortOrder] 排序的方式 order type:  0-ASC,  1-DESC
   * @param {string} [type] 资产类型（自定义） asset type (customized)
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {string} [keyWords]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotAssetListGet(
    sortProperty?: number,
    sortOrder?: number,
    type?: string,
    pageIndex?: number,
    pageSize?: number,
    keyWords?: string,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotAssetListGet(sortProperty, sortOrder, type, pageIndex, pageSize, keyWords, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
   * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
   * @param {AssetRelationsInput} [assetRelationsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotAssetRelationsPost(
    assetRelationsInput?: AssetRelationsInput,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotAssetRelationsPost(assetRelationsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 构建资产、设备之间的从属关系，资产下可以有子资产，也可以有子设备 Build subordinate relationship among assets and devices, assets can have sub-assets or sub-devices
   * @summary 构建资产、设备之间的从属关系 Build subordinate relationship among assets and devices
   * @param {Array<AssetRelationsInput>} [assetRelationsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotAssetsRelationsPost(
    assetRelationsInput?: Array<AssetRelationsInput>,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotAssetsRelationsPost(assetRelationsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量添加资产，如果部分资产已经存在，则会更新 Batch add assets, if some of the assets already exists, they will be updated
   * @summary 批量添加资产信息 Batch add assets
   * @param {Array<AddAssetInput>} [addAssetInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotBatchAddAssetPost(
    addAssetInput?: Array<AddAssetInput>,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotBatchAddAssetPost(addAssetInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 移除资产、设备之间的从属关系 Remove subordinate relationship among assets and devices
   * @param {AssetRelationsInput} [assetRelationsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotDeleteAssetRelationsPost(
    assetRelationsInput?: AssetRelationsInput,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotDeleteAssetRelationsPost(assetRelationsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量删除资产 Batch delete assets
   * @param {DeleteAssetsInput} [deleteAssetsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotDeleteAssetsPost(
    deleteAssetsInput?: DeleteAssetsInput,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotDeleteAssetsPost(deleteAssetsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 更新资产信息，同时可更新资产属性 Update an asset, as well as it\'s attributes
   * @summary 更新一条资产信息 Update an asset
   * @param {UpdateAssetInput} [updateAssetInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetApi
   */
  public apiV1IotUpdateAssetPost(
    updateAssetInput?: UpdateAssetInput,
    options?: AxiosRequestConfig,
  ) {
    return AssetApiFp(this.configuration)
      .apiV1IotUpdateAssetPost(updateAssetInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
