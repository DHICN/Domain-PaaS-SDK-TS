/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddOrUpdateOnlineDatasInput } from '../models'
// @ts-ignore
import { GetOnlineTsDataInput } from '../models'
// @ts-ignore
import { GetOnlineTsDataInputV2 } from '../models'
// @ts-ignore
import { LatestTimeSeries } from '../models'
// @ts-ignore
import { ModifyOnlineProcessedDatasInput } from '../models'
// @ts-ignore
import { RealTimeDataInput } from '../models'
// @ts-ignore
import { SaveOnlineProcessedData } from '../models'
// @ts-ignore
import { SaveRealTimeData } from '../models'
// @ts-ignore
import { TimeseriesBatchForV3Input } from '../models'
// @ts-ignore
import { TsDataInputOutput } from '../models'
// @ts-ignore
import { TsDataInputOutputV3 } from '../models'
// @ts-ignore
import { UpdateLatestTagInput } from '../models'
// @ts-ignore
import { UpdateLatestTagInputV1 } from '../models'
/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 注：此接口未在污水基础服务、污水领域服务、清洗算法使用，因此暂不做升级，若后续发现有使用，则可升级，否则可直接废弃
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOnlineProcessedDatasPost: async (
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        tsDataInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存清洗数据
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOnlineSourceDatasPost: async (
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOnlineSourceDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveOnlineProcessedData,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加或更新清洗数据信息-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOrUpdateOnlineProcessedDatasPost: async (
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOrUpdateOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOrUpdateOnlineDatasInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 缓存清洗数据和源数据
     * @param {string} [tenantId]
     * @param {string} [absoluteExpirationRelativeToNow] 缓存的数据时间长度
     * @param {string} [getTimeSpan] 每次新增的待缓存的时间范围，比如5分钟一条的数据就设置05:00
     * @param {string} [now] 补充指定时间的缓存数据，主要用于开发时期可写入任意时刻数据的测试，接口稳定后可删除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataCacheTelemetryGet: async (
      tenantId?: string,
      absoluteExpirationRelativeToNow?: string,
      getTimeSpan?: string,
      now?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/CacheTelemetry`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (absoluteExpirationRelativeToNow !== undefined) {
        localVarQueryParameter['absoluteExpirationRelativeToNow'] = absoluteExpirationRelativeToNow
      }

      if (getTimeSpan !== undefined) {
        localVarQueryParameter['getTimeSpan'] = getTimeSpan
      }

      if (now !== undefined) {
        localVarQueryParameter['now'] = now
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键字：清洗数据、数据查询  使用场景：通过时间范围、点位代码、清洗标签来获取清洗后数据。如果点位代码为空，则返回所有点位的清洗数据；如果清洗标签为空，则返回所有标签的清洗数据。数据将清洗的时间顺序排列。
     * @summary 清洗数据查询
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataGetOnlineProcessedDatasByConditionsPost: async (
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/GetOnlineProcessedDatasByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOnlineTsDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取缓存中的Opc配置信息，主要为了提高数据的查询效率，系统会在启动时把所有的配置信息加载到缓存中，后续会在opc心跳的接口用用到，频繁去查询opc配置
     * @summary [内部接口]获取reids中存储的opc相关表信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataGetOpcConfigDataPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/GetOpcConfigData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataMockOnlineSourceDatasGet: async (
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/MockOnlineSourceDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (onlineProcessed !== undefined) {
        localVarQueryParameter['onlineProcessed'] = onlineProcessed
      }

      if (beginTime !== undefined) {
        localVarQueryParameter['beginTime'] = beginTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (timeSpan !== undefined) {
        localVarQueryParameter['timeSpan'] = timeSpan
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改清洗数据-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataModifyOnlineProcessedDatasPost: async (
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/ModifyOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modifyOnlineProcessedDatasInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键字：数据清洗、  应用场景：保存清洗数据，由清洗算法调用。调用时，需要指定清洗的设备、清洗的点位(指标)、清洗的时间、清洗后的值、清洗的数据标签，清洗的时间格式为\'yyyy-MM-ddTHH:mm:sszzz\'。本接口中数据的Tag 为字符串格式，内部调用的数据同步接口仍为`/api/v1/iot/save-telemetry-data`， 而`/api/v1/iot/save-telemetry-data`接口已过时，后续会考虑废弃此接口或做版本升级。升级后，将不再支持字符串类型的Tag值，可以考虑改为数值类型（枚举）, 废弃后，考虑使用`/api/v3/iot/save-telemetry-data-batch` 来做数据同步。调用V3时，需要自行追加清洗指标标签、清洗之后的值的后缀，如原始指标为 Indicator_A，则清洗后的数据可保存为Indicator_A_CLEAN、清洗后的标签为 Indicator_A_TAG; 如果不做指标重命名，将覆盖指标Indicator_A的原始数据。对于调用V3接口保存清洗数据时，不强制使用\"_CLEAN\"和\"_TAG\"后缀，只需查询和录入是指标code保持一致即可。
     * @summary [内部接口]保存清洗数据到iot  注：此接口为升级后的保存清洗数据接口
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataOnlineProcessedDatasSavePost: async (
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/OnlineProcessedDatas/Save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveOnlineProcessedData,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键字：缓存、最新数据 从Redis缓存中获取最新时刻的数据，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放， redis上缓存的值的格式为{\"DeviceCode\":\"xxx\",\"Indicator\":\"xxx\",\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]从Redis中获取最新的实测数据
     * @param {RealTimeDataInput} [realTimeDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataRealTimeDataPost: async (
      realTimeDataInput?: RealTimeDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/RealTimeData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        realTimeDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 向redis中缓存Opc配置，主要涉及3张表，OpcUaPubSubNotify、OpcUaPubSub 、OpcUaCommunication， 表的数据全量缓存。
     * @summary [内部接口]表名OpcUaPubSubNotify、OpcUaPubSub、OpcUaCommunication添加redis
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataSetOpcConfigDataPost: async (
      requestBody?: { [key: string]: string },
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/SetOpcConfigData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {Array<SaveRealTimeData>} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataSetRealTimeDataBatchPost: async (
      saveRealTimeData?: Array<SaveRealTimeData>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/SetRealTimeDataBatch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveRealTimeData,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {SaveRealTimeData} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataSetRealTimeDataPost: async (
      saveRealTimeData?: SaveRealTimeData,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/SetRealTimeData`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveRealTimeData,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改最新的Tag
     * @param {Array<UpdateLatestTagInputV1>} [updateLatestTagInputV1]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataUpdateLatestTagPost: async (
      updateLatestTagInputV1?: Array<UpdateLatestTagInputV1>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/UpdateLatestTag`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLatestTagInputV1,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新清洗数据信息  注：升级后改为调用OnlineProcessedDatas/Save接口
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataUpdateOnlineProcessedDatasPost: async (
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/UpdateOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        tsDataInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 此接口主要用于兼容已有的污水项目，接口参数结构和返回数据结构增加了DeviceCode，PointCode改为Indicator，待前端和清洗算法都改为调用v3接口后，此接口便可废弃
     * @summary 获取清洗数据
     * @param {GetOnlineTsDataInputV2} [getOnlineTsDataInputV2]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataV2GetOnlineProcessedDatasByConditionsPost: async (
      getOnlineTsDataInputV2?: GetOnlineTsDataInputV2,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/v2/GetOnlineProcessedDatasByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOnlineTsDataInputV2,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataV2MockOnlineSourceDatasGet: async (
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/v2/MockOnlineSourceDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (onlineProcessed !== undefined) {
        localVarQueryParameter['onlineProcessed'] = onlineProcessed
      }

      if (beginTime !== undefined) {
        localVarQueryParameter['beginTime'] = beginTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (timeSpan !== undefined) {
        localVarQueryParameter['timeSpan'] = timeSpan
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键字：最新时刻、数据标签、所有指标  应用场景：更新设备的清洗数据标签，如果一个设备下有多个清洗点位，则在调用本接口进行更新时，会将所有点位的清洗标签统一更新为指定的值，更新时，只会更新后一个时刻的清洗标签值。
     * @summary 更新设备的数据清洗标签
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataV2UpdateLatestTagPost: async (
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/v2/UpdateLatestTag`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLatestTagInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键字：数据清洗、数据查询  应用场景：通过时间范围、清洗点位、指标来查询清洗后的数据。查询将根据指定的时间范围来查询IoT中的清洗数据，返回值的时间为字符串类型的数组，时间格式为标准的ISO格式时间串（\'yyyy-MM-ddTHH:mm:sszzz\'）,各个时刻的值按double类型数组返回，清洗的数据标签在Tag字段中返回，T、V、Tags 三个数据数组的长度将保持一致，三个数组下标相同的为一组数据。
     * @summary 查询清洗数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataV3GetOnlineProcessedDatasByConditionsPost: async (
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/v3/GetOnlineProcessedDatasByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        timeseriesBatchForV3Input,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
  return {
    /**
     * 注：此接口未在污水基础服务、污水领域服务、清洗算法使用，因此暂不做升级，若后续发现有使用，则可升级，否则可直接废弃
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataAddOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataAddOnlineProcessedDatasPost(
        tsDataInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存清洗数据
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataAddOnlineSourceDatasPost(
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataAddOnlineSourceDatasPost(
        saveOnlineProcessedData,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加或更新清洗数据信息-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataAddOrUpdateOnlineProcessedDatasPost(
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataAddOrUpdateOnlineProcessedDatasPost(
          addOrUpdateOnlineDatasInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 缓存清洗数据和源数据
     * @param {string} [tenantId]
     * @param {string} [absoluteExpirationRelativeToNow] 缓存的数据时间长度
     * @param {string} [getTimeSpan] 每次新增的待缓存的时间范围，比如5分钟一条的数据就设置05:00
     * @param {string} [now] 补充指定时间的缓存数据，主要用于开发时期可写入任意时刻数据的测试，接口稳定后可删除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataCacheTelemetryGet(
      tenantId?: string,
      absoluteExpirationRelativeToNow?: string,
      getTimeSpan?: string,
      now?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataCacheTelemetryGet(
        tenantId,
        absoluteExpirationRelativeToNow,
        getTimeSpan,
        now,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键字：清洗数据、数据查询  使用场景：通过时间范围、点位代码、清洗标签来获取清洗后数据。如果点位代码为空，则返回所有点位的清洗数据；如果清洗标签为空，则返回所有标签的清洗数据。数据将清洗的时间顺序排列。
     * @summary 清洗数据查询
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataGetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TsDataInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataGetOnlineProcessedDatasByConditionsPost(
          getOnlineTsDataInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取缓存中的Opc配置信息，主要为了提高数据的查询效率，系统会在启动时把所有的配置信息加载到缓存中，后续会在opc心跳的接口用用到，频繁去查询opc配置
     * @summary [内部接口]获取reids中存储的opc相关表信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataGetOpcConfigDataPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataGetOpcConfigDataPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataMockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataMockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改清洗数据-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataModifyOnlineProcessedDatasPost(
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataModifyOnlineProcessedDatasPost(
          modifyOnlineProcessedDatasInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键字：数据清洗、  应用场景：保存清洗数据，由清洗算法调用。调用时，需要指定清洗的设备、清洗的点位(指标)、清洗的时间、清洗后的值、清洗的数据标签，清洗的时间格式为\'yyyy-MM-ddTHH:mm:sszzz\'。本接口中数据的Tag 为字符串格式，内部调用的数据同步接口仍为`/api/v1/iot/save-telemetry-data`， 而`/api/v1/iot/save-telemetry-data`接口已过时，后续会考虑废弃此接口或做版本升级。升级后，将不再支持字符串类型的Tag值，可以考虑改为数值类型（枚举）, 废弃后，考虑使用`/api/v3/iot/save-telemetry-data-batch` 来做数据同步。调用V3时，需要自行追加清洗指标标签、清洗之后的值的后缀，如原始指标为 Indicator_A，则清洗后的数据可保存为Indicator_A_CLEAN、清洗后的标签为 Indicator_A_TAG; 如果不做指标重命名，将覆盖指标Indicator_A的原始数据。对于调用V3接口保存清洗数据时，不强制使用\"_CLEAN\"和\"_TAG\"后缀，只需查询和录入是指标code保持一致即可。
     * @summary [内部接口]保存清洗数据到iot  注：此接口为升级后的保存清洗数据接口
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataOnlineProcessedDatasSavePost(
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataOnlineProcessedDatasSavePost(
        saveOnlineProcessedData,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键字：缓存、最新数据 从Redis缓存中获取最新时刻的数据，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放， redis上缓存的值的格式为{\"DeviceCode\":\"xxx\",\"Indicator\":\"xxx\",\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]从Redis中获取最新的实测数据
     * @param {RealTimeDataInput} [realTimeDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataRealTimeDataPost(
      realTimeDataInput?: RealTimeDataInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LatestTimeSeries>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataRealTimeDataPost(
        realTimeDataInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 向redis中缓存Opc配置，主要涉及3张表，OpcUaPubSubNotify、OpcUaPubSub 、OpcUaCommunication， 表的数据全量缓存。
     * @summary [内部接口]表名OpcUaPubSubNotify、OpcUaPubSub、OpcUaCommunication添加redis
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataSetOpcConfigDataPost(
      requestBody?: { [key: string]: string },
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataSetOpcConfigDataPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {Array<SaveRealTimeData>} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataSetRealTimeDataBatchPost(
      saveRealTimeData?: Array<SaveRealTimeData>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataSetRealTimeDataBatchPost(
        saveRealTimeData,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {SaveRealTimeData} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataSetRealTimeDataPost(
      saveRealTimeData?: SaveRealTimeData,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataSetRealTimeDataPost(
        saveRealTimeData,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改最新的Tag
     * @param {Array<UpdateLatestTagInputV1>} [updateLatestTagInputV1]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataUpdateLatestTagPost(
      updateLatestTagInputV1?: Array<UpdateLatestTagInputV1>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataUpdateLatestTagPost(
        updateLatestTagInputV1,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新清洗数据信息  注：升级后改为调用OnlineProcessedDatas/Save接口
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataUpdateOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataUpdateOnlineProcessedDatasPost(
          tsDataInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 此接口主要用于兼容已有的污水项目，接口参数结构和返回数据结构增加了DeviceCode，PointCode改为Indicator，待前端和清洗算法都改为调用v3接口后，此接口便可废弃
     * @summary 获取清洗数据
     * @param {GetOnlineTsDataInputV2} [getOnlineTsDataInputV2]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataV2GetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInputV2?: GetOnlineTsDataInputV2,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SaveOnlineProcessedData>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataV2GetOnlineProcessedDatasByConditionsPost(
          getOnlineTsDataInputV2,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiDataV2MockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataV2MockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键字：最新时刻、数据标签、所有指标  应用场景：更新设备的清洗数据标签，如果一个设备下有多个清洗点位，则在调用本接口进行更新时，会将所有点位的清洗标签统一更新为指定的值，更新时，只会更新后一个时刻的清洗标签值。
     * @summary 更新设备的数据清洗标签
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataV2UpdateLatestTagPost(
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataV2UpdateLatestTagPost(
        updateLatestTagInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键字：数据清洗、数据查询  应用场景：通过时间范围、清洗点位、指标来查询清洗后的数据。查询将根据指定的时间范围来查询IoT中的清洗数据，返回值的时间为字符串类型的数组，时间格式为标准的ISO格式时间串（\'yyyy-MM-ddTHH:mm:sszzz\'）,各个时刻的值按double类型数组返回，清洗的数据标签在Tag字段中返回，T、V、Tags 三个数据数组的长度将保持一致，三个数组下标相同的为一组数据。
     * @summary 查询清洗数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataV3GetOnlineProcessedDatasByConditionsPost(
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TsDataInputOutputV3>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataV3GetOnlineProcessedDatasByConditionsPost(
          timeseriesBatchForV3Input,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataApiFp(configuration)
  return {
    /**
     * 注：此接口未在污水基础服务、污水领域服务、清洗算法使用，因此暂不做升级，若后续发现有使用，则可升级，否则可直接废弃
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOnlineProcessedDatasPost(tsDataInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存清洗数据
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOnlineSourceDatasPost(
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOnlineSourceDatasPost(saveOnlineProcessedData, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加或更新清洗数据信息-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataAddOrUpdateOnlineProcessedDatasPost(
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOrUpdateOnlineProcessedDatasPost(addOrUpdateOnlineDatasInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 缓存清洗数据和源数据
     * @param {string} [tenantId]
     * @param {string} [absoluteExpirationRelativeToNow] 缓存的数据时间长度
     * @param {string} [getTimeSpan] 每次新增的待缓存的时间范围，比如5分钟一条的数据就设置05:00
     * @param {string} [now] 补充指定时间的缓存数据，主要用于开发时期可写入任意时刻数据的测试，接口稳定后可删除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataCacheTelemetryGet(
      tenantId?: string,
      absoluteExpirationRelativeToNow?: string,
      getTimeSpan?: string,
      now?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataCacheTelemetryGet(
          tenantId,
          absoluteExpirationRelativeToNow,
          getTimeSpan,
          now,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键字：清洗数据、数据查询  使用场景：通过时间范围、点位代码、清洗标签来获取清洗后数据。如果点位代码为空，则返回所有点位的清洗数据；如果清洗标签为空，则返回所有标签的清洗数据。数据将清洗的时间顺序排列。
     * @summary 清洗数据查询
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataGetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options?: any,
    ): AxiosPromise<Array<TsDataInputOutput>> {
      return localVarFp
        .apiDataGetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取缓存中的Opc配置信息，主要为了提高数据的查询效率，系统会在启动时把所有的配置信息加载到缓存中，后续会在opc心跳的接口用用到，频繁去查询opc配置
     * @summary [内部接口]获取reids中存储的opc相关表信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataGetOpcConfigDataPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .apiDataGetOpcConfigDataPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataMockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataMockOnlineSourceDatasGet(
          tenantId,
          onlineProcessed,
          beginTime,
          endTime,
          timeSpan,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改清洗数据-目前仅提供给清洗算法使用，升级后改为调用Save接口
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataModifyOnlineProcessedDatasPost(
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataModifyOnlineProcessedDatasPost(modifyOnlineProcessedDatasInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键字：数据清洗、  应用场景：保存清洗数据，由清洗算法调用。调用时，需要指定清洗的设备、清洗的点位(指标)、清洗的时间、清洗后的值、清洗的数据标签，清洗的时间格式为\'yyyy-MM-ddTHH:mm:sszzz\'。本接口中数据的Tag 为字符串格式，内部调用的数据同步接口仍为`/api/v1/iot/save-telemetry-data`， 而`/api/v1/iot/save-telemetry-data`接口已过时，后续会考虑废弃此接口或做版本升级。升级后，将不再支持字符串类型的Tag值，可以考虑改为数值类型（枚举）, 废弃后，考虑使用`/api/v3/iot/save-telemetry-data-batch` 来做数据同步。调用V3时，需要自行追加清洗指标标签、清洗之后的值的后缀，如原始指标为 Indicator_A，则清洗后的数据可保存为Indicator_A_CLEAN、清洗后的标签为 Indicator_A_TAG; 如果不做指标重命名，将覆盖指标Indicator_A的原始数据。对于调用V3接口保存清洗数据时，不强制使用\"_CLEAN\"和\"_TAG\"后缀，只需查询和录入是指标code保持一致即可。
     * @summary [内部接口]保存清洗数据到iot  注：此接口为升级后的保存清洗数据接口
     * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataOnlineProcessedDatasSavePost(
      saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataOnlineProcessedDatasSavePost(saveOnlineProcessedData, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键字：缓存、最新数据 从Redis缓存中获取最新时刻的数据，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放， redis上缓存的值的格式为{\"DeviceCode\":\"xxx\",\"Indicator\":\"xxx\",\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]从Redis中获取最新的实测数据
     * @param {RealTimeDataInput} [realTimeDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataRealTimeDataPost(
      realTimeDataInput?: RealTimeDataInput,
      options?: any,
    ): AxiosPromise<Array<LatestTimeSeries>> {
      return localVarFp
        .apiDataRealTimeDataPost(realTimeDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 向redis中缓存Opc配置，主要涉及3张表，OpcUaPubSubNotify、OpcUaPubSub 、OpcUaCommunication， 表的数据全量缓存。
     * @summary [内部接口]表名OpcUaPubSubNotify、OpcUaPubSub、OpcUaCommunication添加redis
     * @param {{ [key: string]: string; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataSetOpcConfigDataPost(
      requestBody?: { [key: string]: string },
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataSetOpcConfigDataPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {Array<SaveRealTimeData>} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataSetRealTimeDataBatchPost(
      saveRealTimeData?: Array<SaveRealTimeData>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataSetRealTimeDataBatchPost(saveRealTimeData, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
     * @summary [内部接口]保存实测数据
     * @param {SaveRealTimeData} [saveRealTimeData]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataSetRealTimeDataPost(
      saveRealTimeData?: SaveRealTimeData,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataSetRealTimeDataPost(saveRealTimeData, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改最新的Tag
     * @param {Array<UpdateLatestTagInputV1>} [updateLatestTagInputV1]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataUpdateLatestTagPost(
      updateLatestTagInputV1?: Array<UpdateLatestTagInputV1>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataUpdateLatestTagPost(updateLatestTagInputV1, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新清洗数据信息  注：升级后改为调用OnlineProcessedDatas/Save接口
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataUpdateOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataUpdateOnlineProcessedDatasPost(tsDataInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 此接口主要用于兼容已有的污水项目，接口参数结构和返回数据结构增加了DeviceCode，PointCode改为Indicator，待前端和清洗算法都改为调用v3接口后，此接口便可废弃
     * @summary 获取清洗数据
     * @param {GetOnlineTsDataInputV2} [getOnlineTsDataInputV2]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataV2GetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInputV2?: GetOnlineTsDataInputV2,
      options?: any,
    ): AxiosPromise<Array<SaveOnlineProcessedData>> {
      return localVarFp
        .apiDataV2GetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInputV2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 仿真在线数据
     * @param {string} [tenantId]
     * @param {boolean} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiDataV2MockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: boolean,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataV2MockOnlineSourceDatasGet(
          tenantId,
          onlineProcessed,
          beginTime,
          endTime,
          timeSpan,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键字：最新时刻、数据标签、所有指标  应用场景：更新设备的清洗数据标签，如果一个设备下有多个清洗点位，则在调用本接口进行更新时，会将所有点位的清洗标签统一更新为指定的值，更新时，只会更新后一个时刻的清洗标签值。
     * @summary 更新设备的数据清洗标签
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataV2UpdateLatestTagPost(
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataV2UpdateLatestTagPost(updateLatestTagInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键字：数据清洗、数据查询  应用场景：通过时间范围、清洗点位、指标来查询清洗后的数据。查询将根据指定的时间范围来查询IoT中的清洗数据，返回值的时间为字符串类型的数组，时间格式为标准的ISO格式时间串（\'yyyy-MM-ddTHH:mm:sszzz\'）,各个时刻的值按double类型数组返回，清洗的数据标签在Tag字段中返回，T、V、Tags 三个数据数组的长度将保持一致，三个数组下标相同的为一组数据。
     * @summary 查询清洗数据
     * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataV3GetOnlineProcessedDatasByConditionsPost(
      timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
      options?: any,
    ): AxiosPromise<Array<TsDataInputOutputV3>> {
      return localVarFp
        .apiDataV3GetOnlineProcessedDatasByConditionsPost(timeseriesBatchForV3Input, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
  /**
   * 注：此接口未在污水基础服务、污水领域服务、清洗算法使用，因此暂不做升级，若后续发现有使用，则可升级，否则可直接废弃
   * @summary 添加清洗数据信息 Add online processed data
   * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOnlineProcessedDatasPost(
    tsDataInputOutput?: Array<TsDataInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOnlineProcessedDatasPost(tsDataInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存清洗数据
   * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOnlineSourceDatasPost(
    saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOnlineSourceDatasPost(saveOnlineProcessedData, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加或更新清洗数据信息-目前仅提供给清洗算法使用，升级后改为调用Save接口
   * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOrUpdateOnlineProcessedDatasPost(
    addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOrUpdateOnlineProcessedDatasPost(addOrUpdateOnlineDatasInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 缓存清洗数据和源数据
   * @param {string} [tenantId]
   * @param {string} [absoluteExpirationRelativeToNow] 缓存的数据时间长度
   * @param {string} [getTimeSpan] 每次新增的待缓存的时间范围，比如5分钟一条的数据就设置05:00
   * @param {string} [now] 补充指定时间的缓存数据，主要用于开发时期可写入任意时刻数据的测试，接口稳定后可删除
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataCacheTelemetryGet(
    tenantId?: string,
    absoluteExpirationRelativeToNow?: string,
    getTimeSpan?: string,
    now?: string,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataCacheTelemetryGet(
        tenantId,
        absoluteExpirationRelativeToNow,
        getTimeSpan,
        now,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键字：清洗数据、数据查询  使用场景：通过时间范围、点位代码、清洗标签来获取清洗后数据。如果点位代码为空，则返回所有点位的清洗数据；如果清洗标签为空，则返回所有标签的清洗数据。数据将清洗的时间顺序排列。
   * @summary 清洗数据查询
   * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataGetOnlineProcessedDatasByConditionsPost(
    getOnlineTsDataInput?: GetOnlineTsDataInput,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataGetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取缓存中的Opc配置信息，主要为了提高数据的查询效率，系统会在启动时把所有的配置信息加载到缓存中，后续会在opc心跳的接口用用到，频繁去查询opc配置
   * @summary [内部接口]获取reids中存储的opc相关表信息
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataGetOpcConfigDataPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return DataApiFp(this.configuration)
      .apiDataGetOpcConfigDataPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仿真在线数据
   * @param {string} [tenantId]
   * @param {boolean} [onlineProcessed]
   * @param {string} [beginTime]
   * @param {string} [endTime]
   * @param {string} [timeSpan]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataMockOnlineSourceDatasGet(
    tenantId?: string,
    onlineProcessed?: boolean,
    beginTime?: string,
    endTime?: string,
    timeSpan?: string,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataMockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改清洗数据-目前仅提供给清洗算法使用，升级后改为调用Save接口
   * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataModifyOnlineProcessedDatasPost(
    modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataModifyOnlineProcessedDatasPost(modifyOnlineProcessedDatasInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键字：数据清洗、  应用场景：保存清洗数据，由清洗算法调用。调用时，需要指定清洗的设备、清洗的点位(指标)、清洗的时间、清洗后的值、清洗的数据标签，清洗的时间格式为\'yyyy-MM-ddTHH:mm:sszzz\'。本接口中数据的Tag 为字符串格式，内部调用的数据同步接口仍为`/api/v1/iot/save-telemetry-data`， 而`/api/v1/iot/save-telemetry-data`接口已过时，后续会考虑废弃此接口或做版本升级。升级后，将不再支持字符串类型的Tag值，可以考虑改为数值类型（枚举）, 废弃后，考虑使用`/api/v3/iot/save-telemetry-data-batch` 来做数据同步。调用V3时，需要自行追加清洗指标标签、清洗之后的值的后缀，如原始指标为 Indicator_A，则清洗后的数据可保存为Indicator_A_CLEAN、清洗后的标签为 Indicator_A_TAG; 如果不做指标重命名，将覆盖指标Indicator_A的原始数据。对于调用V3接口保存清洗数据时，不强制使用\"_CLEAN\"和\"_TAG\"后缀，只需查询和录入是指标code保持一致即可。
   * @summary [内部接口]保存清洗数据到iot  注：此接口为升级后的保存清洗数据接口
   * @param {Array<SaveOnlineProcessedData>} [saveOnlineProcessedData]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataOnlineProcessedDatasSavePost(
    saveOnlineProcessedData?: Array<SaveOnlineProcessedData>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataOnlineProcessedDatasSavePost(saveOnlineProcessedData, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键字：缓存、最新数据 从Redis缓存中获取最新时刻的数据，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放， redis上缓存的值的格式为{\"DeviceCode\":\"xxx\",\"Indicator\":\"xxx\",\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
   * @summary [内部接口]从Redis中获取最新的实测数据
   * @param {RealTimeDataInput} [realTimeDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataRealTimeDataPost(
    realTimeDataInput?: RealTimeDataInput,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataRealTimeDataPost(realTimeDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 向redis中缓存Opc配置，主要涉及3张表，OpcUaPubSubNotify、OpcUaPubSub 、OpcUaCommunication， 表的数据全量缓存。
   * @summary [内部接口]表名OpcUaPubSubNotify、OpcUaPubSub、OpcUaCommunication添加redis
   * @param {{ [key: string]: string; }} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataSetOpcConfigDataPost(
    requestBody?: { [key: string]: string },
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataSetOpcConfigDataPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
   * @summary [内部接口]保存实测数据
   * @param {Array<SaveRealTimeData>} [saveRealTimeData]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataSetRealTimeDataBatchPost(
    saveRealTimeData?: Array<SaveRealTimeData>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataSetRealTimeDataBatchPost(saveRealTimeData, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 保存最新时刻的数据到Redis缓存中，数据不写入数据库，主要为了提高数据的查询效率。其中，redis 上的键为 `TenantId:DeviceCode|Indicator`, 暂不考虑对外开放，  redis上缓存的值的格式为{\"T\":123,\"V\":\"xxx\"}, 其中T为unix时间戳，V为对应最新的数据
   * @summary [内部接口]保存实测数据
   * @param {SaveRealTimeData} [saveRealTimeData]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataSetRealTimeDataPost(
    saveRealTimeData?: SaveRealTimeData,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataSetRealTimeDataPost(saveRealTimeData, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改最新的Tag
   * @param {Array<UpdateLatestTagInputV1>} [updateLatestTagInputV1]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataUpdateLatestTagPost(
    updateLatestTagInputV1?: Array<UpdateLatestTagInputV1>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataUpdateLatestTagPost(updateLatestTagInputV1, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新清洗数据信息  注：升级后改为调用OnlineProcessedDatas/Save接口
   * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataUpdateOnlineProcessedDatasPost(
    tsDataInputOutput?: Array<TsDataInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataUpdateOnlineProcessedDatasPost(tsDataInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 此接口主要用于兼容已有的污水项目，接口参数结构和返回数据结构增加了DeviceCode，PointCode改为Indicator，待前端和清洗算法都改为调用v3接口后，此接口便可废弃
   * @summary 获取清洗数据
   * @param {GetOnlineTsDataInputV2} [getOnlineTsDataInputV2]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataV2GetOnlineProcessedDatasByConditionsPost(
    getOnlineTsDataInputV2?: GetOnlineTsDataInputV2,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataV2GetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInputV2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 仿真在线数据
   * @param {string} [tenantId]
   * @param {boolean} [onlineProcessed]
   * @param {string} [beginTime]
   * @param {string} [endTime]
   * @param {string} [timeSpan]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataV2MockOnlineSourceDatasGet(
    tenantId?: string,
    onlineProcessed?: boolean,
    beginTime?: string,
    endTime?: string,
    timeSpan?: string,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataV2MockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键字：最新时刻、数据标签、所有指标  应用场景：更新设备的清洗数据标签，如果一个设备下有多个清洗点位，则在调用本接口进行更新时，会将所有点位的清洗标签统一更新为指定的值，更新时，只会更新后一个时刻的清洗标签值。
   * @summary 更新设备的数据清洗标签
   * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataV2UpdateLatestTagPost(
    updateLatestTagInput?: Array<UpdateLatestTagInput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataV2UpdateLatestTagPost(updateLatestTagInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键字：数据清洗、数据查询  应用场景：通过时间范围、清洗点位、指标来查询清洗后的数据。查询将根据指定的时间范围来查询IoT中的清洗数据，返回值的时间为字符串类型的数组，时间格式为标准的ISO格式时间串（\'yyyy-MM-ddTHH:mm:sszzz\'）,各个时刻的值按double类型数组返回，清洗的数据标签在Tag字段中返回，T、V、Tags 三个数据数组的长度将保持一致，三个数组下标相同的为一组数据。
   * @summary 查询清洗数据
   * @param {Array<TimeseriesBatchForV3Input>} [timeseriesBatchForV3Input]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataV3GetOnlineProcessedDatasByConditionsPost(
    timeseriesBatchForV3Input?: Array<TimeseriesBatchForV3Input>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataV3GetOnlineProcessedDatasByConditionsPost(timeseriesBatchForV3Input, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
