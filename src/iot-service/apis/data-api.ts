/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddOrUpdateOnlineDatasInput } from '../models'
// @ts-ignore
import { GetOnlineTsDataInput } from '../models'
// @ts-ignore
import { ModifyOnlineProcessedDatasInput } from '../models'
// @ts-ignore
import { QueryByTime } from '../models'
// @ts-ignore
import { TsDataInputOutput } from '../models'
// @ts-ignore
import { UpdateLatestTagInput } from '../models'
/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOnlineProcessedDatasPost: async (
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        tsDataInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/Data/AddOnlineSourceDatas
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOnlineSourceDatasPost: async (
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOnlineSourceDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        tsDataInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加或更新清洗数据信息 Add or update processed data
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOrUpdateOnlineProcessedDatasPost: async (
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/AddOrUpdateOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOrUpdateOnlineDatasInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 基于时间段删除清洗数据 Delete online processed data by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataDeleteOnlineProcessedDatasPost: async (
      queryByTime?: QueryByTime,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/DeleteOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryByTime,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过时间、点位代码、标签获取清洗后数据，如果Codes为空，则返回所有在线点位的清洗数据，如果Tag为空，则不过滤标签 Get online processed data by time or point codes. If Codes is null,then data of all the online points will be returned. If Tag is null, then tag will not be filtered.
     * @summary 根据条件获取清洗后数据信息  Get online processed data by condition
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataGetOnlineProcessedDatasByConditionsPost: async (
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/GetOnlineProcessedDatasByConditions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getOnlineTsDataInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/Data/MockOnlineSourceDatas
     * @param {string} [tenantId]
     * @param {string} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataMockOnlineSourceDatasGet: async (
      tenantId?: string,
      onlineProcessed?: string,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/MockOnlineSourceDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (onlineProcessed !== undefined) {
        localVarQueryParameter['onlineProcessed'] = onlineProcessed
      }

      if (beginTime !== undefined) {
        localVarQueryParameter['beginTime'] = beginTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['endTime'] = endTime
      }

      if (timeSpan !== undefined) {
        localVarQueryParameter['timeSpan'] = timeSpan
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/Data/ModifyOnlineProcessedDatas
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataModifyOnlineProcessedDatasPost: async (
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/ModifyOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modifyOnlineProcessedDatasInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改最新的Tag Update latest processed data tag
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataUpdateLatestTagPost: async (
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/UpdateLatestTag`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLatestTagInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新清洗数据信息 Update online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataUpdateOnlineProcessedDatasPost: async (
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Data/UpdateOnlineProcessedDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        tsDataInputOutput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataAddOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataAddOnlineProcessedDatasPost(
        tsDataInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/Data/AddOnlineSourceDatas
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataAddOnlineSourceDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataAddOnlineSourceDatasPost(
        tsDataInputOutput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加或更新清洗数据信息 Add or update processed data
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataAddOrUpdateOnlineProcessedDatasPost(
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataAddOrUpdateOnlineProcessedDatasPost(
          addOrUpdateOnlineDatasInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 基于时间段删除清洗数据 Delete online processed data by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataDeleteOnlineProcessedDatasPost(
      queryByTime?: QueryByTime,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataDeleteOnlineProcessedDatasPost(queryByTime, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过时间、点位代码、标签获取清洗后数据，如果Codes为空，则返回所有在线点位的清洗数据，如果Tag为空，则不过滤标签 Get online processed data by time or point codes. If Codes is null,then data of all the online points will be returned. If Tag is null, then tag will not be filtered.
     * @summary 根据条件获取清洗后数据信息  Get online processed data by condition
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataGetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TsDataInputOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataGetOnlineProcessedDatasByConditionsPost(
          getOnlineTsDataInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/Data/MockOnlineSourceDatas
     * @param {string} [tenantId]
     * @param {string} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataMockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: string,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataMockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/Data/ModifyOnlineProcessedDatas
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataModifyOnlineProcessedDatasPost(
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataModifyOnlineProcessedDatasPost(
          modifyOnlineProcessedDatasInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改最新的Tag Update latest processed data tag
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataUpdateLatestTagPost(
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataUpdateLatestTagPost(
        updateLatestTagInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新清洗数据信息 Update online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiDataUpdateOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiDataUpdateOnlineProcessedDatasPost(
          tsDataInputOutput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataApiFp(configuration)
  return {
    /**
     *
     * @summary 添加清洗数据信息 Add online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOnlineProcessedDatasPost(tsDataInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/Data/AddOnlineSourceDatas
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOnlineSourceDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOnlineSourceDatasPost(tsDataInputOutput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加或更新清洗数据信息 Add or update processed data
     * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataAddOrUpdateOnlineProcessedDatasPost(
      addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataAddOrUpdateOnlineProcessedDatasPost(addOrUpdateOnlineDatasInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 基于时间段删除清洗数据 Delete online processed data by time
     * @param {QueryByTime} [queryByTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataDeleteOnlineProcessedDatasPost(
      queryByTime?: QueryByTime,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataDeleteOnlineProcessedDatasPost(queryByTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过时间、点位代码、标签获取清洗后数据，如果Codes为空，则返回所有在线点位的清洗数据，如果Tag为空，则不过滤标签 Get online processed data by time or point codes. If Codes is null,then data of all the online points will be returned. If Tag is null, then tag will not be filtered.
     * @summary 根据条件获取清洗后数据信息  Get online processed data by condition
     * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataGetOnlineProcessedDatasByConditionsPost(
      getOnlineTsDataInput?: GetOnlineTsDataInput,
      options?: any,
    ): AxiosPromise<Array<TsDataInputOutput>> {
      return localVarFp
        .apiDataGetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/Data/MockOnlineSourceDatas
     * @param {string} [tenantId]
     * @param {string} [onlineProcessed]
     * @param {string} [beginTime]
     * @param {string} [endTime]
     * @param {string} [timeSpan]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataMockOnlineSourceDatasGet(
      tenantId?: string,
      onlineProcessed?: string,
      beginTime?: string,
      endTime?: string,
      timeSpan?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataMockOnlineSourceDatasGet(
          tenantId,
          onlineProcessed,
          beginTime,
          endTime,
          timeSpan,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/Data/ModifyOnlineProcessedDatas
     * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataModifyOnlineProcessedDatasPost(
      modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataModifyOnlineProcessedDatasPost(modifyOnlineProcessedDatasInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改最新的Tag Update latest processed data tag
     * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataUpdateLatestTagPost(
      updateLatestTagInput?: Array<UpdateLatestTagInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataUpdateLatestTagPost(updateLatestTagInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新清洗数据信息 Update online processed data
     * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDataUpdateOnlineProcessedDatasPost(
      tsDataInputOutput?: Array<TsDataInputOutput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiDataUpdateOnlineProcessedDatasPost(tsDataInputOutput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
  /**
   *
   * @summary 添加清洗数据信息 Add online processed data
   * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOnlineProcessedDatasPost(
    tsDataInputOutput?: Array<TsDataInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOnlineProcessedDatasPost(tsDataInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/Data/AddOnlineSourceDatas
   * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOnlineSourceDatasPost(
    tsDataInputOutput?: Array<TsDataInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOnlineSourceDatasPost(tsDataInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加或更新清洗数据信息 Add or update processed data
   * @param {AddOrUpdateOnlineDatasInput} [addOrUpdateOnlineDatasInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataAddOrUpdateOnlineProcessedDatasPost(
    addOrUpdateOnlineDatasInput?: AddOrUpdateOnlineDatasInput,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataAddOrUpdateOnlineProcessedDatasPost(addOrUpdateOnlineDatasInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 基于时间段删除清洗数据 Delete online processed data by time
   * @param {QueryByTime} [queryByTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataDeleteOnlineProcessedDatasPost(
    queryByTime?: QueryByTime,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataDeleteOnlineProcessedDatasPost(queryByTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过时间、点位代码、标签获取清洗后数据，如果Codes为空，则返回所有在线点位的清洗数据，如果Tag为空，则不过滤标签 Get online processed data by time or point codes. If Codes is null,then data of all the online points will be returned. If Tag is null, then tag will not be filtered.
   * @summary 根据条件获取清洗后数据信息  Get online processed data by condition
   * @param {GetOnlineTsDataInput} [getOnlineTsDataInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataGetOnlineProcessedDatasByConditionsPost(
    getOnlineTsDataInput?: GetOnlineTsDataInput,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataGetOnlineProcessedDatasByConditionsPost(getOnlineTsDataInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/Data/MockOnlineSourceDatas
   * @param {string} [tenantId]
   * @param {string} [onlineProcessed]
   * @param {string} [beginTime]
   * @param {string} [endTime]
   * @param {string} [timeSpan]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataMockOnlineSourceDatasGet(
    tenantId?: string,
    onlineProcessed?: string,
    beginTime?: string,
    endTime?: string,
    timeSpan?: string,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataMockOnlineSourceDatasGet(
        tenantId,
        onlineProcessed,
        beginTime,
        endTime,
        timeSpan,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/Data/ModifyOnlineProcessedDatas
   * @param {Array<ModifyOnlineProcessedDatasInput>} [modifyOnlineProcessedDatasInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataModifyOnlineProcessedDatasPost(
    modifyOnlineProcessedDatasInput?: Array<ModifyOnlineProcessedDatasInput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataModifyOnlineProcessedDatasPost(modifyOnlineProcessedDatasInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改最新的Tag Update latest processed data tag
   * @param {Array<UpdateLatestTagInput>} [updateLatestTagInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataUpdateLatestTagPost(
    updateLatestTagInput?: Array<UpdateLatestTagInput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataUpdateLatestTagPost(updateLatestTagInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新清洗数据信息 Update online processed data
   * @param {Array<TsDataInputOutput>} [tsDataInputOutput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataApi
   */
  public apiDataUpdateOnlineProcessedDatasPost(
    tsDataInputOutput?: Array<TsDataInputOutput>,
    options?: AxiosRequestConfig,
  ) {
    return DataApiFp(this.configuration)
      .apiDataUpdateOnlineProcessedDatasPost(tsDataInputOutput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
