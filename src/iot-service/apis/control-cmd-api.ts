/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base' // @ts-ignore
import { AddControlCmdConfigInput } from '../models'
// @ts-ignore
import { AddControlIssueGroupConfigInput } from '../models'
// @ts-ignore
import { ControlCmdBackFeedLogDto } from '../models'
// @ts-ignore
import { ControlCmdConfigDto } from '../models'
// @ts-ignore
import { ControlCmdConfigDtoPage } from '../models'
// @ts-ignore
import { ControlCmdDeliveryLogDto } from '../models'
// @ts-ignore
import { ControlDispatchInput } from '../models'
// @ts-ignore
import { ControlDispatchOutput } from '../models'
// @ts-ignore
import { ControlIssueGroupConfigDto } from '../models'
// @ts-ignore
import { ControlIssueInput } from '../models'
// @ts-ignore
import { DeleteControlCmdConfigsInput } from '../models'
// @ts-ignore
import { DeleteControlIssueGroupConfigInput } from '../models'
// @ts-ignore
import { ProduceNewCmdInput } from '../models'
// @ts-ignore
import { UpdateControlCmdConfigInput } from '../models'
// @ts-ignore
import { UpdateControlIssueGroupConfigInput } from '../models'
/**
 * ControlCmdApi - axios parameter creator
 * @export
 */
export const ControlCmdApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取控制指令后馈记录
     * @param {string} [deliveryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdBackFeedGet: async (
      deliveryId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/back-feed`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (deliveryId !== undefined) {
        localVarQueryParameter['deliveryId'] = deliveryId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增控制指令配置【内部使用】
     * @param {AddControlCmdConfigInput} [addControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigAddPost: async (
      addControlCmdConfigInput?: AddControlCmdConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/config/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addControlCmdConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除控制指令配置
     * @param {DeleteControlCmdConfigsInput} [deleteControlCmdConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigDeletePost: async (
      deleteControlCmdConfigsInput?: DeleteControlCmdConfigsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/config/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteControlCmdConfigsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新控制指令配置
     * @param {UpdateControlCmdConfigInput} [updateControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigUpdatePost: async (
      updateControlCmdConfigInput?: UpdateControlCmdConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/config/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlCmdConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取控制指令配置列表【内部使用】
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigsGet: async (
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (pageIndex !== undefined) {
        localVarQueryParameter['PageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['PageSize'] = pageSize
      }

      if (keyWords !== undefined) {
        localVarQueryParameter['KeyWords'] = keyWords
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：控制 分发  使用场景：前端或者任何提供设备控制建议值的程序，在生成建议值后，调用该接口进入控制下发调度流程，该流程将根据IsIssueNow参数选择是否立刻执行下发：  true：忽略控制组和控制单元，直接下发  false：进一步判断指标下发状态，如果指标能够下发且是自动下发模式，则进入自动下发流程（根据控制组和控制单元进行协同下发），否则，不做任何操作。
     * @summary 控制数据分发
     * @param {ControlDispatchInput} [controlDispatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdControlDispatchPost: async (
      controlDispatchInput?: ControlDispatchInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/control-dispatch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        controlDispatchInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取控制指令下达记录【内部使用】
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGet: async (
      configId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/delivery`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (configId !== undefined) {
        localVarQueryParameter['configId'] = configId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据控制下发的配置id获取指标所有的下发状态记录
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGetByConfigIdGet: async (
      configId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/delivery/get-by-configId`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (configId !== undefined) {
        localVarQueryParameter['configId'] = configId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据控制下发id获取下发状态记录
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGetByIdGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/delivery/get-by-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增下发控制组配置
     * @param {AddControlIssueGroupConfigInput} [addControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupAddPost: async (
      addControlIssueGroupConfigInput?: AddControlIssueGroupConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/group/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addControlIssueGroupConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有下发控制组配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupConfigsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/group/configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除下发控制组配置
     * @param {DeleteControlIssueGroupConfigInput} [deleteControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupDeletePost: async (
      deleteControlIssueGroupConfigInput?: DeleteControlIssueGroupConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/group/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteControlIssueGroupConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新下发控制组配置
     * @param {UpdateControlIssueGroupConfigInput} [updateControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupUpdatePost: async (
      updateControlIssueGroupConfigInput?: UpdateControlIssueGroupConfigInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/group/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlIssueGroupConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ControlIssueInput} [controlIssueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdIssuePost: async (
      controlIssueInput?: ControlIssueInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/issue`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        controlIssueInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ProduceNewCmdInput} [produceNewCmdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdNewCmdPost: async (
      produceNewCmdInput?: ProduceNewCmdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/control-cmd/new-cmd`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        produceNewCmdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ControlCmdApi - functional programming interface
 * @export
 */
export const ControlCmdApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ControlCmdApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取控制指令后馈记录
     * @param {string} [deliveryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdBackFeedGet(
      deliveryId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlCmdBackFeedLogDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdBackFeedGet(
        deliveryId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增控制指令配置【内部使用】
     * @param {AddControlCmdConfigInput} [addControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdConfigAddPost(
      addControlCmdConfigInput?: AddControlCmdConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlCmdConfigDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdConfigAddPost(
        addControlCmdConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除控制指令配置
     * @param {DeleteControlCmdConfigsInput} [deleteControlCmdConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdConfigDeletePost(
      deleteControlCmdConfigsInput?: DeleteControlCmdConfigsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdConfigDeletePost(
        deleteControlCmdConfigsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新控制指令配置
     * @param {UpdateControlCmdConfigInput} [updateControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdConfigUpdatePost(
      updateControlCmdConfigInput?: UpdateControlCmdConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlCmdConfigDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdConfigUpdatePost(
        updateControlCmdConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取控制指令配置列表【内部使用】
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdConfigsGet(
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlCmdConfigDtoPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdConfigsGet(
        pageIndex,
        pageSize,
        keyWords,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：控制 分发  使用场景：前端或者任何提供设备控制建议值的程序，在生成建议值后，调用该接口进入控制下发调度流程，该流程将根据IsIssueNow参数选择是否立刻执行下发：  true：忽略控制组和控制单元，直接下发  false：进一步判断指标下发状态，如果指标能够下发且是自动下发模式，则进入自动下发流程（根据控制组和控制单元进行协同下发），否则，不做任何操作。
     * @summary 控制数据分发
     * @param {ControlDispatchInput} [controlDispatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdControlDispatchPost(
      controlDispatchInput?: ControlDispatchInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlDispatchOutput>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotControlCmdControlDispatchPost(
          controlDispatchInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取控制指令下达记录【内部使用】
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdDeliveryGet(
      configId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlCmdDeliveryLogDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdDeliveryGet(
        configId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据控制下发的配置id获取指标所有的下发状态记录
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdDeliveryGetByConfigIdGet(
      configId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlCmdDeliveryLogDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotControlCmdDeliveryGetByConfigIdGet(
          configId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据控制下发id获取下发状态记录
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdDeliveryGetByIdGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlCmdDeliveryLogDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotControlCmdDeliveryGetByIdGet(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增下发控制组配置
     * @param {AddControlIssueGroupConfigInput} [addControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdGroupAddPost(
      addControlIssueGroupConfigInput?: AddControlIssueGroupConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlIssueGroupConfigDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdGroupAddPost(
        addControlIssueGroupConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有下发控制组配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdGroupConfigsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlIssueGroupConfigDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotControlCmdGroupConfigsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除下发控制组配置
     * @param {DeleteControlIssueGroupConfigInput} [deleteControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdGroupDeletePost(
      deleteControlIssueGroupConfigInput?: DeleteControlIssueGroupConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdGroupDeletePost(
        deleteControlIssueGroupConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新下发控制组配置
     * @param {UpdateControlIssueGroupConfigInput} [updateControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdGroupUpdatePost(
      updateControlIssueGroupConfigInput?: UpdateControlIssueGroupConfigInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlIssueGroupConfigDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdGroupUpdatePost(
        updateControlIssueGroupConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ControlIssueInput} [controlIssueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdIssuePost(
      controlIssueInput?: ControlIssueInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdIssuePost(
        controlIssueInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ProduceNewCmdInput} [produceNewCmdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotControlCmdNewCmdPost(
      produceNewCmdInput?: ProduceNewCmdInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotControlCmdNewCmdPost(
        produceNewCmdInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ControlCmdApi - factory interface
 * @export
 */
export const ControlCmdApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ControlCmdApiFp(configuration)
  return {
    /**
     *
     * @summary 获取控制指令后馈记录
     * @param {string} [deliveryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdBackFeedGet(
      deliveryId?: string,
      options?: any,
    ): AxiosPromise<Array<ControlCmdBackFeedLogDto>> {
      return localVarFp
        .apiV1IotControlCmdBackFeedGet(deliveryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增控制指令配置【内部使用】
     * @param {AddControlCmdConfigInput} [addControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigAddPost(
      addControlCmdConfigInput?: AddControlCmdConfigInput,
      options?: any,
    ): AxiosPromise<ControlCmdConfigDto> {
      return localVarFp
        .apiV1IotControlCmdConfigAddPost(addControlCmdConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除控制指令配置
     * @param {DeleteControlCmdConfigsInput} [deleteControlCmdConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigDeletePost(
      deleteControlCmdConfigsInput?: DeleteControlCmdConfigsInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotControlCmdConfigDeletePost(deleteControlCmdConfigsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新控制指令配置
     * @param {UpdateControlCmdConfigInput} [updateControlCmdConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigUpdatePost(
      updateControlCmdConfigInput?: UpdateControlCmdConfigInput,
      options?: any,
    ): AxiosPromise<ControlCmdConfigDto> {
      return localVarFp
        .apiV1IotControlCmdConfigUpdatePost(updateControlCmdConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取控制指令配置列表【内部使用】
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdConfigsGet(
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: any,
    ): AxiosPromise<ControlCmdConfigDtoPage> {
      return localVarFp
        .apiV1IotControlCmdConfigsGet(pageIndex, pageSize, keyWords, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：控制 分发  使用场景：前端或者任何提供设备控制建议值的程序，在生成建议值后，调用该接口进入控制下发调度流程，该流程将根据IsIssueNow参数选择是否立刻执行下发：  true：忽略控制组和控制单元，直接下发  false：进一步判断指标下发状态，如果指标能够下发且是自动下发模式，则进入自动下发流程（根据控制组和控制单元进行协同下发），否则，不做任何操作。
     * @summary 控制数据分发
     * @param {ControlDispatchInput} [controlDispatchInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdControlDispatchPost(
      controlDispatchInput?: ControlDispatchInput,
      options?: any,
    ): AxiosPromise<ControlDispatchOutput> {
      return localVarFp
        .apiV1IotControlCmdControlDispatchPost(controlDispatchInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取控制指令下达记录【内部使用】
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGet(
      configId?: string,
      options?: any,
    ): AxiosPromise<Array<ControlCmdDeliveryLogDto>> {
      return localVarFp
        .apiV1IotControlCmdDeliveryGet(configId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据控制下发的配置id获取指标所有的下发状态记录
     * @param {string} [configId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGetByConfigIdGet(
      configId?: string,
      options?: any,
    ): AxiosPromise<Array<ControlCmdDeliveryLogDto>> {
      return localVarFp
        .apiV1IotControlCmdDeliveryGetByConfigIdGet(configId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据控制下发id获取下发状态记录
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdDeliveryGetByIdGet(
      id?: string,
      options?: any,
    ): AxiosPromise<ControlCmdDeliveryLogDto> {
      return localVarFp
        .apiV1IotControlCmdDeliveryGetByIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增下发控制组配置
     * @param {AddControlIssueGroupConfigInput} [addControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupAddPost(
      addControlIssueGroupConfigInput?: AddControlIssueGroupConfigInput,
      options?: any,
    ): AxiosPromise<ControlIssueGroupConfigDto> {
      return localVarFp
        .apiV1IotControlCmdGroupAddPost(addControlIssueGroupConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有下发控制组配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupConfigsGet(
      options?: any,
    ): AxiosPromise<Array<ControlIssueGroupConfigDto>> {
      return localVarFp
        .apiV1IotControlCmdGroupConfigsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除下发控制组配置
     * @param {DeleteControlIssueGroupConfigInput} [deleteControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupDeletePost(
      deleteControlIssueGroupConfigInput?: DeleteControlIssueGroupConfigInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotControlCmdGroupDeletePost(deleteControlIssueGroupConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新下发控制组配置
     * @param {UpdateControlIssueGroupConfigInput} [updateControlIssueGroupConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdGroupUpdatePost(
      updateControlIssueGroupConfigInput?: UpdateControlIssueGroupConfigInput,
      options?: any,
    ): AxiosPromise<ControlIssueGroupConfigDto> {
      return localVarFp
        .apiV1IotControlCmdGroupUpdatePost(updateControlIssueGroupConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ControlIssueInput} [controlIssueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdIssuePost(
      controlIssueInput?: ControlIssueInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotControlCmdIssuePost(controlIssueInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 下达控制指令【内部使用】
     * @param {ProduceNewCmdInput} [produceNewCmdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotControlCmdNewCmdPost(
      produceNewCmdInput?: ProduceNewCmdInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotControlCmdNewCmdPost(produceNewCmdInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ControlCmdApi - object-oriented interface
 * @export
 * @class ControlCmdApi
 * @extends {BaseAPI}
 */
export class ControlCmdApi extends BaseAPI {
  /**
   *
   * @summary 获取控制指令后馈记录
   * @param {string} [deliveryId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdBackFeedGet(deliveryId?: string, options?: AxiosRequestConfig) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdBackFeedGet(deliveryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增控制指令配置【内部使用】
   * @param {AddControlCmdConfigInput} [addControlCmdConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdConfigAddPost(
    addControlCmdConfigInput?: AddControlCmdConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdConfigAddPost(addControlCmdConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除控制指令配置
   * @param {DeleteControlCmdConfigsInput} [deleteControlCmdConfigsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdConfigDeletePost(
    deleteControlCmdConfigsInput?: DeleteControlCmdConfigsInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdConfigDeletePost(deleteControlCmdConfigsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新控制指令配置
   * @param {UpdateControlCmdConfigInput} [updateControlCmdConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdConfigUpdatePost(
    updateControlCmdConfigInput?: UpdateControlCmdConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdConfigUpdatePost(updateControlCmdConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取控制指令配置列表【内部使用】
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {string} [keyWords]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdConfigsGet(
    pageIndex?: number,
    pageSize?: number,
    keyWords?: string,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdConfigsGet(pageIndex, pageSize, keyWords, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：控制 分发  使用场景：前端或者任何提供设备控制建议值的程序，在生成建议值后，调用该接口进入控制下发调度流程，该流程将根据IsIssueNow参数选择是否立刻执行下发：  true：忽略控制组和控制单元，直接下发  false：进一步判断指标下发状态，如果指标能够下发且是自动下发模式，则进入自动下发流程（根据控制组和控制单元进行协同下发），否则，不做任何操作。
   * @summary 控制数据分发
   * @param {ControlDispatchInput} [controlDispatchInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdControlDispatchPost(
    controlDispatchInput?: ControlDispatchInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdControlDispatchPost(controlDispatchInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取控制指令下达记录【内部使用】
   * @param {string} [configId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdDeliveryGet(configId?: string, options?: AxiosRequestConfig) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdDeliveryGet(configId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据控制下发的配置id获取指标所有的下发状态记录
   * @param {string} [configId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdDeliveryGetByConfigIdGet(
    configId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdDeliveryGetByConfigIdGet(configId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据控制下发id获取下发状态记录
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdDeliveryGetByIdGet(id?: string, options?: AxiosRequestConfig) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdDeliveryGetByIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增下发控制组配置
   * @param {AddControlIssueGroupConfigInput} [addControlIssueGroupConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdGroupAddPost(
    addControlIssueGroupConfigInput?: AddControlIssueGroupConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdGroupAddPost(addControlIssueGroupConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有下发控制组配置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdGroupConfigsGet(options?: AxiosRequestConfig) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdGroupConfigsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除下发控制组配置
   * @param {DeleteControlIssueGroupConfigInput} [deleteControlIssueGroupConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdGroupDeletePost(
    deleteControlIssueGroupConfigInput?: DeleteControlIssueGroupConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdGroupDeletePost(deleteControlIssueGroupConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新下发控制组配置
   * @param {UpdateControlIssueGroupConfigInput} [updateControlIssueGroupConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdGroupUpdatePost(
    updateControlIssueGroupConfigInput?: UpdateControlIssueGroupConfigInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdGroupUpdatePost(updateControlIssueGroupConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 下达控制指令【内部使用】
   * @param {ControlIssueInput} [controlIssueInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdIssuePost(
    controlIssueInput?: ControlIssueInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdIssuePost(controlIssueInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 下达控制指令【内部使用】
   * @param {ProduceNewCmdInput} [produceNewCmdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ControlCmdApi
   */
  public apiV1IotControlCmdNewCmdPost(
    produceNewCmdInput?: ProduceNewCmdInput,
    options?: AxiosRequestConfig,
  ) {
    return ControlCmdApiFp(this.configuration)
      .apiV1IotControlCmdNewCmdPost(produceNewCmdInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
