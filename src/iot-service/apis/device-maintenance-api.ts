/* eslint-disable */
/**
 * iot-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDeviceMaintenanceInput } from '../models'
// @ts-ignore
import { DeviceMaintenanceOutput } from '../models'
// @ts-ignore
import { QueryMaintenanceInput } from '../models'
// @ts-ignore
import { UpdateDeviceMaintenanceInput } from '../models'
/**
 * DeviceMaintenanceApi - axios parameter creator
 * @export
 */
export const DeviceMaintenanceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 增加设备维护记录
     * @param {Array<AddDeviceMaintenanceInput>} [addDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceAddPost: async (
      addDeviceMaintenanceInput?: Array<AddDeviceMaintenanceInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceMaintenanceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据设备ID或者资产ID，删除其对应的所有维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceDeleteByEntitiesPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/delete-by-entities`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据维护记录ID删除设备维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询一批设备/资产的指定时间范围内的维保信息（如果传的时间为空则查询所有历史的）
     * @param {QueryMaintenanceInput} [queryMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceGetByTimePost: async (
      queryMaintenanceInput?: QueryMaintenanceInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/get-by-time`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMaintenanceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询一批设备/资产的最新的维保信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceGetLatestPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/get-latest`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改设备维护信息
     * @param {Array<UpdateDeviceMaintenanceInput>} [updateDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceUpdatePost: async (
      updateDeviceMaintenanceInput?: Array<UpdateDeviceMaintenanceInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/maintenance/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDeviceMaintenanceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DeviceMaintenanceApi - functional programming interface
 * @export
 */
export const DeviceMaintenanceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeviceMaintenanceApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 增加设备维护记录
     * @param {Array<AddDeviceMaintenanceInput>} [addDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceAddPost(
      addDeviceMaintenanceInput?: Array<AddDeviceMaintenanceInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMaintenanceAddPost(
        addDeviceMaintenanceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据设备ID或者资产ID，删除其对应的所有维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceDeleteByEntitiesPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotMaintenanceDeleteByEntitiesPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据维护记录ID删除设备维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMaintenanceDeletePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询一批设备/资产的指定时间范围内的维保信息（如果传的时间为空则查询所有历史的）
     * @param {QueryMaintenanceInput} [queryMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceGetByTimePost(
      queryMaintenanceInput?: QueryMaintenanceInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceMaintenanceOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMaintenanceGetByTimePost(
        queryMaintenanceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询一批设备/资产的最新的维保信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceGetLatestPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceMaintenanceOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMaintenanceGetLatestPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改设备维护信息
     * @param {Array<UpdateDeviceMaintenanceInput>} [updateDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotMaintenanceUpdatePost(
      updateDeviceMaintenanceInput?: Array<UpdateDeviceMaintenanceInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotMaintenanceUpdatePost(
        updateDeviceMaintenanceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DeviceMaintenanceApi - factory interface
 * @export
 */
export const DeviceMaintenanceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DeviceMaintenanceApiFp(configuration)
  return {
    /**
     *
     * @summary 增加设备维护记录
     * @param {Array<AddDeviceMaintenanceInput>} [addDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceAddPost(
      addDeviceMaintenanceInput?: Array<AddDeviceMaintenanceInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotMaintenanceAddPost(addDeviceMaintenanceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据设备ID或者资产ID，删除其对应的所有维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceDeleteByEntitiesPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotMaintenanceDeleteByEntitiesPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据维护记录ID删除设备维护记录
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotMaintenanceDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询一批设备/资产的指定时间范围内的维保信息（如果传的时间为空则查询所有历史的）
     * @param {QueryMaintenanceInput} [queryMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceGetByTimePost(
      queryMaintenanceInput?: QueryMaintenanceInput,
      options?: any,
    ): AxiosPromise<Array<DeviceMaintenanceOutput>> {
      return localVarFp
        .apiV1IotMaintenanceGetByTimePost(queryMaintenanceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询一批设备/资产的最新的维保信息
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceGetLatestPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<DeviceMaintenanceOutput>> {
      return localVarFp
        .apiV1IotMaintenanceGetLatestPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改设备维护信息
     * @param {Array<UpdateDeviceMaintenanceInput>} [updateDeviceMaintenanceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotMaintenanceUpdatePost(
      updateDeviceMaintenanceInput?: Array<UpdateDeviceMaintenanceInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotMaintenanceUpdatePost(updateDeviceMaintenanceInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DeviceMaintenanceApi - object-oriented interface
 * @export
 * @class DeviceMaintenanceApi
 * @extends {BaseAPI}
 */
export class DeviceMaintenanceApi extends BaseAPI {
  /**
   *
   * @summary 增加设备维护记录
   * @param {Array<AddDeviceMaintenanceInput>} [addDeviceMaintenanceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceAddPost(
    addDeviceMaintenanceInput?: Array<AddDeviceMaintenanceInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceAddPost(addDeviceMaintenanceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据设备ID或者资产ID，删除其对应的所有维护记录
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceDeleteByEntitiesPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceDeleteByEntitiesPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据维护记录ID删除设备维护记录
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceDeletePost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询一批设备/资产的指定时间范围内的维保信息（如果传的时间为空则查询所有历史的）
   * @param {QueryMaintenanceInput} [queryMaintenanceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceGetByTimePost(
    queryMaintenanceInput?: QueryMaintenanceInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceGetByTimePost(queryMaintenanceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询一批设备/资产的最新的维保信息
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceGetLatestPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceGetLatestPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改设备维护信息
   * @param {Array<UpdateDeviceMaintenanceInput>} [updateDeviceMaintenanceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceMaintenanceApi
   */
  public apiV1IotMaintenanceUpdatePost(
    updateDeviceMaintenanceInput?: Array<UpdateDeviceMaintenanceInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceMaintenanceApiFp(this.configuration)
      .apiV1IotMaintenanceUpdatePost(updateDeviceMaintenanceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
