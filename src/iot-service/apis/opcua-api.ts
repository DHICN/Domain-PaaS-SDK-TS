/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddOpcUaComInput } from '../models'
// @ts-ignore
import { AddOpcUaPubSubInput } from '../models'
// @ts-ignore
import { InitOpcUaConfigInput } from '../models'
// @ts-ignore
import { OpcUaComPara } from '../models'
// @ts-ignore
import { OpcUaPubSubPara } from '../models'
// @ts-ignore
import { QueryOpcUaComInput } from '../models'
// @ts-ignore
import { QueryOpcUaConfigOutput } from '../models'
// @ts-ignore
import { QueryOpcUaPubSubInput } from '../models'
// @ts-ignore
import { ReadNodeInput } from '../models'
// @ts-ignore
import { WriteNodeInput } from '../models'
/**
 * OpcuaApi - axios parameter creator
 * @export
 */
export const OpcuaApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddCommunicationPost: async (
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubPost: async (
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaPubSubInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeleteCommunicationPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePubSubPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitPost: async (
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/init`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initOpcUaConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryCommunicationPost: async (
      queryOpcUaComInput?: QueryOpcUaComInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryOpcUaServersPost: async (
      opcFlag?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-opc-ua-servers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (opcFlag !== undefined) {
        localVarQueryParameter['OpcFlag'] = opcFlag
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryPubSubPost: async (
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOpcUaPubSubInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaReadNodePost: async (
      readNodeInput?: ReadNodeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/read-node`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        readNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataPost: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/sync-telemetry-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdateCommunicationPost: async (
      opcUaComPara?: Array<OpcUaComPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/update-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        opcUaComPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePubSubPost: async (
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/update-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        opcUaPubSubPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodeForBatchPost: async (
      writeNodeInput?: Array<WriteNodeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/write-node-for-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        writeNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodePost: async (
      writeNodeInput?: WriteNodeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/write-node`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        writeNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OpcuaApi - functional programming interface
 * @export
 */
export const OpcuaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OpcuaApiAxiosParamCreator(configuration)
  return {
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddCommunicationPost(
        addOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddPubSubPost(
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddPubSubPost(
        addOpcUaPubSubInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeleteCommunicationPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeleteCommunicationPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeletePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeletePubSubPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeletePubSubPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaInitPost(
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaInitPost(
        initOpcUaConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryCommunicationPost(
      queryOpcUaComInput?: QueryOpcUaComInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpcUaComPara>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryCommunicationPost(
        queryOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryOpcUaServersPost(
      opcFlag?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryOpcUaConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryOpcUaServersPost(
        opcFlag,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryPubSubPost(
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpcUaPubSubPara>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryPubSubPost(
        queryOpcUaPubSubInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaReadNodePost(
      readNodeInput?: ReadNodeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaReadNodePost(
        readNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaSyncTelemetryDataPost(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaSyncTelemetryDataPost(
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaUpdateCommunicationPost(
      opcUaComPara?: Array<OpcUaComPara>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaUpdateCommunicationPost(
        opcUaComPara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaUpdatePubSubPost(
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaUpdatePubSubPost(
        opcUaPubSubPara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaWriteNodeForBatchPost(
      writeNodeInput?: Array<WriteNodeInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaWriteNodeForBatchPost(
        writeNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaWriteNodePost(
      writeNodeInput?: WriteNodeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaWriteNodePost(
        writeNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * OpcuaApi - factory interface
 * @export
 */
export const OpcuaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OpcuaApiFp(configuration)
  return {
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddCommunicationPost(addOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubPost(
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddPubSubPost(addOpcUaPubSubInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeleteCommunicationPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeleteCommunicationPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePost(requestBody?: Array<string>, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePubSubPost(requestBody?: Array<string>, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeletePubSubPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitPost(
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaInitPost(initOpcUaConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryCommunicationPost(
      queryOpcUaComInput?: QueryOpcUaComInput,
      options?: any,
    ): AxiosPromise<Array<OpcUaComPara>> {
      return localVarFp
        .apiV1OpcUaQueryCommunicationPost(queryOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryOpcUaServersPost(
      opcFlag?: string,
      options?: any,
    ): AxiosPromise<Array<QueryOpcUaConfigOutput>> {
      return localVarFp
        .apiV1OpcUaQueryOpcUaServersPost(opcFlag, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryPubSubPost(
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options?: any,
    ): AxiosPromise<Array<OpcUaPubSubPara>> {
      return localVarFp
        .apiV1OpcUaQueryPubSubPost(queryOpcUaPubSubInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaReadNodePost(readNodeInput?: ReadNodeInput, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaReadNodePost(readNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataPost(tenantId?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaSyncTelemetryDataPost(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdateCommunicationPost(
      opcUaComPara?: Array<OpcUaComPara>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaUpdateCommunicationPost(opcUaComPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePubSubPost(
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaUpdatePubSubPost(opcUaPubSubPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodeForBatchPost(
      writeNodeInput?: Array<WriteNodeInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaWriteNodeForBatchPost(writeNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodePost(writeNodeInput?: WriteNodeInput, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaWriteNodePost(writeNodeInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OpcuaApi - object-oriented interface
 * @export
 * @class OpcuaApi
 * @extends {BaseAPI}
 */
export class OpcuaApi extends BaseAPI {
  /**
   * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
   * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
   * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddCommunicationPost(
    addOpcUaComInput?: Array<AddOpcUaComInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddCommunicationPost(addOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
   * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
   * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddPubSubPost(
    addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddPubSubPost(addOpcUaPubSubInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除opc监测点 Delete opc monitoring point according to Id
   * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeleteCommunicationPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeleteCommunicationPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
   * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeletePost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
   * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeletePubSubPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeletePubSubPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
   * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
   * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaInitPost(
    initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaInitPost(initOpcUaConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
   * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
   * @param {QueryOpcUaComInput} [queryOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryCommunicationPost(
    queryOpcUaComInput?: QueryOpcUaComInput,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryCommunicationPost(queryOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
   * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
   * @param {string} [opcFlag]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryOpcUaServersPost(opcFlag?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryOpcUaServersPost(opcFlag, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
   * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
   * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryPubSubPost(
    queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryPubSubPost(queryOpcUaPubSubInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据输入参数查询节点数据 Query node data according to input parameters
   * @summary 读取节点数据 Read node data
   * @param {ReadNodeInput} [readNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaReadNodePost(readNodeInput?: ReadNodeInput, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaReadNodePost(readNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 同步opc server遥测数据/sync opc server telemetry data
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaSyncTelemetryDataPost(tenantId?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaSyncTelemetryDataPost(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
   * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
   * @param {Array<OpcUaComPara>} [opcUaComPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaUpdateCommunicationPost(
    opcUaComPara?: Array<OpcUaComPara>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaUpdateCommunicationPost(opcUaComPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
   * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaUpdatePubSubPost(
    opcUaPubSubPara?: Array<OpcUaPubSubPara>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaUpdatePubSubPost(opcUaPubSubPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 往节点写入数据-批量/write data to node for batch
   * @param {Array<WriteNodeInput>} [writeNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaWriteNodeForBatchPost(
    writeNodeInput?: Array<WriteNodeInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaWriteNodeForBatchPost(writeNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 往节点写入数据 Write data to node
   * @param {WriteNodeInput} [writeNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaWriteNodePost(writeNodeInput?: WriteNodeInput, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaWriteNodePost(writeNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
