/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddOpcUaComInput } from '../models'
// @ts-ignore
import { AddOpcUaConfigInput } from '../models'
// @ts-ignore
import { AddOpcUaPubSubInput } from '../models'
// @ts-ignore
import { AddSubscriptionInput } from '../models'
// @ts-ignore
import { InitOpcUaConfigInput } from '../models'
// @ts-ignore
import { OpcUaComAssemblyInfo } from '../models'
// @ts-ignore
import { OpcUaComPara } from '../models'
// @ts-ignore
import { OpcUaPubSubPara } from '../models'
// @ts-ignore
import { QueryOpcUaComInput } from '../models'
// @ts-ignore
import { QueryOpcUaConfigOutput } from '../models'
// @ts-ignore
import { QueryOpcUaPubSubInput } from '../models'
// @ts-ignore
import { ReadNodeInput } from '../models'
// @ts-ignore
import { StringListResult } from '../models'
// @ts-ignore
import { UpdateOpcUaConfigInput } from '../models'
// @ts-ignore
import { WriteNodeInput } from '../models'
/**
 * OpcuaApi - axios parameter creator
 * @export
 */
export const OpcuaApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 将OpcUaPubSub中所有节点添加订阅
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaALLSubscriptionPut: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/opcua/a-lLSubscription`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/opcua/control-cmd-opc-message
     * @param {string} [controlDeviceName] 控制设备名
     * @param {string} [controlIndicator] 控制指标
     * @param {number} [controlValue] 控制值
     * @param {string} [tenantId]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaControlCmdOpcMessageGet: async (
      controlDeviceName?: string,
      controlIndicator?: string,
      controlValue?: number,
      tenantId?: string,
      userId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/opcua/control-cmd-opc-message`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (controlDeviceName !== undefined) {
        localVarQueryParameter['ControlDeviceName'] = controlDeviceName
      }

      if (controlIndicator !== undefined) {
        localVarQueryParameter['ControlIndicator'] = controlIndicator
      }

      if (controlValue !== undefined) {
        localVarQueryParameter['ControlValue'] = controlValue
      }

      if (tenantId !== undefined) {
        localVarQueryParameter['TenantId'] = tenantId
      }

      if (userId !== undefined) {
        localVarQueryParameter['UserId'] = userId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/opcua/handel-message
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaHandelMessagePost: async (
      body?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/opcua/handel-message`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddCommunicationPost: async (
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增OPC-UA Server信息 add OPC-UA Server information
     * @param {Array<AddOpcUaConfigInput>} [addOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPost: async (
      addOpcUaConfigInput?: Array<AddOpcUaConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubPost: async (
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaPubSubInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-pub-sub-redis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubRedisPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-pub-sub-redis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-subscription
     * @param {AddSubscriptionInput} [addSubscriptionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddSubscriptionPost: async (
      addSubscriptionInput?: AddSubscriptionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/add-subscription`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addSubscriptionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeleteCommunicationPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePubSubPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/delete-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 导出opcua配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaExportOpcuaConfigPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/export-opcua-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/heart-beat
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaHeartBeatPost: async (
      writeNodeInput?: WriteNodeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/heart-beat`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        writeNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 导入opcua配置
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaImportOpcuaConfigPost: async (
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/import-opcua-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 初始化指标对应的opc监测点，根据输入的监测点数据，删除系统中多余的监测点，如果输入的监测点已存在则更新，不存在则新增。   Init the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitCommunicationPost: async (
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/init-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitPost: async (
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/init`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        initOpcUaConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 检测opc心跳是否正常
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaOpcHeartBeatPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/opc-heart-beat`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/process-queue
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaProcessQueuePost: async (
      body?: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/process-queue`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryCommunicationPost: async (
      queryOpcUaComInput?: QueryOpcUaComInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryOpcUaServersPost: async (
      opcFlag?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-opc-ua-servers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (opcFlag !== undefined) {
        localVarQueryParameter['OpcFlag'] = opcFlag
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryPubSubPost: async (
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/query-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOpcUaPubSubInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaReadNodePost: async (
      readNodeInput?: ReadNodeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/read-node`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        readNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-heart-to-redis
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSaveHeartToRedisPost: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/save-heart-to-redis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-iot-data
     * @param {string} [tenantId]
     * @param {string} [subValue]
     * @param {string} [indicator]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSaveIotDataGet: async (
      tenantId?: string,
      subValue?: string,
      indicator?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/save-iot-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (subValue !== undefined) {
        localVarQueryParameter['subValue'] = subValue
      }

      if (indicator !== undefined) {
        localVarQueryParameter['indicator'] = indicator
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {string} [syncStrategy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataPost: async (
      tenantId?: string,
      syncStrategy?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/sync-telemetry-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (syncStrategy !== undefined) {
        localVarQueryParameter['syncStrategy'] = syncStrategy
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 同步opc server遥测数据到redis中
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataRedisPost: async (
      tenantId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/sync-telemetry-data-redis`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdateCommunicationPost: async (
      opcUaComPara?: Array<OpcUaComPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/update-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        opcUaComPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新OPC-UA Server信息 update OPC-UA Server information
     * @param {Array<UpdateOpcUaConfigInput>} [updateOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePost: async (
      updateOpcUaConfigInput?: Array<UpdateOpcUaConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOpcUaConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePubSubPost: async (
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/update-pub-sub`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        opcUaPubSubPara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodeForBatchPost: async (
      writeNodeInput?: Array<WriteNodeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/write-node-for-batch`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        writeNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodePost: async (
      writeNodeInput?: WriteNodeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/opc-ua/write-node`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        writeNodeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 初始化指标对应的opc监测点,如果存在则全部删除后再添加
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OpcUaInitCommunicationPost: async (
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/opc-ua/init-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOpcUaComInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询指标对应的opc监测点，用于项目配置平台显示 The opc monitoring point corresponding to the query indicator，use to project config platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OpcUaQueryCommunicationPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/opc-ua/query-communication`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OpcuaApi - functional programming interface
 * @export
 */
export const OpcuaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OpcuaApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 将OpcUaPubSub中所有节点添加订阅
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppOpcuaALLSubscriptionPut(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppOpcuaALLSubscriptionPut(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/opcua/control-cmd-opc-message
     * @param {string} [controlDeviceName] 控制设备名
     * @param {string} [controlIndicator] 控制指标
     * @param {number} [controlValue] 控制值
     * @param {string} [tenantId]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppOpcuaControlCmdOpcMessageGet(
      controlDeviceName?: string,
      controlIndicator?: string,
      controlValue?: number,
      tenantId?: string,
      userId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppOpcuaControlCmdOpcMessageGet(
        controlDeviceName,
        controlIndicator,
        controlValue,
        tenantId,
        userId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/opcua/handel-message
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppOpcuaHandelMessagePost(
      body?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppOpcuaHandelMessagePost(
        body,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddCommunicationPost(
        addOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增OPC-UA Server信息 add OPC-UA Server information
     * @param {Array<AddOpcUaConfigInput>} [addOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddPost(
      addOpcUaConfigInput?: Array<AddOpcUaConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddPost(
        addOpcUaConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddPubSubPost(
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddPubSubPost(
        addOpcUaPubSubInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-pub-sub-redis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddPubSubRedisPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddPubSubRedisPost(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-subscription
     * @param {AddSubscriptionInput} [addSubscriptionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaAddSubscriptionPost(
      addSubscriptionInput?: AddSubscriptionInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaAddSubscriptionPost(
        addSubscriptionInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeleteCommunicationPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeleteCommunicationPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeletePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaDeletePubSubPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaDeletePubSubPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 导出opcua配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaExportOpcuaConfigPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaExportOpcuaConfigPost(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/heart-beat
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaHeartBeatPost(
      writeNodeInput?: WriteNodeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaHeartBeatPost(
        writeNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 导入opcua配置
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaImportOpcuaConfigPost(
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaImportOpcuaConfigPost(
        excelFile,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 初始化指标对应的opc监测点，根据输入的监测点数据，删除系统中多余的监测点，如果输入的监测点已存在则更新，不存在则新增。   Init the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaInitCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaInitCommunicationPost(
        addOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaInitPost(
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaInitPost(
        initOpcUaConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 检测opc心跳是否正常
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaOpcHeartBeatPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaOpcHeartBeatPost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/process-queue
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaProcessQueuePost(
      body?: object,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaProcessQueuePost(
        body,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryCommunicationPost(
      queryOpcUaComInput?: QueryOpcUaComInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpcUaComPara>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryCommunicationPost(
        queryOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryOpcUaServersPost(
      opcFlag?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryOpcUaConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryOpcUaServersPost(
        opcFlag,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaQueryPubSubPost(
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpcUaPubSubPara>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaQueryPubSubPost(
        queryOpcUaPubSubInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaReadNodePost(
      readNodeInput?: ReadNodeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaReadNodePost(
        readNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-heart-to-redis
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaSaveHeartToRedisPost(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaSaveHeartToRedisPost(
        tenantId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-iot-data
     * @param {string} [tenantId]
     * @param {string} [subValue]
     * @param {string} [indicator]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaSaveIotDataGet(
      tenantId?: string,
      subValue?: string,
      indicator?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaSaveIotDataGet(
        tenantId,
        subValue,
        indicator,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {string} [syncStrategy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaSyncTelemetryDataPost(
      tenantId?: string,
      syncStrategy?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaSyncTelemetryDataPost(
        tenantId,
        syncStrategy,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 同步opc server遥测数据到redis中
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaSyncTelemetryDataRedisPost(
      tenantId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1OpcUaSyncTelemetryDataRedisPost(tenantId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaUpdateCommunicationPost(
      opcUaComPara?: Array<OpcUaComPara>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaUpdateCommunicationPost(
        opcUaComPara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新OPC-UA Server信息 update OPC-UA Server information
     * @param {Array<UpdateOpcUaConfigInput>} [updateOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaUpdatePost(
      updateOpcUaConfigInput?: Array<UpdateOpcUaConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaUpdatePost(
        updateOpcUaConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaUpdatePubSubPost(
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaUpdatePubSubPost(
        opcUaPubSubPara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaWriteNodeForBatchPost(
      writeNodeInput?: Array<WriteNodeInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaWriteNodeForBatchPost(
        writeNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OpcUaWriteNodePost(
      writeNodeInput?: WriteNodeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpcUaWriteNodePost(
        writeNodeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 初始化指标对应的opc监测点,如果存在则全部删除后再添加
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OpcUaInitCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OpcUaInitCommunicationPost(
        addOpcUaComInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询指标对应的opc监测点，用于项目配置平台显示 The opc monitoring point corresponding to the query indicator，use to project config platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2OpcUaQueryCommunicationPost(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpcUaComAssemblyInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OpcUaQueryCommunicationPost(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * OpcuaApi - factory interface
 * @export
 */
export const OpcuaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OpcuaApiFp(configuration)
  return {
    /**
     *
     * @summary 将OpcUaPubSub中所有节点添加订阅
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaALLSubscriptionPut(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppOpcuaALLSubscriptionPut(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/opcua/control-cmd-opc-message
     * @param {string} [controlDeviceName] 控制设备名
     * @param {string} [controlIndicator] 控制指标
     * @param {number} [controlValue] 控制值
     * @param {string} [tenantId]
     * @param {string} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaControlCmdOpcMessageGet(
      controlDeviceName?: string,
      controlIndicator?: string,
      controlValue?: number,
      tenantId?: string,
      userId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAppOpcuaControlCmdOpcMessageGet(
          controlDeviceName,
          controlIndicator,
          controlValue,
          tenantId,
          userId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/opcua/handel-message
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppOpcuaHandelMessagePost(body?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppOpcuaHandelMessagePost(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddCommunicationPost(addOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增OPC-UA Server信息 add OPC-UA Server information
     * @param {Array<AddOpcUaConfigInput>} [addOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPost(
      addOpcUaConfigInput?: Array<AddOpcUaConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddPost(addOpcUaConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
     * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
     * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubPost(
      addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddPubSubPost(addOpcUaPubSubInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-pub-sub-redis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddPubSubRedisPost(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaAddPubSubRedisPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/add-subscription
     * @param {AddSubscriptionInput} [addSubscriptionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaAddSubscriptionPost(
      addSubscriptionInput?: AddSubscriptionInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaAddSubscriptionPost(addSubscriptionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除opc监测点 Delete opc monitoring point according to Id
     * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeleteCommunicationPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeleteCommunicationPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
     * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePost(requestBody?: Array<string>, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
     * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaDeletePubSubPost(requestBody?: Array<string>, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaDeletePubSubPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 导出opcua配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaExportOpcuaConfigPost(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaExportOpcuaConfigPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/heart-beat
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaHeartBeatPost(writeNodeInput?: WriteNodeInput, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaHeartBeatPost(writeNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 导入opcua配置
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaImportOpcuaConfigPost(
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1OpcUaImportOpcuaConfigPost(excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
     * @summary 初始化指标对应的opc监测点，根据输入的监测点数据，删除系统中多余的监测点，如果输入的监测点已存在则更新，不存在则新增。   Init the opc monitoring point corresponding to the indicator
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaInitCommunicationPost(addOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
     * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
     * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaInitPost(
      initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaInitPost(initOpcUaConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 检测opc心跳是否正常
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaOpcHeartBeatPost(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaOpcHeartBeatPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/process-queue
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaProcessQueuePost(body?: object, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaProcessQueuePost(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
     * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
     * @param {QueryOpcUaComInput} [queryOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryCommunicationPost(
      queryOpcUaComInput?: QueryOpcUaComInput,
      options?: any,
    ): AxiosPromise<Array<OpcUaComPara>> {
      return localVarFp
        .apiV1OpcUaQueryCommunicationPost(queryOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
     * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
     * @param {string} [opcFlag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryOpcUaServersPost(
      opcFlag?: string,
      options?: any,
    ): AxiosPromise<Array<QueryOpcUaConfigOutput>> {
      return localVarFp
        .apiV1OpcUaQueryOpcUaServersPost(opcFlag, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
     * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
     * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaQueryPubSubPost(
      queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
      options?: any,
    ): AxiosPromise<Array<OpcUaPubSubPara>> {
      return localVarFp
        .apiV1OpcUaQueryPubSubPost(queryOpcUaPubSubInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据输入参数查询节点数据 Query node data according to input parameters
     * @summary 读取节点数据 Read node data
     * @param {ReadNodeInput} [readNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaReadNodePost(readNodeInput?: ReadNodeInput, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaReadNodePost(readNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-heart-to-redis
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSaveHeartToRedisPost(tenantId?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaSaveHeartToRedisPost(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/opc-ua/save-iot-data
     * @param {string} [tenantId]
     * @param {string} [subValue]
     * @param {string} [indicator]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSaveIotDataGet(
      tenantId?: string,
      subValue?: string,
      indicator?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaSaveIotDataGet(tenantId, subValue, indicator, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 同步opc server遥测数据/sync opc server telemetry data
     * @param {string} [tenantId]
     * @param {string} [syncStrategy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataPost(
      tenantId?: string,
      syncStrategy?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaSyncTelemetryDataPost(tenantId, syncStrategy, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 同步opc server遥测数据到redis中
     * @param {string} [tenantId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaSyncTelemetryDataRedisPost(tenantId?: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OpcUaSyncTelemetryDataRedisPost(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
     * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
     * @param {Array<OpcUaComPara>} [opcUaComPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdateCommunicationPost(
      opcUaComPara?: Array<OpcUaComPara>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaUpdateCommunicationPost(opcUaComPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新OPC-UA Server信息 update OPC-UA Server information
     * @param {Array<UpdateOpcUaConfigInput>} [updateOpcUaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePost(
      updateOpcUaConfigInput?: Array<UpdateOpcUaConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaUpdatePost(updateOpcUaConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
     * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaUpdatePubSubPost(
      opcUaPubSubPara?: Array<OpcUaPubSubPara>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaUpdatePubSubPost(opcUaPubSubPara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 往节点写入数据-批量/write data to node for batch
     * @param {Array<WriteNodeInput>} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodeForBatchPost(
      writeNodeInput?: Array<WriteNodeInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaWriteNodeForBatchPost(writeNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 往节点写入数据 Write data to node
     * @param {WriteNodeInput} [writeNodeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OpcUaWriteNodePost(writeNodeInput?: WriteNodeInput, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1OpcUaWriteNodePost(writeNodeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 初始化指标对应的opc监测点,如果存在则全部删除后再添加
     * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OpcUaInitCommunicationPost(
      addOpcUaComInput?: Array<AddOpcUaComInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2OpcUaInitCommunicationPost(addOpcUaComInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询指标对应的opc监测点，用于项目配置平台显示 The opc monitoring point corresponding to the query indicator，use to project config platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2OpcUaQueryCommunicationPost(options?: any): AxiosPromise<Array<OpcUaComAssemblyInfo>> {
      return localVarFp
        .apiV2OpcUaQueryCommunicationPost(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OpcuaApi - object-oriented interface
 * @export
 * @class OpcuaApi
 * @extends {BaseAPI}
 */
export class OpcuaApi extends BaseAPI {
  /**
   *
   * @summary 将OpcUaPubSub中所有节点添加订阅
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiAppOpcuaALLSubscriptionPut(options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiAppOpcuaALLSubscriptionPut(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/opcua/control-cmd-opc-message
   * @param {string} [controlDeviceName] 控制设备名
   * @param {string} [controlIndicator] 控制指标
   * @param {number} [controlValue] 控制值
   * @param {string} [tenantId]
   * @param {string} [userId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiAppOpcuaControlCmdOpcMessageGet(
    controlDeviceName?: string,
    controlIndicator?: string,
    controlValue?: number,
    tenantId?: string,
    userId?: string,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiAppOpcuaControlCmdOpcMessageGet(
        controlDeviceName,
        controlIndicator,
        controlValue,
        tenantId,
        userId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/opcua/handel-message
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiAppOpcuaHandelMessagePost(body?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiAppOpcuaHandelMessagePost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
   * @summary 添加指标对应的opc监测点 Add the opc monitoring point corresponding to the indicator
   * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddCommunicationPost(
    addOpcUaComInput?: Array<AddOpcUaComInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddCommunicationPost(addOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增OPC-UA Server信息 add OPC-UA Server information
   * @param {Array<AddOpcUaConfigInput>} [addOpcUaConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddPost(
    addOpcUaConfigInput?: Array<AddOpcUaConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddPost(addOpcUaConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 发布订阅检测项中OpcFlag/SubKey/Node保证唯一，不存在则添加 OpcFlag/SubKey/Node in the publish/subscribe detection item is guaranteed to be unique. If it does not exist, add it
   * @summary 添加基于opc-ua的发布订阅检测项 Add opc ua based publish/subscribe detection item
   * @param {Array<AddOpcUaPubSubInput>} [addOpcUaPubSubInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddPubSubPost(
    addOpcUaPubSubInput?: Array<AddOpcUaPubSubInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddPubSubPost(addOpcUaPubSubInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/add-pub-sub-redis
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddPubSubRedisPost(options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddPubSubRedisPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/add-subscription
   * @param {AddSubscriptionInput} [addSubscriptionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaAddSubscriptionPost(
    addSubscriptionInput?: AddSubscriptionInput,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaAddSubscriptionPost(addSubscriptionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除opc监测点 Delete opc monitoring point according to Id
   * @summary 删除指标对应的opc监测点 Delete the opc monitoring point corresponding to the indicator
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeleteCommunicationPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeleteCommunicationPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除OPC-UA配置表信息 Delete OPC-UA configuration table information according to the ID
   * @summary 删除OPC-UA Server信息 Delete OPC-UA Server information
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeletePost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id删除opc-ua的发布订阅检测项信息 Delete the publish/subscribe detection item information of opc ua according to the ID
   * @summary 删除opc-ua的发布订阅检测项 Delete the publish/subscribe detection item of opc ua
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaDeletePubSubPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaDeletePubSubPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 导出opcua配置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaExportOpcuaConfigPost(options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaExportOpcuaConfigPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/heart-beat
   * @param {WriteNodeInput} [writeNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaHeartBeatPost(writeNodeInput?: WriteNodeInput, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaHeartBeatPost(writeNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 导入opcua配置
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaImportOpcuaConfigPost(excelFile?: any, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaImportOpcuaConfigPost(excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Opc检测点信息中IndicatorId/Node保证唯一，不存在则添加 The IndicatorId/Node in the Opc checkpoint information must be unique. If it does not exist, add it
   * @summary 初始化指标对应的opc监测点，根据输入的监测点数据，删除系统中多余的监测点，如果输入的监测点已存在则更新，不存在则新增。   Init the opc monitoring point corresponding to the indicator
   * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaInitCommunicationPost(
    addOpcUaComInput?: Array<AddOpcUaComInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaInitCommunicationPost(addOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 如果OPC-UA配置表中存在OpcFlag则修改数据，否则添加数据 If OpcFlag exists in the OPC-UA configuration table, modify the data; otherwise, add the data
   * @summary 初始化OPC-UA Server信息 Initialize OPC-UA Server information
   * @param {Array<InitOpcUaConfigInput>} [initOpcUaConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaInitPost(
    initOpcUaConfigInput?: Array<InitOpcUaConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaInitPost(initOpcUaConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 检测opc心跳是否正常
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaOpcHeartBeatPost(options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaOpcHeartBeatPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/process-queue
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaProcessQueuePost(body?: object, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaProcessQueuePost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据IndicatorId/Node查询opc监测点 Query opc monitoring points according to IndicatorId/Node
   * @summary 查询指标对应的opc监测点 The opc monitoring point corresponding to the query indicator
   * @param {QueryOpcUaComInput} [queryOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryCommunicationPost(
    queryOpcUaComInput?: QueryOpcUaComInput,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryCommunicationPost(queryOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据OpcFlag获取OPC-UA Server信息，若OpcFlag为空则获取全部信息 Query OPC-UA Server information according to OpcFlag. If OpcFlag is empty, querying all information
   * @summary 获取OPC-UA Server信息 Querying OPC-UA Server Information
   * @param {string} [opcFlag]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryOpcUaServersPost(opcFlag?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryOpcUaServersPost(opcFlag, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据OpcFlag/SubKey/Node查询发布订阅检测项 Query publish subscribe detect items according to OpcFlag/SubKey/Node
   * @summary 查询opc-ua的发布订阅检测项 Query the publish/subscribe detection item of opc ua
   * @param {QueryOpcUaPubSubInput} [queryOpcUaPubSubInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaQueryPubSubPost(
    queryOpcUaPubSubInput?: QueryOpcUaPubSubInput,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaQueryPubSubPost(queryOpcUaPubSubInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据输入参数查询节点数据 Query node data according to input parameters
   * @summary 读取节点数据 Read node data
   * @param {ReadNodeInput} [readNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaReadNodePost(readNodeInput?: ReadNodeInput, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaReadNodePost(readNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/save-heart-to-redis
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaSaveHeartToRedisPost(tenantId?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaSaveHeartToRedisPost(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/opc-ua/save-iot-data
   * @param {string} [tenantId]
   * @param {string} [subValue]
   * @param {string} [indicator]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaSaveIotDataGet(
    tenantId?: string,
    subValue?: string,
    indicator?: string,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaSaveIotDataGet(tenantId, subValue, indicator, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 同步opc server遥测数据/sync opc server telemetry data
   * @param {string} [tenantId]
   * @param {string} [syncStrategy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaSyncTelemetryDataPost(
    tenantId?: string,
    syncStrategy?: string,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaSyncTelemetryDataPost(tenantId, syncStrategy, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 同步opc server遥测数据到redis中
   * @param {string} [tenantId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaSyncTelemetryDataRedisPost(tenantId?: string, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaSyncTelemetryDataRedisPost(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据Id判断需要修改的opc监测点，如果存在则修改 Judge the opc monitoring point to be modified according to the ID, and modify it if it exists
   * @summary 修改指标对应的opc监测点 Modify the opc monitoring point corresponding to the indicator
   * @param {Array<OpcUaComPara>} [opcUaComPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaUpdateCommunicationPost(
    opcUaComPara?: Array<OpcUaComPara>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaUpdateCommunicationPost(opcUaComPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新OPC-UA Server信息 update OPC-UA Server information
   * @param {Array<UpdateOpcUaConfigInput>} [updateOpcUaConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaUpdatePost(
    updateOpcUaConfigInput?: Array<UpdateOpcUaConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaUpdatePost(updateOpcUaConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改opc-ua的发布订阅检测项 Modify the publish/subscribe detection item of opc ua
   * @param {Array<OpcUaPubSubPara>} [opcUaPubSubPara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaUpdatePubSubPost(
    opcUaPubSubPara?: Array<OpcUaPubSubPara>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaUpdatePubSubPost(opcUaPubSubPara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 往节点写入数据-批量/write data to node for batch
   * @param {Array<WriteNodeInput>} [writeNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaWriteNodeForBatchPost(
    writeNodeInput?: Array<WriteNodeInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaWriteNodeForBatchPost(writeNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 往节点写入数据 Write data to node
   * @param {WriteNodeInput} [writeNodeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV1OpcUaWriteNodePost(writeNodeInput?: WriteNodeInput, options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV1OpcUaWriteNodePost(writeNodeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 初始化指标对应的opc监测点,如果存在则全部删除后再添加
   * @param {Array<AddOpcUaComInput>} [addOpcUaComInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV2OpcUaInitCommunicationPost(
    addOpcUaComInput?: Array<AddOpcUaComInput>,
    options?: AxiosRequestConfig,
  ) {
    return OpcuaApiFp(this.configuration)
      .apiV2OpcUaInitCommunicationPost(addOpcUaComInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询指标对应的opc监测点，用于项目配置平台显示 The opc monitoring point corresponding to the query indicator，use to project config platform
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OpcuaApi
   */
  public apiV2OpcUaQueryCommunicationPost(options?: AxiosRequestConfig) {
    return OpcuaApiFp(this.configuration)
      .apiV2OpcUaQueryCommunicationPost(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
