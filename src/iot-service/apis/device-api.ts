/* eslint-disable */
/**
 * 污水业务中台基础服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDeviceInput } from '../models'
// @ts-ignore
import { DeleteDevicesInput } from '../models'
// @ts-ignore
import { DeviceInfosInputWithAttr } from '../models'
// @ts-ignore
import { DeviceInfosOutput } from '../models'
// @ts-ignore
import { DeviceInfosOutputPage } from '../models'
// @ts-ignore
import { DeviceKeysOutput } from '../models'
// @ts-ignore
import { GetAttributesInput } from '../models'
// @ts-ignore
import { QueryDeviceDetailInput } from '../models'
// @ts-ignore
import { SaveDeviceAttributeValuesInput } from '../models'
// @ts-ignore
import { StringStringKeyValue } from '../models'
// @ts-ignore
import { UpdateDeviceInput } from '../models'
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 增加一个设备 Add a device
     * @param {AddDeviceInput} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAddDevicePost: async (
      addDeviceInput?: AddDeviceInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/add-device`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量添加设备，如果设备已存在，则会更新 Batch add devices, if some devices are already existed, they will be updated
     * @summary 批量添加设备 Batch add devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchAddDevicePost: async (
      addDeviceInput?: Array<AddDeviceInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/batch-add-device`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量添加或更新设备的属性值 Add or modify device customized attributes
     * @param {Array<SaveDeviceAttributeValuesInput>} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchSaveDeviceAttributeValuesPost: async (
      saveDeviceAttributeValuesInput?: Array<SaveDeviceAttributeValuesInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/batch-save-device-attribute-values`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveDeviceAttributeValuesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量导入设备，如果设备已存在，则会更新 Batch import devices, if some devices are already existed, they will be updated  每个设备的Attribute属性的key需要保持一致
     * @summary 批量导入设备 Batch import devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBulkImportDevicesPost: async (
      addDeviceInput?: Array<AddDeviceInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/bulk-import-devices`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据设备ID列表删除设备 Delete devices by ids
     * @param {DeleteDevicesInput} [deleteDevicesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteDevicesPost: async (
      deleteDevicesInput?: DeleteDevicesInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/delete-devices`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteDevicesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情 Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceBatchDetailsPost: async (
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/device-batch-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryDeviceDetailInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据设备ID查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备ID查询设备详情 Get device details by device ID
     * @param {string} [id] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceDetailsGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/device-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据设备ID查询设备指标信息 Get device indicators by device ids
     * @param {Array<string>} deviceIds 设备Id列表 device ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceKeysGet: async (
      deviceIds: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deviceIds' is not null or undefined
      assertParamExists('apiV1IotDeviceKeysGet', 'deviceIds', deviceIds)
      const localVarPath = `/api/v1/iot/device-Keys`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceIds !== undefined) {
        localVarQueryParameter['DeviceIds'] = deviceIds
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 按设备属性查询设备
     * @param {DeviceInfosInputWithAttr} [deviceInfosInputWithAttr]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListAttrPost: async (
      deviceInfosInputWithAttr?: DeviceInfosInputWithAttr,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/device-list/attr`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deviceInfosInputWithAttr,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListGet: async (
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/device-list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sortProperty !== undefined) {
        localVarQueryParameter['SortProperty'] = sortProperty
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['SortOrder'] = sortOrder
      }

      if (type !== undefined) {
        localVarQueryParameter['Type'] = type
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter['PageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['PageSize'] = pageSize
      }

      if (keyWords !== undefined) {
        localVarQueryParameter['KeyWords'] = keyWords
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListWithoutIndicatorGet: async (
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/device-list-withoutIndicator`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sortProperty !== undefined) {
        localVarQueryParameter['SortProperty'] = sortProperty
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['SortOrder'] = sortOrder
      }

      if (type !== undefined) {
        localVarQueryParameter['Type'] = type
      }

      if (pageIndex !== undefined) {
        localVarQueryParameter['PageIndex'] = pageIndex
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['PageSize'] = pageSize
      }

      if (keyWords !== undefined) {
        localVarQueryParameter['KeyWords'] = keyWords
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 通过属性的键查询设备属性值，如果传入的属性键为空，则返回所有的属性值 Get device attributes through attribute keys, if attribute keys is empty, it will return all the attributes
     * @summary 查询设备的属性 Get device attributes
     * @param {GetAttributesInput} [getAttributesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryDeviceAttributesPost: async (
      getAttributesInput?: GetAttributesInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/query-device-attributes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getAttributesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加或更新设备的属性值 Add or modify device customized attributes
     * @param {SaveDeviceAttributeValuesInput} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveDeviceAttributeValuesPost: async (
      saveDeviceAttributeValuesInput?: SaveDeviceAttributeValuesInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/save-device-attribute-values`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveDeviceAttributeValuesInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新一个设备 Update a device
     * @param {UpdateDeviceInput} [updateDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotUpdateDevicePost: async (
      updateDeviceInput?: UpdateDeviceInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/update-device`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDeviceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情(多线程) Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotDeviceBatchDetailsPost: async (
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/device-batch-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryDeviceDetailInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 增加一个设备 Add a device
     * @param {AddDeviceInput} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotAddDevicePost(
      addDeviceInput?: AddDeviceInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotAddDevicePost(
        addDeviceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量添加设备，如果设备已存在，则会更新 Batch add devices, if some devices are already existed, they will be updated
     * @summary 批量添加设备 Batch add devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotBatchAddDevicePost(
      addDeviceInput?: Array<AddDeviceInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotBatchAddDevicePost(
        addDeviceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量添加或更新设备的属性值 Add or modify device customized attributes
     * @param {Array<SaveDeviceAttributeValuesInput>} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotBatchSaveDeviceAttributeValuesPost(
      saveDeviceAttributeValuesInput?: Array<SaveDeviceAttributeValuesInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotBatchSaveDeviceAttributeValuesPost(
          saveDeviceAttributeValuesInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量导入设备，如果设备已存在，则会更新 Batch import devices, if some devices are already existed, they will be updated  每个设备的Attribute属性的key需要保持一致
     * @summary 批量导入设备 Batch import devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotBulkImportDevicesPost(
      addDeviceInput?: Array<AddDeviceInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotBulkImportDevicesPost(
        addDeviceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据设备ID列表删除设备 Delete devices by ids
     * @param {DeleteDevicesInput} [deleteDevicesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeleteDevicesPost(
      deleteDevicesInput?: DeleteDevicesInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeleteDevicesPost(
        deleteDevicesInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情 Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceBatchDetailsPost(
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceInfosOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeviceBatchDetailsPost(
        queryDeviceDetailInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据设备ID查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备ID查询设备详情 Get device details by device ID
     * @param {string} [id] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceDetailsGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfosOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeviceDetailsGet(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据设备ID查询设备指标信息 Get device indicators by device ids
     * @param {Array<string>} deviceIds 设备Id列表 device ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceKeysGet(
      deviceIds: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceKeysOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeviceKeysGet(
        deviceIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 按设备属性查询设备
     * @param {DeviceInfosInputWithAttr} [deviceInfosInputWithAttr]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceListAttrPost(
      deviceInfosInputWithAttr?: DeviceInfosInputWithAttr,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfosOutputPage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeviceListAttrPost(
        deviceInfosInputWithAttr,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceListGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfosOutputPage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotDeviceListGet(
        sortProperty,
        sortOrder,
        type,
        pageIndex,
        pageSize,
        keyWords,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotDeviceListWithoutIndicatorGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfosOutputPage>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotDeviceListWithoutIndicatorGet(
          sortProperty,
          sortOrder,
          type,
          pageIndex,
          pageSize,
          keyWords,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 通过属性的键查询设备属性值，如果传入的属性键为空，则返回所有的属性值 Get device attributes through attribute keys, if attribute keys is empty, it will return all the attributes
     * @summary 查询设备的属性 Get device attributes
     * @param {GetAttributesInput} [getAttributesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotQueryDeviceAttributesPost(
      getAttributesInput?: GetAttributesInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StringStringKeyValue>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotQueryDeviceAttributesPost(
        getAttributesInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加或更新设备的属性值 Add or modify device customized attributes
     * @param {SaveDeviceAttributeValuesInput} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotSaveDeviceAttributeValuesPost(
      saveDeviceAttributeValuesInput?: SaveDeviceAttributeValuesInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotSaveDeviceAttributeValuesPost(
          saveDeviceAttributeValuesInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新一个设备 Update a device
     * @param {UpdateDeviceInput} [updateDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotUpdateDevicePost(
      updateDeviceInput?: UpdateDeviceInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IotUpdateDevicePost(
        updateDeviceInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情(多线程) Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotDeviceBatchDetailsPost(
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceInfosOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2IotDeviceBatchDetailsPost(
        queryDeviceDetailInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DeviceApiFp(configuration)
  return {
    /**
     *
     * @summary 增加一个设备 Add a device
     * @param {AddDeviceInput} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotAddDevicePost(addDeviceInput?: AddDeviceInput, options?: any): AxiosPromise<string> {
      return localVarFp
        .apiV1IotAddDevicePost(addDeviceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量添加设备，如果设备已存在，则会更新 Batch add devices, if some devices are already existed, they will be updated
     * @summary 批量添加设备 Batch add devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchAddDevicePost(
      addDeviceInput?: Array<AddDeviceInput>,
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .apiV1IotBatchAddDevicePost(addDeviceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量添加或更新设备的属性值 Add or modify device customized attributes
     * @param {Array<SaveDeviceAttributeValuesInput>} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBatchSaveDeviceAttributeValuesPost(
      saveDeviceAttributeValuesInput?: Array<SaveDeviceAttributeValuesInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotBatchSaveDeviceAttributeValuesPost(saveDeviceAttributeValuesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量导入设备，如果设备已存在，则会更新 Batch import devices, if some devices are already existed, they will be updated  每个设备的Attribute属性的key需要保持一致
     * @summary 批量导入设备 Batch import devices
     * @param {Array<AddDeviceInput>} [addDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotBulkImportDevicesPost(
      addDeviceInput?: Array<AddDeviceInput>,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .apiV1IotBulkImportDevicesPost(addDeviceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据设备ID列表删除设备 Delete devices by ids
     * @param {DeleteDevicesInput} [deleteDevicesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeleteDevicesPost(
      deleteDevicesInput?: DeleteDevicesInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotDeleteDevicesPost(deleteDevicesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情 Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceBatchDetailsPost(
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options?: any,
    ): AxiosPromise<Array<DeviceInfosOutput>> {
      return localVarFp
        .apiV1IotDeviceBatchDetailsPost(queryDeviceDetailInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据设备ID查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备ID查询设备详情 Get device details by device ID
     * @param {string} [id] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceDetailsGet(id?: string, options?: any): AxiosPromise<DeviceInfosOutput> {
      return localVarFp
        .apiV1IotDeviceDetailsGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据设备ID查询设备指标信息 Get device indicators by device ids
     * @param {Array<string>} deviceIds 设备Id列表 device ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceKeysGet(
      deviceIds: Array<string>,
      options?: any,
    ): AxiosPromise<Array<DeviceKeysOutput>> {
      return localVarFp
        .apiV1IotDeviceKeysGet(deviceIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 按设备属性查询设备
     * @param {DeviceInfosInputWithAttr} [deviceInfosInputWithAttr]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListAttrPost(
      deviceInfosInputWithAttr?: DeviceInfosInputWithAttr,
      options?: any,
    ): AxiosPromise<DeviceInfosOutputPage> {
      return localVarFp
        .apiV1IotDeviceListAttrPost(deviceInfosInputWithAttr, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: any,
    ): AxiosPromise<DeviceInfosOutputPage> {
      return localVarFp
        .apiV1IotDeviceListGet(
          sortProperty,
          sortOrder,
          type,
          pageIndex,
          pageSize,
          keyWords,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
     * @summary 分页查询设备列表 Get device list: pagination query of devices
     * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
     * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
     * @param {string} [type] 设备类型
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [keyWords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotDeviceListWithoutIndicatorGet(
      sortProperty?: number,
      sortOrder?: number,
      type?: string,
      pageIndex?: number,
      pageSize?: number,
      keyWords?: string,
      options?: any,
    ): AxiosPromise<DeviceInfosOutputPage> {
      return localVarFp
        .apiV1IotDeviceListWithoutIndicatorGet(
          sortProperty,
          sortOrder,
          type,
          pageIndex,
          pageSize,
          keyWords,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 通过属性的键查询设备属性值，如果传入的属性键为空，则返回所有的属性值 Get device attributes through attribute keys, if attribute keys is empty, it will return all the attributes
     * @summary 查询设备的属性 Get device attributes
     * @param {GetAttributesInput} [getAttributesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotQueryDeviceAttributesPost(
      getAttributesInput?: GetAttributesInput,
      options?: any,
    ): AxiosPromise<Array<StringStringKeyValue>> {
      return localVarFp
        .apiV1IotQueryDeviceAttributesPost(getAttributesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加或更新设备的属性值 Add or modify device customized attributes
     * @param {SaveDeviceAttributeValuesInput} [saveDeviceAttributeValuesInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotSaveDeviceAttributeValuesPost(
      saveDeviceAttributeValuesInput?: SaveDeviceAttributeValuesInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotSaveDeviceAttributeValuesPost(saveDeviceAttributeValuesInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新一个设备 Update a device
     * @param {UpdateDeviceInput} [updateDeviceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotUpdateDevicePost(
      updateDeviceInput?: UpdateDeviceInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1IotUpdateDevicePost(updateDeviceInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
     * @summary 根据设备IDs批量查询设备详情(多线程) Get device details in batches by device IDs
     * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotDeviceBatchDetailsPost(
      queryDeviceDetailInput?: QueryDeviceDetailInput,
      options?: any,
    ): AxiosPromise<Array<DeviceInfosOutput>> {
      return localVarFp
        .apiV2IotDeviceBatchDetailsPost(queryDeviceDetailInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
  /**
   *
   * @summary 增加一个设备 Add a device
   * @param {AddDeviceInput} [addDeviceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotAddDevicePost(addDeviceInput?: AddDeviceInput, options?: AxiosRequestConfig) {
    return DeviceApiFp(this.configuration)
      .apiV1IotAddDevicePost(addDeviceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量添加设备，如果设备已存在，则会更新 Batch add devices, if some devices are already existed, they will be updated
   * @summary 批量添加设备 Batch add devices
   * @param {Array<AddDeviceInput>} [addDeviceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotBatchAddDevicePost(
    addDeviceInput?: Array<AddDeviceInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotBatchAddDevicePost(addDeviceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量添加或更新设备的属性值 Add or modify device customized attributes
   * @param {Array<SaveDeviceAttributeValuesInput>} [saveDeviceAttributeValuesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotBatchSaveDeviceAttributeValuesPost(
    saveDeviceAttributeValuesInput?: Array<SaveDeviceAttributeValuesInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotBatchSaveDeviceAttributeValuesPost(saveDeviceAttributeValuesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量导入设备，如果设备已存在，则会更新 Batch import devices, if some devices are already existed, they will be updated  每个设备的Attribute属性的key需要保持一致
   * @summary 批量导入设备 Batch import devices
   * @param {Array<AddDeviceInput>} [addDeviceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotBulkImportDevicesPost(
    addDeviceInput?: Array<AddDeviceInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotBulkImportDevicesPost(addDeviceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据设备ID列表删除设备 Delete devices by ids
   * @param {DeleteDevicesInput} [deleteDevicesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeleteDevicesPost(
    deleteDevicesInput?: DeleteDevicesInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeleteDevicesPost(deleteDevicesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
   * @summary 根据设备IDs批量查询设备详情 Get device details in batches by device IDs
   * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceBatchDetailsPost(
    queryDeviceDetailInput?: QueryDeviceDetailInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceBatchDetailsPost(queryDeviceDetailInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据设备ID查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
   * @summary 根据设备ID查询设备详情 Get device details by device ID
   * @param {string} [id] 设备ID device id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceDetailsGet(id?: string, options?: AxiosRequestConfig) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceDetailsGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据设备ID查询设备指标信息 Get device indicators by device ids
   * @param {Array<string>} deviceIds 设备Id列表 device ids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceKeysGet(deviceIds: Array<string>, options?: AxiosRequestConfig) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceKeysGet(deviceIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 按设备属性查询设备
   * @param {DeviceInfosInputWithAttr} [deviceInfosInputWithAttr]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceListAttrPost(
    deviceInfosInputWithAttr?: DeviceInfosInputWithAttr,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceListAttrPost(deviceInfosInputWithAttr, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
   * @summary 分页查询设备列表 Get device list: pagination query of devices
   * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
   * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
   * @param {string} [type] 设备类型
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {string} [keyWords]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceListGet(
    sortProperty?: number,
    sortOrder?: number,
    type?: string,
    pageIndex?: number,
    pageSize?: number,
    keyWords?: string,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceListGet(sortProperty, sortOrder, type, pageIndex, pageSize, keyWords, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 分页获取设备列表，结果可以基于某个属性进行排序，也可以基于某个关键词进行过滤 Get device list with pagination, results can be sorted by a certain property and keywords can be used to filter the results.
   * @summary 分页查询设备列表 Get device list: pagination query of devices
   * @param {number} [sortProperty] 用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,
   * @param {number} [sortOrder] 排序的方式 sort order:  0-ASC,  1-DESC
   * @param {string} [type] 设备类型
   * @param {number} [pageIndex]
   * @param {number} [pageSize]
   * @param {string} [keyWords]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotDeviceListWithoutIndicatorGet(
    sortProperty?: number,
    sortOrder?: number,
    type?: string,
    pageIndex?: number,
    pageSize?: number,
    keyWords?: string,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotDeviceListWithoutIndicatorGet(
        sortProperty,
        sortOrder,
        type,
        pageIndex,
        pageSize,
        keyWords,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 通过属性的键查询设备属性值，如果传入的属性键为空，则返回所有的属性值 Get device attributes through attribute keys, if attribute keys is empty, it will return all the attributes
   * @summary 查询设备的属性 Get device attributes
   * @param {GetAttributesInput} [getAttributesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotQueryDeviceAttributesPost(
    getAttributesInput?: GetAttributesInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotQueryDeviceAttributesPost(getAttributesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加或更新设备的属性值 Add or modify device customized attributes
   * @param {SaveDeviceAttributeValuesInput} [saveDeviceAttributeValuesInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotSaveDeviceAttributeValuesPost(
    saveDeviceAttributeValuesInput?: SaveDeviceAttributeValuesInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotSaveDeviceAttributeValuesPost(saveDeviceAttributeValuesInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新一个设备 Update a device
   * @param {UpdateDeviceInput} [updateDeviceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV1IotUpdateDevicePost(
    updateDeviceInput?: UpdateDeviceInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV1IotUpdateDevicePost(updateDeviceInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据设备IDs批量查询设备详情，包括设备的属性 Get detailed information of a device including attributes by device ID.
   * @summary 根据设备IDs批量查询设备详情(多线程) Get device details in batches by device IDs
   * @param {QueryDeviceDetailInput} [queryDeviceDetailInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceApi
   */
  public apiV2IotDeviceBatchDetailsPost(
    queryDeviceDetailInput?: QueryDeviceDetailInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceApiFp(this.configuration)
      .apiV2IotDeviceBatchDetailsPost(queryDeviceDetailInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
