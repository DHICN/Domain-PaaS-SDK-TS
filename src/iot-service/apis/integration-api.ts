/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { InPointMap } from '../models'
// @ts-ignore
import { PointMapAssemblyInfo } from '../models'
// @ts-ignore
import { SaveOutPointMapInput } from '../models'
// @ts-ignore
import { SearchInOutPointMapAssemblyInput } from '../models'
// @ts-ignore
import { StringListResult } from '../models'
/**
 * IntegrationApi - axios parameter creator
 * @export
 */
export const IntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 删除输入点位映射关系
     * @param {string} [templateId]
     * @param {string} [inPointMapId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet: async (
      templateId?: string,
      inPointMapId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/delete-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (inPointMapId !== undefined) {
        localVarQueryParameter['InPointMapId'] = inPointMapId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取输入输出点位映射信息
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationGetInoutPointMapInfoGet: async (
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量导入边界映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportBoundarymapConfigExcelPost: async (
      templateId?: string,
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/import-boundarymap-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量导入资产设备指标excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost: async (
      templateId?: string,
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/import-iot-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量导入点位映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportPointmapConfigExcelPost: async (
      templateId?: string,
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/import-pointmap-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存模型输入点位映射关系
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost: async (
      inPointMap?: InPointMap,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        inPointMap,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存模型输出点位映射关系
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost: async (
      saveOutPointMapInput?: SaveOutPointMapInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-out-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveOutPointMapInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过设备、指标,检索:实测指标--与--模型输出点位,映射关系;实测指标--与--模型边界点位,映射关系  Through equipment and indicator, search: measured indicator -- and -- model point, mapping relationship;   Measured indicator -- and -- model boundary point, mapping relationship
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSearchGetInoutPointMapInfoPost: async (
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/search/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchInOutPointMapAssemblyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntegrationApi - functional programming interface
 * @export
 */
export const IntegrationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntegrationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 删除输入点位映射关系
     * @param {string} [templateId]
     * @param {string} [inPointMapId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationDeleteInPointMapGet(
      templateId?: string,
      inPointMapId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationDeleteInPointMapGet(
          templateId,
          inPointMapId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取输入输出点位映射信息
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationGetInoutPointMapInfoGet(
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapAssemblyInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationGetInoutPointMapInfoGet(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量导入边界映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationImportBoundarymapConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationImportBoundarymapConfigExcelPost(
          templateId,
          excelFile,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量导入资产设备指标excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationImportIotConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationImportIotConfigExcelPost(
          templateId,
          excelFile,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量导入点位映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationImportPointmapConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationImportPointmapConfigExcelPost(
          templateId,
          excelFile,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存模型输入点位映射关系
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveInPointMapPost(
      inPointMap?: InPointMap,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存模型输出点位映射关系
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveOutPointMapPost(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveOutPointMapPost(
          saveOutPointMapInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过设备、指标,检索:实测指标--与--模型输出点位,映射关系;实测指标--与--模型边界点位,映射关系  Through equipment and indicator, search: measured indicator -- and -- model point, mapping relationship;   Measured indicator -- and -- model boundary point, mapping relationship
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSearchGetInoutPointMapInfoPost(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapAssemblyInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSearchGetInoutPointMapInfoPost(
          searchInOutPointMapAssemblyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntegrationApi - factory interface
 * @export
 */
export const IntegrationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IntegrationApiFp(configuration)
  return {
    /**
     *
     * @summary 删除输入点位映射关系
     * @param {string} [templateId]
     * @param {string} [inPointMapId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet(
      templateId?: string,
      inPointMapId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotIntegrationDeleteInPointMapGet(templateId, inPointMapId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取输入输出点位映射信息
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationGetInoutPointMapInfoGet(
      templateId?: string,
      options?: any,
    ): AxiosPromise<PointMapAssemblyInfo> {
      return localVarFp
        .apiV1IotIntegrationGetInoutPointMapInfoGet(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量导入边界映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportBoundarymapConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1IotIntegrationImportBoundarymapConfigExcelPost(templateId, excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量导入资产设备指标excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1IotIntegrationImportIotConfigExcelPost(templateId, excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量导入点位映射excel
     * @param {string} [templateId]
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportPointmapConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1IotIntegrationImportPointmapConfigExcelPost(templateId, excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存模型输入点位映射关系
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost(
      inPointMap?: InPointMap,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存模型输出点位映射关系
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotIntegrationSaveOutPointMapPost(saveOutPointMapInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过设备、指标,检索:实测指标--与--模型输出点位,映射关系;实测指标--与--模型边界点位,映射关系  Through equipment and indicator, search: measured indicator -- and -- model point, mapping relationship;   Measured indicator -- and -- model boundary point, mapping relationship
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSearchGetInoutPointMapInfoPost(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: any,
    ): AxiosPromise<PointMapAssemblyInfo> {
      return localVarFp
        .apiV1IotIntegrationSearchGetInoutPointMapInfoPost(
          searchInOutPointMapAssemblyInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntegrationApi - object-oriented interface
 * @export
 * @class IntegrationApi
 * @extends {BaseAPI}
 */
export class IntegrationApi extends BaseAPI {
  /**
   *
   * @summary 删除输入点位映射关系
   * @param {string} [templateId]
   * @param {string} [inPointMapId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationDeleteInPointMapGet(
    templateId?: string,
    inPointMapId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationDeleteInPointMapGet(templateId, inPointMapId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取输入输出点位映射信息
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationGetInoutPointMapInfoGet(
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationGetInoutPointMapInfoGet(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量导入边界映射excel
   * @param {string} [templateId]
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationImportBoundarymapConfigExcelPost(
    templateId?: string,
    excelFile?: any,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationImportBoundarymapConfigExcelPost(templateId, excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量导入资产设备指标excel
   * @param {string} [templateId]
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationImportIotConfigExcelPost(
    templateId?: string,
    excelFile?: any,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationImportIotConfigExcelPost(templateId, excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量导入点位映射excel
   * @param {string} [templateId]
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationImportPointmapConfigExcelPost(
    templateId?: string,
    excelFile?: any,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationImportPointmapConfigExcelPost(templateId, excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存模型输入点位映射关系
   * @param {InPointMap} [inPointMap]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveInPointMapPost(
    inPointMap?: InPointMap,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存模型输出点位映射关系
   * @param {SaveOutPointMapInput} [saveOutPointMapInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveOutPointMapPost(
    saveOutPointMapInput?: SaveOutPointMapInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveOutPointMapPost(saveOutPointMapInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过设备、指标,检索:实测指标--与--模型输出点位,映射关系;实测指标--与--模型边界点位,映射关系  Through equipment and indicator, search: measured indicator -- and -- model point, mapping relationship;   Measured indicator -- and -- model boundary point, mapping relationship
   * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSearchGetInoutPointMapInfoPost(
    searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSearchGetInoutPointMapInfoPost(searchInOutPointMapAssemblyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
