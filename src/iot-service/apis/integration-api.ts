/* eslint-disable */
/**
 * IoT服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { InPointMap } from '../models'
// @ts-ignore
import { PointMapInfo } from '../models'
// @ts-ignore
import { SaveOutPointMapInput } from '../models'
// @ts-ignore
import { SearchInOutPointMapAssemblyInput } from '../models'
// @ts-ignore
import { StringListResult } from '../models'
/**
 * IntegrationApi - axios parameter creator
 * @export
 */
export const IntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet: async (
      templateId?: string,
      inPointMapId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/delete-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (inPointMapId !== undefined) {
        localVarQueryParameter['InPointMapId'] = inPointMapId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet_1: async (
      templateId?: string,
      inPointMapId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/delete-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (inPointMapId !== undefined) {
        localVarQueryParameter['InPointMapId'] = inPointMapId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationExportIotConfigExcelPost: async (
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/export-iot-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationExportIotConfigExcelPost_2: async (
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/export-iot-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost: async (
      templateId?: string,
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/import-iot-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost_3: async (
      templateId?: string,
      excelFile?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/import-iot-config-excel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (excelFile !== undefined) {
        localVarFormParams.append('excelFile', excelFile as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost: async (
      inPointMap?: InPointMap,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        inPointMap,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost_4: async (
      inPointMap?: InPointMap,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-in-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        inPointMap,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost: async (
      saveOutPointMapInput?: SaveOutPointMapInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-out-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveOutPointMapInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost_5: async (
      saveOutPointMapInput?: SaveOutPointMapInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/iot/integration/save-out-point-map`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveOutPointMapInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationGetInoutPointMapInfoGet: async (
      templateId?: string,
      keyword?: string,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/integration/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationGetInoutPointMapInfoGet_6: async (
      templateId?: string,
      keyword?: string,
      limit?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/integration/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      if (keyword !== undefined) {
        localVarQueryParameter['keyword'] = keyword
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationSearchGetInoutPointMapInfoPost: async (
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/integration/search/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchInOutPointMapAssemblyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7: async (
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/iot/integration/search/get-inout-point-map-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchInOutPointMapAssemblyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * IntegrationApi - functional programming interface
 * @export
 */
export const IntegrationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IntegrationApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationDeleteInPointMapGet(
      templateId?: string,
      inPointMapId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationDeleteInPointMapGet(
          templateId,
          inPointMapId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationDeleteInPointMapGet_1(
      templateId?: string,
      inPointMapId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationDeleteInPointMapGet_1(
          templateId,
          inPointMapId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationExportIotConfigExcelPost(
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationExportIotConfigExcelPost(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationExportIotConfigExcelPost_2(
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationExportIotConfigExcelPost_2(
          templateId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationImportIotConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationImportIotConfigExcelPost(
          templateId,
          excelFile,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationImportIotConfigExcelPost_3(
      templateId?: string,
      excelFile?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationImportIotConfigExcelPost_3(
          templateId,
          excelFile,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveInPointMapPost(
      inPointMap?: InPointMap,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveInPointMapPost_4(
      inPointMap?: InPointMap,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveInPointMapPost_4(inPointMap, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveOutPointMapPost(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveOutPointMapPost(
          saveOutPointMapInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1IotIntegrationSaveOutPointMapPost_5(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1IotIntegrationSaveOutPointMapPost_5(
          saveOutPointMapInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotIntegrationGetInoutPointMapInfoGet(
      templateId?: string,
      keyword?: string,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IotIntegrationGetInoutPointMapInfoGet(
          templateId,
          keyword,
          limit,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotIntegrationGetInoutPointMapInfoGet_6(
      templateId?: string,
      keyword?: string,
      limit?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IotIntegrationGetInoutPointMapInfoGet_6(
          templateId,
          keyword,
          limit,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotIntegrationSearchGetInoutPointMapInfoPost(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IotIntegrationSearchGetInoutPointMapInfoPost(
          searchInOutPointMapAssemblyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointMapInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
          searchInOutPointMapAssemblyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * IntegrationApi - factory interface
 * @export
 */
export const IntegrationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = IntegrationApiFp(configuration)
  return {
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet(
      templateId?: string,
      inPointMapId?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationDeleteInPointMapGet(templateId, inPointMapId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
     * @summary 删除输入点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [inPointMapId] 点位映射关系id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationDeleteInPointMapGet_1(
      templateId?: string,
      inPointMapId?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationDeleteInPointMapGet_1(templateId, inPointMapId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationExportIotConfigExcelPost(
      templateId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotIntegrationExportIotConfigExcelPost(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
     * @summary 导出资产设备指标excel文件
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationExportIotConfigExcelPost_2(
      templateId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1IotIntegrationExportIotConfigExcelPost_2(templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost(
      templateId?: string,
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1IotIntegrationImportIotConfigExcelPost(templateId, excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
     * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
     * @param {string} [templateId] 模板方案id
     * @param {any} [excelFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationImportIotConfigExcelPost_3(
      templateId?: string,
      excelFile?: any,
      options?: any,
    ): AxiosPromise<StringListResult> {
      return localVarFp
        .apiV1IotIntegrationImportIotConfigExcelPost_3(templateId, excelFile, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost(
      inPointMap?: InPointMap,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
     * @summary 保存模型输入点位映射关系【内部接口】
     * @param {InPointMap} [inPointMap]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveInPointMapPost_4(
      inPointMap?: InPointMap,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationSaveInPointMapPost_4(inPointMap, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationSaveOutPointMapPost(saveOutPointMapInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
     * @summary 保存模型输出点位映射关系【内部接口】
     * @param {SaveOutPointMapInput} [saveOutPointMapInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IotIntegrationSaveOutPointMapPost_5(
      saveOutPointMapInput?: SaveOutPointMapInput,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1IotIntegrationSaveOutPointMapPost_5(saveOutPointMapInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationGetInoutPointMapInfoGet(
      templateId?: string,
      keyword?: string,
      limit?: number,
      options?: any,
    ): AxiosPromise<PointMapInfo> {
      return localVarFp
        .apiV2IotIntegrationGetInoutPointMapInfoGet(templateId, keyword, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 获取模板方案模型的输入输出点位映射关系
     * @param {string} [templateId] 模板方案id
     * @param {string} [keyword] 查询参数
     * @param {number} [limit] 查询记录条数,默认100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationGetInoutPointMapInfoGet_6(
      templateId?: string,
      keyword?: string,
      limit?: number,
      options?: any,
    ): AxiosPromise<PointMapInfo> {
      return localVarFp
        .apiV2IotIntegrationGetInoutPointMapInfoGet_6(templateId, keyword, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationSearchGetInoutPointMapInfoPost(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: any,
    ): AxiosPromise<PointMapInfo> {
      return localVarFp
        .apiV2IotIntegrationSearchGetInoutPointMapInfoPost(
          searchInOutPointMapAssemblyInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
     * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
     * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
      searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
      options?: any,
    ): AxiosPromise<PointMapInfo> {
      return localVarFp
        .apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
          searchInOutPointMapAssemblyInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * IntegrationApi - object-oriented interface
 * @export
 * @class IntegrationApi
 * @extends {BaseAPI}
 */
export class IntegrationApi extends BaseAPI {
  /**
   * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
   * @summary 删除输入点位映射关系
   * @param {string} [templateId] 模板方案id
   * @param {string} [inPointMapId] 点位映射关系id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationDeleteInPointMapGet(
    templateId?: string,
    inPointMapId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationDeleteInPointMapGet(templateId, inPointMapId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：删除输入点位映射  使用场景：删除模板方案中指定ID的映射信息，该ID可通过接口/api/v2/iot/integration/search/get-inout-point-map-info或接口/api/v2/iot/integration/get-inout-point-map-info先查询后删除  输入：模板方案Id、点位映射关系Id  输出：无
   * @summary 删除输入点位映射关系
   * @param {string} [templateId] 模板方案id
   * @param {string} [inPointMapId] 点位映射关系id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationDeleteInPointMapGet_1(
    templateId?: string,
    inPointMapId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationDeleteInPointMapGet_1(templateId, inPointMapId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
   * @summary 导出资产设备指标excel文件
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationExportIotConfigExcelPost(
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationExportIotConfigExcelPost(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：资产、设备、指标、导出  使用场景：查看所有已经配置的监测点信息，可将系统中已添加的资产信息、设备信息、指标信息等配置信息查询并导出成excel文件；  想要修改配置信息可导出文件后在文件中修改指定信息后保存，并通过接口/api/v1/iot/integration/import-iot-config-excel上传。      输入：模板方案id  输出：导入成功或失败的消息信息
   * @summary 导出资产设备指标excel文件
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationExportIotConfigExcelPost_2(
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationExportIotConfigExcelPost_2(templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
   * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
   * @param {string} [templateId] 模板方案id
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationImportIotConfigExcelPost(
    templateId?: string,
    excelFile?: any,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationImportIotConfigExcelPost(templateId, excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：资产、设备、指标、导入  使用场景：根据提供的模板excel，根据模板模型以及应用场景将资产信息、设备信息、指标信息补充完整，调用接口则可以保存配置信息到指定的模板方案下，通常在创建模板方案并启用后调用该接口；  若之前已上传过资产设备指标配置信息，则可先调用接口/api/v1/iot/integration/export-iot-config-excel将数据导出后，进行数据修改或补充，在调用接口上传。  输入：资产设备指标excel文件、模板方案id  输出：导入成功或失败的消息信息
   * @summary 批量导入资产设备指标excel文件,用于初始化指定模板方案的资产设备指标等系统配置信息，需提前根据实际模板模型将表格补充完整
   * @param {string} [templateId] 模板方案id
   * @param {any} [excelFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationImportIotConfigExcelPost_3(
    templateId?: string,
    excelFile?: any,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationImportIotConfigExcelPost_3(templateId, excelFile, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
   * @summary 保存模型输入点位映射关系【内部接口】
   * @param {InPointMap} [inPointMap]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveInPointMapPost(
    inPointMap?: InPointMap,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveInPointMapPost(inPointMap, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：输入点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息、数据来源  输出：无
   * @summary 保存模型输入点位映射关系【内部接口】
   * @param {InPointMap} [inPointMap]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveInPointMapPost_4(
    inPointMap?: InPointMap,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveInPointMapPost_4(inPointMap, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
   * @summary 保存模型输出点位映射关系【内部接口】
   * @param {SaveOutPointMapInput} [saveOutPointMapInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveOutPointMapPost(
    saveOutPointMapInput?: SaveOutPointMapInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveOutPointMapPost(saveOutPointMapInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：输出点位映射  使用场景：内部使用  输入：模板方案Id、设备指标、模型中的点位信息  输出：无
   * @summary 保存模型输出点位映射关系【内部接口】
   * @param {SaveOutPointMapInput} [saveOutPointMapInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV1IotIntegrationSaveOutPointMapPost_5(
    saveOutPointMapInput?: SaveOutPointMapInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV1IotIntegrationSaveOutPointMapPost_5(saveOutPointMapInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
   * @summary 获取模板方案模型的输入输出点位映射关系
   * @param {string} [templateId] 模板方案id
   * @param {string} [keyword] 查询参数
   * @param {number} [limit] 查询记录条数,默认100
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV2IotIntegrationGetInoutPointMapInfoGet(
    templateId?: string,
    keyword?: string,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV2IotIntegrationGetInoutPointMapInfoGet(templateId, keyword, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：点位映射、指标、模型输出点位、模型边界点位  使用场景：查询该模板方案下所有的实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系，可根据指标名称、设备名称、模型点位、边界名称来查询数据，其中任意字段匹配即任务满足条件。默认只返回前100条数据  输入：模板方案id、查询参数  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
   * @summary 获取模板方案模型的输入输出点位映射关系
   * @param {string} [templateId] 模板方案id
   * @param {string} [keyword] 查询参数
   * @param {number} [limit] 查询记录条数,默认100
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV2IotIntegrationGetInoutPointMapInfoGet_6(
    templateId?: string,
    keyword?: string,
    limit?: number,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV2IotIntegrationGetInoutPointMapInfoGet_6(templateId, keyword, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
   * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
   * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV2IotIntegrationSearchGetInoutPointMapInfoPost(
    searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV2IotIntegrationSearchGetInoutPointMapInfoPost(searchInOutPointMapAssemblyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：点位映射、实测指标与模型边界点位映射关系、查询  使用场景：查询指定方案库中指定的设备指标列表的实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系, 和接口/api/v2/iot/integration/get-inout-point-map-info接口的区别在于有传参筛选条件  输入：方案类库Id、设备指标列表  输出：实测指标与模型输出点位映射关系、实测指标与模型边界点位映射关系
   * @summary 通过设备、指标、检索实测指标与模型输出点位映射关系以及实测指标与模型边界点位映射关系
   * @param {SearchInOutPointMapAssemblyInput} [searchInOutPointMapAssemblyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IntegrationApi
   */
  public apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
    searchInOutPointMapAssemblyInput?: SearchInOutPointMapAssemblyInput,
    options?: AxiosRequestConfig,
  ) {
    return IntegrationApiFp(this.configuration)
      .apiV2IotIntegrationSearchGetInoutPointMapInfoPost_7(
        searchInOutPointMapAssemblyInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
