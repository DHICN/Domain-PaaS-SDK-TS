/* eslint-disable */
/**
 * 模型计算服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { CalculateLogsOutput } from '../models'
// @ts-ignore
import { CalculateStatusOutput } from '../models'
// @ts-ignore
import { CancelResult } from '../models'
// @ts-ignore
import { ModelDriverDto } from '../models'
// @ts-ignore
import { ModelOperationResult } from '../models'
// @ts-ignore
import { ModelTypePara } from '../models'
// @ts-ignore
import { ResetResult } from '../models'
// @ts-ignore
import { ScenarioIds } from '../models'
// @ts-ignore
import { ScenarioModelMessage } from '../models'
// @ts-ignore
import { ScenarioModelMessageInput } from '../models'
// @ts-ignore
import { ScenarioModelStatusMessage } from '../models'
// @ts-ignore
import { UpdateRecordInput } from '../models'
// @ts-ignore
import { UpdateStatusInput } from '../models'
/**
 * ModelRunApi - axios parameter creator
 * @export
 */
export const ModelRunApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunCancelModelRunPost: async (
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/CancelModelRun`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioModelMessageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunCancelModelRunPost_1: async (
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/CancelModelRun`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioModelMessageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetQueueMessageCountPost: async (
      modelTypePara?: ModelTypePara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetQueueMessageCount`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelTypePara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetQueueMessageCountPost_2: async (
      modelTypePara?: ModelTypePara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetQueueMessageCount`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelTypePara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetRuningScenarioGet: async (
      projectName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetRuningScenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['projectName'] = projectName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetRuningScenarioGet_3: async (
      projectName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetRuningScenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['projectName'] = projectName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetScenarioesStatusPost: async (
      scenarioIds?: ScenarioIds,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetScenarioesStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioIds,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetScenarioesStatusPost_4: async (
      scenarioIds?: ScenarioIds,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/GetScenarioesStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioIds,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryComputeResourceInfoPost: async (
      modelTypePara?: ModelTypePara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryComputeResourceInfo`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelTypePara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryComputeResourceInfoPost_5: async (
      modelTypePara?: ModelTypePara,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryComputeResourceInfo`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelTypePara,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryModelRunStatusGet: async (
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryModelRunStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['ProjectName'] = projectName
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (serialNo !== undefined) {
        localVarQueryParameter['SerialNo'] = serialNo
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryModelRunStatusGet_6: async (
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryModelRunStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['ProjectName'] = projectName
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (serialNo !== undefined) {
        localVarQueryParameter['SerialNo'] = serialNo
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryQueuesGet: async (
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryQueues`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['ProjectName'] = projectName
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (modelType !== undefined) {
        localVarQueryParameter['ModelType'] = modelType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryQueuesGet_7: async (
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/QueryQueues`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (projectName !== undefined) {
        localVarQueryParameter['ProjectName'] = projectName
      }

      if (scenarioId !== undefined) {
        localVarQueryParameter['ScenarioId'] = scenarioId
      }

      if (modelType !== undefined) {
        localVarQueryParameter['ModelType'] = modelType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunRunModelPost: async (
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/RunModel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioModelMessageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunRunModelPost_8: async (
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/RunModel`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scenarioModelMessageInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateLogsGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CalculateLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateLogsGet_9: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CalculateLogs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateStatusPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateStatusPost_10: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunGet: async (
      queueId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CancelModelRun`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (queueId !== undefined) {
        localVarQueryParameter['queueId'] = queueId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunGet_11: async (
      queueId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CancelModelRun`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (queueId !== undefined) {
        localVarQueryParameter['queueId'] = queueId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunThroughScenarioIdsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CancelModelRun/Through/ScenarioIds`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunThroughScenarioIdsPost_12: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/CancelModelRun/Through/ScenarioIds`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2ResetCalculateStatusPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/ResetCalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2ResetCalculateStatusPost_13: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/ResetCalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateCalculateStatusPost: async (
      updateStatusInput?: UpdateStatusInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/UpdateCalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateStatusInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateCalculateStatusPost_14: async (
      updateStatusInput?: UpdateStatusInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/UpdateCalculateStatus`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateStatusInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateRecordPost: async (
      updateRecordInput?: UpdateRecordInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/UpdateRecord`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRecordInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateRecordPost_15: async (
      updateRecordInput?: UpdateRecordInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/ModelRun/v2/UpdateRecord`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRecordInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModelRunApi - functional programming interface
 * @export
 */
export const ModelRunApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModelRunApiAxiosParamCreator(configuration)
  return {
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async modelRunCancelModelRunPost(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunCancelModelRunPost(
        scenarioModelMessageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async modelRunCancelModelRunPost_1(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunCancelModelRunPost_1(
        scenarioModelMessageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetQueueMessageCountPost(
      modelTypePara?: ModelTypePara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetQueueMessageCountPost(
        modelTypePara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetQueueMessageCountPost_2(
      modelTypePara?: ModelTypePara,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetQueueMessageCountPost_2(
        modelTypePara,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetRuningScenarioGet(
      projectName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScenarioModelMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetRuningScenarioGet(
        projectName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetRuningScenarioGet_3(
      projectName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScenarioModelMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetRuningScenarioGet_3(
        projectName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetScenarioesStatusPost(
      scenarioIds?: ScenarioIds,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScenarioModelStatusMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetScenarioesStatusPost(
        scenarioIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunGetScenarioesStatusPost_4(
      scenarioIds?: ScenarioIds,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScenarioModelStatusMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunGetScenarioesStatusPost_4(
        scenarioIds,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryComputeResourceInfoPost(
      modelTypePara?: ModelTypePara,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunQueryComputeResourceInfoPost(modelTypePara, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryComputeResourceInfoPost_5(
      modelTypePara?: ModelTypePara,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunQueryComputeResourceInfoPost_5(
          modelTypePara,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryModelRunStatusGet(
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioModelStatusMessage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunQueryModelRunStatusGet(
        projectName,
        scenarioId,
        serialNo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryModelRunStatusGet_6(
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioModelStatusMessage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunQueryModelRunStatusGet_6(
        projectName,
        scenarioId,
        serialNo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryQueuesGet(
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDriverDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunQueryQueuesGet(
        projectName,
        scenarioId,
        modelType,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunQueryQueuesGet_7(
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelDriverDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunQueryQueuesGet_7(
        projectName,
        scenarioId,
        modelType,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunRunModelPost(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunRunModelPost(
        scenarioModelMessageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunRunModelPost_8(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunRunModelPost_8(
        scenarioModelMessageInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CalculateLogsGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateLogsOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CalculateLogsGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CalculateLogsGet_9(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculateLogsOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CalculateLogsGet_9(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CalculateStatusPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalculateStatusOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CalculateStatusPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CalculateStatusPost_10(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalculateStatusOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CalculateStatusPost_10(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async modelRunV2CancelModelRunGet(
      queueId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CancelModelRunGet(
        queueId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async modelRunV2CancelModelRunGet_11(
      queueId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelOperationResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2CancelModelRunGet_11(
        queueId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CancelModelRunThroughScenarioIdsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunV2CancelModelRunThroughScenarioIdsPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2CancelModelRunThroughScenarioIdsPost_12(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunV2CancelModelRunThroughScenarioIdsPost_12(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2ResetCalculateStatusPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2ResetCalculateStatusPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2ResetCalculateStatusPost_13(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResetResult>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunV2ResetCalculateStatusPost_13(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2UpdateCalculateStatusPost(
      updateStatusInput?: UpdateStatusInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2UpdateCalculateStatusPost(
        updateStatusInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2UpdateCalculateStatusPost_14(
      updateStatusInput?: UpdateStatusInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.modelRunV2UpdateCalculateStatusPost_14(
          updateStatusInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2UpdateRecordPost(
      updateRecordInput?: UpdateRecordInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2UpdateRecordPost(
        updateRecordInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelRunV2UpdateRecordPost_15(
      updateRecordInput?: UpdateRecordInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.modelRunV2UpdateRecordPost_15(
        updateRecordInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ModelRunApi - factory interface
 * @export
 */
export const ModelRunApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModelRunApiFp(configuration)
  return {
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunCancelModelRunPost(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunCancelModelRunPost(scenarioModelMessageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
     * @summary 【废弃】取消模型计算 Cancel model run
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunCancelModelRunPost_1(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunCancelModelRunPost_1(scenarioModelMessageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetQueueMessageCountPost(
      modelTypePara?: ModelTypePara,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .modelRunGetQueueMessageCountPost(modelTypePara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取当前模型计算队列的长度 Get current model running queue length
     * @summary 获取计算队列的长度 Get model running queue length
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetQueueMessageCountPost_2(
      modelTypePara?: ModelTypePara,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .modelRunGetQueueMessageCountPost_2(modelTypePara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetRuningScenarioGet(
      projectName?: string,
      options?: any,
    ): AxiosPromise<Array<ScenarioModelMessage>> {
      return localVarFp
        .modelRunGetRuningScenarioGet(projectName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询正在计算的方案信息 Get scenario information which is running
     * @param {string} [projectName] 项目名称 project name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetRuningScenarioGet_3(
      projectName?: string,
      options?: any,
    ): AxiosPromise<Array<ScenarioModelMessage>> {
      return localVarFp
        .modelRunGetRuningScenarioGet_3(projectName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetScenarioesStatusPost(
      scenarioIds?: ScenarioIds,
      options?: any,
    ): AxiosPromise<Array<ScenarioModelStatusMessage>> {
      return localVarFp
        .modelRunGetScenarioesStatusPost(scenarioIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
     * @summary 获取方案的状态 Get scenario’s status
     * @param {ScenarioIds} [scenarioIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunGetScenarioesStatusPost_4(
      scenarioIds?: ScenarioIds,
      options?: any,
    ): AxiosPromise<Array<ScenarioModelStatusMessage>> {
      return localVarFp
        .modelRunGetScenarioesStatusPost_4(scenarioIds, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryComputeResourceInfoPost(
      modelTypePara?: ModelTypePara,
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .modelRunQueryComputeResourceInfoPost(modelTypePara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
     * @summary 查询计算资源信息 Query compute resource info
     * @param {ModelTypePara} [modelTypePara]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryComputeResourceInfoPost_5(
      modelTypePara?: ModelTypePara,
      options?: any,
    ): AxiosPromise<{ [key: string]: string }> {
      return localVarFp
        .modelRunQueryComputeResourceInfoPost_5(modelTypePara, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryModelRunStatusGet(
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options?: any,
    ): AxiosPromise<ScenarioModelStatusMessage> {
      return localVarFp
        .modelRunQueryModelRunStatusGet(projectName, scenarioId, serialNo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
     * @summary 查询模型计算状态 Query model running status
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案ID scenario\&#39;s id
     * @param {string} [serialNo] 序列ID serial no
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryModelRunStatusGet_6(
      projectName?: string,
      scenarioId?: string,
      serialNo?: string,
      options?: any,
    ): AxiosPromise<ScenarioModelStatusMessage> {
      return localVarFp
        .modelRunQueryModelRunStatusGet_6(projectName, scenarioId, serialNo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryQueuesGet(
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options?: any,
    ): AxiosPromise<Array<ModelDriverDto>> {
      return localVarFp
        .modelRunQueryQueuesGet(projectName, scenarioId, modelType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取排队情况
     * @param {string} [projectName] 项目名称 project name
     * @param {string} [scenarioId] 方案Id
     * @param {string} [modelType] 模型类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunQueryQueuesGet_7(
      projectName?: string,
      scenarioId?: string,
      modelType?: string,
      options?: any,
    ): AxiosPromise<Array<ModelDriverDto>> {
      return localVarFp
        .modelRunQueryQueuesGet_7(projectName, scenarioId, modelType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunRunModelPost(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunRunModelPost(scenarioModelMessageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
     * @summary [第一步]驱动计算 Start to run a model
     * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunRunModelPost_8(
      scenarioModelMessageInput?: ScenarioModelMessageInput,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunRunModelPost_8(scenarioModelMessageInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateLogsGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<CalculateLogsOutput> {
      return localVarFp
        .modelRunV2CalculateLogsGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [第三步]获取方案计算日志
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateLogsGet_9(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<CalculateLogsOutput> {
      return localVarFp
        .modelRunV2CalculateLogsGet_9(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateStatusPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<CalculateStatusOutput>> {
      return localVarFp
        .modelRunV2CalculateStatusPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CalculateStatusPost_10(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<CalculateStatusOutput>> {
      return localVarFp
        .modelRunV2CalculateStatusPost_10(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunGet(
      queueId?: string,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunV2CancelModelRunGet(queueId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 取消计算通过queueId Cancelling the computation through queueId.
     * @summary 取消计算通过queueId Cancel model run
     * @param {string} [queueId]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunGet_11(
      queueId?: string,
      options?: any,
    ): AxiosPromise<ModelOperationResult> {
      return localVarFp
        .modelRunV2CancelModelRunGet_11(queueId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunThroughScenarioIdsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<CancelResult> {
      return localVarFp
        .modelRunV2CancelModelRunThroughScenarioIdsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 取消计算通过scenarioId Cancelling the computation through queueId.
     * @summary 取消计算通过scenarioId Cancel model run
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2CancelModelRunThroughScenarioIdsPost_12(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<CancelResult> {
      return localVarFp
        .modelRunV2CancelModelRunThroughScenarioIdsPost_12(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2ResetCalculateStatusPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<ResetResult> {
      return localVarFp
        .modelRunV2ResetCalculateStatusPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2ResetCalculateStatusPost_13(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<ResetResult> {
      return localVarFp
        .modelRunV2ResetCalculateStatusPost_13(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateCalculateStatusPost(
      updateStatusInput?: UpdateStatusInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .modelRunV2UpdateCalculateStatusPost(updateStatusInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过方案ID来更新计算状态
     * @param {UpdateStatusInput} [updateStatusInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateCalculateStatusPost_14(
      updateStatusInput?: UpdateStatusInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .modelRunV2UpdateCalculateStatusPost_14(updateStatusInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateRecordPost(
      updateRecordInput?: UpdateRecordInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .modelRunV2UpdateRecordPost(updateRecordInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过方案ID来更新minIO地址（后端内部调用）
     * @param {UpdateRecordInput} [updateRecordInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelRunV2UpdateRecordPost_15(
      updateRecordInput?: UpdateRecordInput,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .modelRunV2UpdateRecordPost_15(updateRecordInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModelRunApi - object-oriented interface
 * @export
 * @class ModelRunApi
 * @extends {BaseAPI}
 */
export class ModelRunApi extends BaseAPI {
  /**
   * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
   * @summary 【废弃】取消模型计算 Cancel model run
   * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunCancelModelRunPost(
    scenarioModelMessageInput?: ScenarioModelMessageInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunCancelModelRunPost(scenarioModelMessageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 取消计算方案模型的任务 Cancel the task to run the model of a scenario.
   * @summary 【废弃】取消模型计算 Cancel model run
   * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunCancelModelRunPost_1(
    scenarioModelMessageInput?: ScenarioModelMessageInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunCancelModelRunPost_1(scenarioModelMessageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取当前模型计算队列的长度 Get current model running queue length
   * @summary 获取计算队列的长度 Get model running queue length
   * @param {ModelTypePara} [modelTypePara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetQueueMessageCountPost(
    modelTypePara?: ModelTypePara,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetQueueMessageCountPost(modelTypePara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取当前模型计算队列的长度 Get current model running queue length
   * @summary 获取计算队列的长度 Get model running queue length
   * @param {ModelTypePara} [modelTypePara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetQueueMessageCountPost_2(
    modelTypePara?: ModelTypePara,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetQueueMessageCountPost_2(modelTypePara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询正在计算的方案信息 Get scenario information which is running
   * @param {string} [projectName] 项目名称 project name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetRuningScenarioGet(projectName?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetRuningScenarioGet(projectName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询正在计算的方案信息 Get scenario information which is running
   * @param {string} [projectName] 项目名称 project name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetRuningScenarioGet_3(projectName?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetRuningScenarioGet_3(projectName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
   * @summary 获取方案的状态 Get scenario’s status
   * @param {ScenarioIds} [scenarioIds]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetScenarioesStatusPost(scenarioIds?: ScenarioIds, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetScenarioesStatusPost(scenarioIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 批量获取方案的计算状态 Get scenarios’s model running status in batch mode
   * @summary 获取方案的状态 Get scenario’s status
   * @param {ScenarioIds} [scenarioIds]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunGetScenarioesStatusPost_4(
    scenarioIds?: ScenarioIds,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunGetScenarioesStatusPost_4(scenarioIds, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
   * @summary 查询计算资源信息 Query compute resource info
   * @param {ModelTypePara} [modelTypePara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryComputeResourceInfoPost(
    modelTypePara?: ModelTypePara,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryComputeResourceInfoPost(modelTypePara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询计算资源信息，返回可用的计算服务器个数，以及对应的队列长度 Get compute resource information, return available compute services’count and corresponding queue length
   * @summary 查询计算资源信息 Query compute resource info
   * @param {ModelTypePara} [modelTypePara]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryComputeResourceInfoPost_5(
    modelTypePara?: ModelTypePara,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryComputeResourceInfoPost_5(modelTypePara, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
   * @summary 查询模型计算状态 Query model running status
   * @param {string} [projectName] 项目名称 project name
   * @param {string} [scenarioId] 方案ID scenario\&#39;s id
   * @param {string} [serialNo] 序列ID serial no
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryModelRunStatusGet(
    projectName?: string,
    scenarioId?: string,
    serialNo?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryModelRunStatusGet(projectName, scenarioId, serialNo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 查询方案模型计算状态（仅针对计算中的模型），所有状态都在枚举类型ModelState中 Get model running status of a scenario (only for model in running), all the status is listed in the Enum ModelState.
   * @summary 查询模型计算状态 Query model running status
   * @param {string} [projectName] 项目名称 project name
   * @param {string} [scenarioId] 方案ID scenario\&#39;s id
   * @param {string} [serialNo] 序列ID serial no
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryModelRunStatusGet_6(
    projectName?: string,
    scenarioId?: string,
    serialNo?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryModelRunStatusGet_6(projectName, scenarioId, serialNo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取排队情况
   * @param {string} [projectName] 项目名称 project name
   * @param {string} [scenarioId] 方案Id
   * @param {string} [modelType] 模型类型
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryQueuesGet(
    projectName?: string,
    scenarioId?: string,
    modelType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryQueuesGet(projectName, scenarioId, modelType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取排队情况
   * @param {string} [projectName] 项目名称 project name
   * @param {string} [scenarioId] 方案Id
   * @param {string} [modelType] 模型类型
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunQueryQueuesGet_7(
    projectName?: string,
    scenarioId?: string,
    modelType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunQueryQueuesGet_7(projectName, scenarioId, modelType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
   * @summary [第一步]驱动计算 Start to run a model
   * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunRunModelPost(
    scenarioModelMessageInput?: ScenarioModelMessageInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunRunModelPost(scenarioModelMessageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 创建一个方案模型计算的任务，任务将被推送到一个队列中排队进行计算，能够同时执行计算任务的个数取决于计算服务器个数，以及MIKE狗的个数 Generate a task to run the model of a scenario, which will be put in a queue and wait for it’s turn to run. The number of tasks can be run simultaneously depends on the number of compute services and MIKE dongles.
   * @summary [第一步]驱动计算 Start to run a model
   * @param {ScenarioModelMessageInput} [scenarioModelMessageInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunRunModelPost_8(
    scenarioModelMessageInput?: ScenarioModelMessageInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunRunModelPost_8(scenarioModelMessageInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [第三步]获取方案计算日志
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CalculateLogsGet(scenarioId?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CalculateLogsGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [第三步]获取方案计算日志
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CalculateLogsGet_9(scenarioId?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CalculateLogsGet_9(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CalculateStatusPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CalculateStatusPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [第二步]获取方案计算状态（对于等待中的方案，返回其排队序号）
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CalculateStatusPost_10(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CalculateStatusPost_10(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 取消计算通过queueId Cancelling the computation through queueId.
   * @summary 取消计算通过queueId Cancel model run
   * @param {string} [queueId]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CancelModelRunGet(queueId?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CancelModelRunGet(queueId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 取消计算通过queueId Cancelling the computation through queueId.
   * @summary 取消计算通过queueId Cancel model run
   * @param {string} [queueId]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CancelModelRunGet_11(queueId?: string, options?: AxiosRequestConfig) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CancelModelRunGet_11(queueId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 取消计算通过scenarioId Cancelling the computation through queueId.
   * @summary 取消计算通过scenarioId Cancel model run
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CancelModelRunThroughScenarioIdsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CancelModelRunThroughScenarioIdsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 取消计算通过scenarioId Cancelling the computation through queueId.
   * @summary 取消计算通过scenarioId Cancel model run
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2CancelModelRunThroughScenarioIdsPost_12(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2CancelModelRunThroughScenarioIdsPost_12(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2ResetCalculateStatusPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2ResetCalculateStatusPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 重置方案计算状态（只有对于已计算和已取消状态才有用）
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2ResetCalculateStatusPost_13(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2ResetCalculateStatusPost_13(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过方案ID来更新计算状态
   * @param {UpdateStatusInput} [updateStatusInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2UpdateCalculateStatusPost(
    updateStatusInput?: UpdateStatusInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2UpdateCalculateStatusPost(updateStatusInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过方案ID来更新计算状态
   * @param {UpdateStatusInput} [updateStatusInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2UpdateCalculateStatusPost_14(
    updateStatusInput?: UpdateStatusInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2UpdateCalculateStatusPost_14(updateStatusInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过方案ID来更新minIO地址（后端内部调用）
   * @param {UpdateRecordInput} [updateRecordInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2UpdateRecordPost(
    updateRecordInput?: UpdateRecordInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2UpdateRecordPost(updateRecordInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过方案ID来更新minIO地址（后端内部调用）
   * @param {UpdateRecordInput} [updateRecordInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelRunApi
   */
  public modelRunV2UpdateRecordPost_15(
    updateRecordInput?: UpdateRecordInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelRunApiFp(this.configuration)
      .modelRunV2UpdateRecordPost_15(updateRecordInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
