/* eslint-disable */
/**
 * 文件服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { MinIoCopyObjectInfo } from '../models'
// @ts-ignore
import { MinioFileObjectInfo } from '../models'
// @ts-ignore
import { MinioResponseInfo } from '../models'
// @ts-ignore
import { Stream } from '../models'
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 【废弃】复制文件
     * @param {MinIoCopyObjectInfo} [minIoCopyObjectInfo]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerFileServerCopyFilePost: async (
      minIoCopyObjectInfo?: MinIoCopyObjectInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/FileServerCopyFile`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        minIoCopyObjectInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】获取该用户可下载文件列表，所有有权限的
     * @param {string} [userName] 用户名
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称，如果为空，则只列出公共桶中的文件
     * @param {number} [currPage] 页编号
     * @param {number} [pageSize] 每页大小
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerGetFileListGet: async (
      userName?: string,
      userType?: number,
      projName?: string,
      currPage?: number,
      pageSize?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/GetFileList`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (currPage !== undefined) {
        localVarQueryParameter['currPage'] = currPage
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径(Minio服务所在路径)
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [filePath] 本地保存文件目录路径
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileReqGet: async (
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      filePath?: string,
      fileObjName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/MinioDownloadFileReq`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      if (filePath !== undefined) {
        localVarQueryParameter['filePath'] = filePath
      }

      if (fileObjName !== undefined) {
        localVarQueryParameter['fileObjName'] = fileObjName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】生成下载文件URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileName] 下载的文件名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileReqUrlGet: async (
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/MinioDownloadFileReqUrl`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      if (fileName !== undefined) {
        localVarQueryParameter['fileName'] = fileName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径  该方法不能使用在分布式环境下，调用者需要和Minio服务在同一虚拟机上。
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileStreamReqGet: async (
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileObjName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/MinioDownloadFileStreamReq`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      if (fileObjName !== undefined) {
        localVarQueryParameter['fileObjName'] = fileObjName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】直接从本地路径把文件上传到Minio服务器
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [filePathAndName] 本地全路径名称
     * @param {string} [projName] 项目名称，如果为空，则上传到公共桶
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioUploadFileReqGet: async (
      userName?: string,
      userType?: number,
      filePathAndName?: string,
      projName?: string,
      accessProp?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/MinioUploadFileReq`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (filePathAndName !== undefined) {
        localVarQueryParameter['filePathAndName'] = filePathAndName
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 【废弃】生成上传文件的独立URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [fileName] 文件名称，需要带扩展名
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioUploadFileReqUrlGet: async (
      userName?: string,
      userType?: number,
      fileName?: string,
      projName?: string,
      accessProp?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/MinioFileServer/MinioUploadFileReqUrl`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userName !== undefined) {
        localVarQueryParameter['userName'] = userName
      }

      if (userType !== undefined) {
        localVarQueryParameter['userType'] = userType
      }

      if (fileName !== undefined) {
        localVarQueryParameter['fileName'] = fileName
      }

      if (projName !== undefined) {
        localVarQueryParameter['projName'] = projName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/health`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 【废弃】复制文件
     * @param {MinIoCopyObjectInfo} [minIoCopyObjectInfo]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerFileServerCopyFilePost(
      minIoCopyObjectInfo?: MinIoCopyObjectInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerFileServerCopyFilePost(
          minIoCopyObjectInfo,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】获取该用户可下载文件列表，所有有权限的
     * @param {string} [userName] 用户名
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称，如果为空，则只列出公共桶中的文件
     * @param {number} [currPage] 页编号
     * @param {number} [pageSize] 每页大小
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerGetFileListGet(
      userName?: string,
      userType?: number,
      projName?: string,
      currPage?: number,
      pageSize?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MinioFileObjectInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiMinioFileServerGetFileListGet(
        userName,
        userType,
        projName,
        currPage,
        pageSize,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径(Minio服务所在路径)
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [filePath] 本地保存文件目录路径
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerMinioDownloadFileReqGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      filePath?: string,
      fileObjName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinioResponseInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerMinioDownloadFileReqGet(
          userName,
          userType,
          projName,
          accessProp,
          filePath,
          fileObjName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】生成下载文件URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileName] 下载的文件名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerMinioDownloadFileReqUrlGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinioResponseInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerMinioDownloadFileReqUrlGet(
          userName,
          userType,
          projName,
          accessProp,
          fileName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径  该方法不能使用在分布式环境下，调用者需要和Minio服务在同一虚拟机上。
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerMinioDownloadFileStreamReqGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileObjName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stream>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerMinioDownloadFileStreamReqGet(
          userName,
          userType,
          projName,
          accessProp,
          fileObjName,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】直接从本地路径把文件上传到Minio服务器
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [filePathAndName] 本地全路径名称
     * @param {string} [projName] 项目名称，如果为空，则上传到公共桶
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerMinioUploadFileReqGet(
      userName?: string,
      userType?: number,
      filePathAndName?: string,
      projName?: string,
      accessProp?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinioResponseInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerMinioUploadFileReqGet(
          userName,
          userType,
          filePathAndName,
          projName,
          accessProp,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 【废弃】生成上传文件的独立URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [fileName] 文件名称，需要带扩展名
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiMinioFileServerMinioUploadFileReqUrlGet(
      userName?: string,
      userType?: number,
      fileName?: string,
      projName?: string,
      accessProp?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinioResponseInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMinioFileServerMinioUploadFileReqUrlGet(
          userName,
          userType,
          fileName,
          projName,
          accessProp,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @summary 【废弃】复制文件
     * @param {MinIoCopyObjectInfo} [minIoCopyObjectInfo]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerFileServerCopyFilePost(
      minIoCopyObjectInfo?: MinIoCopyObjectInfo,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiMinioFileServerFileServerCopyFilePost(minIoCopyObjectInfo, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】获取该用户可下载文件列表，所有有权限的
     * @param {string} [userName] 用户名
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称，如果为空，则只列出公共桶中的文件
     * @param {number} [currPage] 页编号
     * @param {number} [pageSize] 每页大小
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerGetFileListGet(
      userName?: string,
      userType?: number,
      projName?: string,
      currPage?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<Array<MinioFileObjectInfo>> {
      return localVarFp
        .apiMinioFileServerGetFileListGet(userName, userType, projName, currPage, pageSize, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径(Minio服务所在路径)
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [filePath] 本地保存文件目录路径
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileReqGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      filePath?: string,
      fileObjName?: string,
      options?: any,
    ): AxiosPromise<MinioResponseInfo> {
      return localVarFp
        .apiMinioFileServerMinioDownloadFileReqGet(
          userName,
          userType,
          projName,
          accessProp,
          filePath,
          fileObjName,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】生成下载文件URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileName] 下载的文件名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileReqUrlGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileName?: string,
      options?: any,
    ): AxiosPromise<MinioResponseInfo> {
      return localVarFp
        .apiMinioFileServerMinioDownloadFileReqUrlGet(
          userName,
          userType,
          projName,
          accessProp,
          fileName,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】直接从Minio服务器把文件下载到本地路径  该方法不能使用在分布式环境下，调用者需要和Minio服务在同一虚拟机上。
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioDownloadFileStreamReqGet(
      userName?: string,
      userType?: number,
      projName?: string,
      accessProp?: number,
      fileObjName?: string,
      options?: any,
    ): AxiosPromise<Stream> {
      return localVarFp
        .apiMinioFileServerMinioDownloadFileStreamReqGet(
          userName,
          userType,
          projName,
          accessProp,
          fileObjName,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】直接从本地路径把文件上传到Minio服务器
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [filePathAndName] 本地全路径名称
     * @param {string} [projName] 项目名称，如果为空，则上传到公共桶
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioUploadFileReqGet(
      userName?: string,
      userType?: number,
      filePathAndName?: string,
      projName?: string,
      accessProp?: number,
      options?: any,
    ): AxiosPromise<MinioResponseInfo> {
      return localVarFp
        .apiMinioFileServerMinioUploadFileReqGet(
          userName,
          userType,
          filePathAndName,
          projName,
          accessProp,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 【废弃】生成上传文件的独立URL
     * @param {string} [userName] 用户名称
     * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
     * @param {string} [fileName] 文件名称，需要带扩展名
     * @param {string} [projName] 项目名称
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiMinioFileServerMinioUploadFileReqUrlGet(
      userName?: string,
      userType?: number,
      fileName?: string,
      projName?: string,
      accessProp?: number,
      options?: any,
    ): AxiosPromise<MinioResponseInfo> {
      return localVarFp
        .apiMinioFileServerMinioUploadFileReqUrlGet(
          userName,
          userType,
          fileName,
          projName,
          accessProp,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthGet(options?: any): AxiosPromise<string> {
      return localVarFp.healthGet(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 【废弃】复制文件
   * @param {MinIoCopyObjectInfo} [minIoCopyObjectInfo]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerFileServerCopyFilePost(
    minIoCopyObjectInfo?: MinIoCopyObjectInfo,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerFileServerCopyFilePost(minIoCopyObjectInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】获取该用户可下载文件列表，所有有权限的
   * @param {string} [userName] 用户名
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [projName] 项目名称，如果为空，则只列出公共桶中的文件
   * @param {number} [currPage] 页编号
   * @param {number} [pageSize] 每页大小
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerGetFileListGet(
    userName?: string,
    userType?: number,
    projName?: string,
    currPage?: number,
    pageSize?: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerGetFileListGet(userName, userType, projName, currPage, pageSize, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】直接从Minio服务器把文件下载到本地路径(Minio服务所在路径)
   * @param {string} [userName] 用户名称
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [projName] 项目名称
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {string} [filePath] 本地保存文件目录路径
   * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerMinioDownloadFileReqGet(
    userName?: string,
    userType?: number,
    projName?: string,
    accessProp?: number,
    filePath?: string,
    fileObjName?: string,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerMinioDownloadFileReqGet(
        userName,
        userType,
        projName,
        accessProp,
        filePath,
        fileObjName,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】生成下载文件URL
   * @param {string} [userName] 用户名称
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [projName] 项目名称
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {string} [fileName] 下载的文件名称，包含扩展名
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerMinioDownloadFileReqUrlGet(
    userName?: string,
    userType?: number,
    projName?: string,
    accessProp?: number,
    fileName?: string,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerMinioDownloadFileReqUrlGet(
        userName,
        userType,
        projName,
        accessProp,
        fileName,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】直接从Minio服务器把文件下载到本地路径  该方法不能使用在分布式环境下，调用者需要和Minio服务在同一虚拟机上。
   * @param {string} [userName] 用户名称
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [projName] 项目名称
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {string} [fileObjName] 下载的文件对象名称，包含扩展名
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerMinioDownloadFileStreamReqGet(
    userName?: string,
    userType?: number,
    projName?: string,
    accessProp?: number,
    fileObjName?: string,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerMinioDownloadFileStreamReqGet(
        userName,
        userType,
        projName,
        accessProp,
        fileObjName,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】直接从本地路径把文件上传到Minio服务器
   * @param {string} [userName] 用户名称
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [filePathAndName] 本地全路径名称
   * @param {string} [projName] 项目名称，如果为空，则上传到公共桶
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerMinioUploadFileReqGet(
    userName?: string,
    userType?: number,
    filePathAndName?: string,
    projName?: string,
    accessProp?: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerMinioUploadFileReqGet(
        userName,
        userType,
        filePathAndName,
        projName,
        accessProp,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 【废弃】生成上传文件的独立URL
   * @param {string} [userName] 用户名称
   * @param {number} [userType] 用户类型，0-管理员账户，1-普通用户账户
   * @param {string} [fileName] 文件名称，需要带扩展名
   * @param {string} [projName] 项目名称
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiMinioFileServerMinioUploadFileReqUrlGet(
    userName?: string,
    userType?: number,
    fileName?: string,
    projName?: string,
    accessProp?: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .apiMinioFileServerMinioUploadFileReqUrlGet(
        userName,
        userType,
        fileName,
        projName,
        accessProp,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /health
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
