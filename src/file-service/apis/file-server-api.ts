/* eslint-disable */
/**
 * 文件服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DeleteBucketInput } from '../models'
// @ts-ignore
import { DeleteFileInput } from '../models'
// @ts-ignore
import { GetFileUploadPathOutputResult } from '../models'
// @ts-ignore
import { QueryFileDownloadPathsInput } from '../models'
// @ts-ignore
import { QueryFileDownloadPathsOutputListResult } from '../models'
// @ts-ignore
import { UploadOutputResult } from '../models'
/**
 * FileServerApi - axios parameter creator
 * @export
 */
export const FileServerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 删除指定文件桶/文件夹.注意:若桶下还有文件将不允许删除
     * @param {Array<DeleteBucketInput>} [deleteBucketInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerDeleteBucketsPost: async (
      deleteBucketInput?: Array<DeleteBucketInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/file-server/delete-buckets`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteBucketInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除指定文件
     * @param {Array<DeleteFileInput>} [deleteFileInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerDeleteFilesPost: async (
      deleteFileInput?: Array<DeleteFileInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/file-server/delete-files`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteFileInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件下载/图片显示 / [Front end/third-party call] File download
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} objectName 文件对象名称，需要带扩展名,如:/images/device/t3-阀门_3a02c468-a8be-699c-e274-692bbfb9879b.png
     * @param {string} signature 签名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerFileDownloadGet: async (
      bucket: string,
      objectName: string,
      signature: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'bucket' is not null or undefined
      assertParamExists('apiV1FileServerFileDownloadGet', 'bucket', bucket)
      // verify required parameter 'objectName' is not null or undefined
      assertParamExists('apiV1FileServerFileDownloadGet', 'objectName', objectName)
      // verify required parameter 'signature' is not null or undefined
      assertParamExists('apiV1FileServerFileDownloadGet', 'signature', signature)
      const localVarPath = `/api/v1/file-server/file-download`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (bucket !== undefined) {
        localVarQueryParameter['Bucket'] = bucket
      }

      if (objectName !== undefined) {
        localVarQueryParameter['ObjectName'] = objectName
      }

      if (signature !== undefined) {
        localVarQueryParameter['Signature'] = signature
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件上传 / file upload [front-end/third-party call]
     * @param {string} [bucket] 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} [directory] 文件目录,如:/images/device/
     * @param {number} [accessProp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerFileUploadPost: async (
      bucket?: string,
      directory?: string,
      accessProp?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/file-server/file-upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (bucket !== undefined) {
        localVarFormParams.append('Bucket', bucket as any)
      }

      if (directory !== undefined) {
        localVarFormParams.append('Directory', directory as any)
      }

      if (accessProp !== undefined) {
        localVarFormParams.append('AccessProp', accessProp as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [局域网内部]获取文件预上传URL/ [internal lan] get the file pre upload URL
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,请上传一个定值
     * @param {string} directory 文件目录,如:/images/device/
     * @param {string} fileName 文件名称，需要带扩展名,如:t3-阀门.png
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerGetFileUploadPathGet: async (
      bucket: string,
      directory: string,
      fileName: string,
      accessProp?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'bucket' is not null or undefined
      assertParamExists('apiV1FileServerGetFileUploadPathGet', 'bucket', bucket)
      // verify required parameter 'directory' is not null or undefined
      assertParamExists('apiV1FileServerGetFileUploadPathGet', 'directory', directory)
      // verify required parameter 'fileName' is not null or undefined
      assertParamExists('apiV1FileServerGetFileUploadPathGet', 'fileName', fileName)
      const localVarPath = `/api/v1/file-server/get-file-upload-path`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (bucket !== undefined) {
        localVarQueryParameter['bucket'] = bucket
      }

      if (directory !== undefined) {
        localVarQueryParameter['directory'] = directory
      }

      if (fileName !== undefined) {
        localVarQueryParameter['fileName'] = fileName
      }

      if (accessProp !== undefined) {
        localVarQueryParameter['accessProp'] = accessProp
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [局域网内部]获取文件局域网下载路径/Get the file download path
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerQueryFileDownloadPathsPost: async (
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/file-server/query-file-download-paths`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryFileDownloadPathsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取文件外部网络下载地址 / get the external network download address of the file
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerQueryFileExternalDownloadPathsPost: async (
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/file-server/query-file-external-download-paths`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryFileDownloadPathsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FileServerApi - functional programming interface
 * @export
 */
export const FileServerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FileServerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 删除指定文件桶/文件夹.注意:若桶下还有文件将不允许删除
     * @param {Array<DeleteBucketInput>} [deleteBucketInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerDeleteBucketsPost(
      deleteBucketInput?: Array<DeleteBucketInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FileServerDeleteBucketsPost(
        deleteBucketInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除指定文件
     * @param {Array<DeleteFileInput>} [deleteFileInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerDeleteFilesPost(
      deleteFileInput?: Array<DeleteFileInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FileServerDeleteFilesPost(
        deleteFileInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件下载/图片显示 / [Front end/third-party call] File download
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} objectName 文件对象名称，需要带扩展名,如:/images/device/t3-阀门_3a02c468-a8be-699c-e274-692bbfb9879b.png
     * @param {string} signature 签名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerFileDownloadGet(
      bucket: string,
      objectName: string,
      signature: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FileServerFileDownloadGet(
        bucket,
        objectName,
        signature,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件上传 / file upload [front-end/third-party call]
     * @param {string} [bucket] 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} [directory] 文件目录,如:/images/device/
     * @param {number} [accessProp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerFileUploadPost(
      bucket?: string,
      directory?: string,
      accessProp?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadOutputResult>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FileServerFileUploadPost(
        bucket,
        directory,
        accessProp,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [局域网内部]获取文件预上传URL/ [internal lan] get the file pre upload URL
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,请上传一个定值
     * @param {string} directory 文件目录,如:/images/device/
     * @param {string} fileName 文件名称，需要带扩展名,如:t3-阀门.png
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerGetFileUploadPathGet(
      bucket: string,
      directory: string,
      fileName: string,
      accessProp?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileUploadPathOutputResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FileServerGetFileUploadPathGet(
        bucket,
        directory,
        fileName,
        accessProp,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary [局域网内部]获取文件局域网下载路径/Get the file download path
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerQueryFileDownloadPathsPost(
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryFileDownloadPathsOutputListResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1FileServerQueryFileDownloadPathsPost(
          queryFileDownloadPathsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取文件外部网络下载地址 / get the external network download address of the file
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1FileServerQueryFileExternalDownloadPathsPost(
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QueryFileDownloadPathsOutputListResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1FileServerQueryFileExternalDownloadPathsPost(
          queryFileDownloadPathsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * FileServerApi - factory interface
 * @export
 */
export const FileServerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FileServerApiFp(configuration)
  return {
    /**
     *
     * @summary 删除指定文件桶/文件夹.注意:若桶下还有文件将不允许删除
     * @param {Array<DeleteBucketInput>} [deleteBucketInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerDeleteBucketsPost(
      deleteBucketInput?: Array<DeleteBucketInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1FileServerDeleteBucketsPost(deleteBucketInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除指定文件
     * @param {Array<DeleteFileInput>} [deleteFileInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerDeleteFilesPost(
      deleteFileInput?: Array<DeleteFileInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1FileServerDeleteFilesPost(deleteFileInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件下载/图片显示 / [Front end/third-party call] File download
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} objectName 文件对象名称，需要带扩展名,如:/images/device/t3-阀门_3a02c468-a8be-699c-e274-692bbfb9879b.png
     * @param {string} signature 签名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerFileDownloadGet(
      bucket: string,
      objectName: string,
      signature: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1FileServerFileDownloadGet(bucket, objectName, signature, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [前端/第三方/代理转发]文件上传 / file upload [front-end/third-party call]
     * @param {string} [bucket] 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
     * @param {string} [directory] 文件目录,如:/images/device/
     * @param {number} [accessProp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerFileUploadPost(
      bucket?: string,
      directory?: string,
      accessProp?: number,
      options?: any,
    ): AxiosPromise<UploadOutputResult> {
      return localVarFp
        .apiV1FileServerFileUploadPost(bucket, directory, accessProp, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [局域网内部]获取文件预上传URL/ [internal lan] get the file pre upload URL
     * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,请上传一个定值
     * @param {string} directory 文件目录,如:/images/device/
     * @param {string} fileName 文件名称，需要带扩展名,如:t3-阀门.png
     * @param {number} [accessProp] 访问类型，0-公共，1-私有
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerGetFileUploadPathGet(
      bucket: string,
      directory: string,
      fileName: string,
      accessProp?: number,
      options?: any,
    ): AxiosPromise<GetFileUploadPathOutputResult> {
      return localVarFp
        .apiV1FileServerGetFileUploadPathGet(bucket, directory, fileName, accessProp, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [局域网内部]获取文件局域网下载路径/Get the file download path
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerQueryFileDownloadPathsPost(
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options?: any,
    ): AxiosPromise<QueryFileDownloadPathsOutputListResult> {
      return localVarFp
        .apiV1FileServerQueryFileDownloadPathsPost(queryFileDownloadPathsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取文件外部网络下载地址 / get the external network download address of the file
     * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1FileServerQueryFileExternalDownloadPathsPost(
      queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
      options?: any,
    ): AxiosPromise<QueryFileDownloadPathsOutputListResult> {
      return localVarFp
        .apiV1FileServerQueryFileExternalDownloadPathsPost(queryFileDownloadPathsInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * FileServerApi - object-oriented interface
 * @export
 * @class FileServerApi
 * @extends {BaseAPI}
 */
export class FileServerApi extends BaseAPI {
  /**
   *
   * @summary 删除指定文件桶/文件夹.注意:若桶下还有文件将不允许删除
   * @param {Array<DeleteBucketInput>} [deleteBucketInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerDeleteBucketsPost(
    deleteBucketInput?: Array<DeleteBucketInput>,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerDeleteBucketsPost(deleteBucketInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除指定文件
   * @param {Array<DeleteFileInput>} [deleteFileInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerDeleteFilesPost(
    deleteFileInput?: Array<DeleteFileInput>,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerDeleteFilesPost(deleteFileInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [前端/第三方/代理转发]文件下载/图片显示 / [Front end/third-party call] File download
   * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
   * @param {string} objectName 文件对象名称，需要带扩展名,如:/images/device/t3-阀门_3a02c468-a8be-699c-e274-692bbfb9879b.png
   * @param {string} signature 签名
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerFileDownloadGet(
    bucket: string,
    objectName: string,
    signature: string,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerFileDownloadGet(bucket, objectName, signature, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [前端/第三方/代理转发]文件上传 / file upload [front-end/third-party call]
   * @param {string} [bucket] 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,默认为一个虚拟的租户Id
   * @param {string} [directory] 文件目录,如:/images/device/
   * @param {number} [accessProp]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerFileUploadPost(
    bucket?: string,
    directory?: string,
    accessProp?: number,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerFileUploadPost(bucket, directory, accessProp, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [局域网内部]获取文件预上传URL/ [internal lan] get the file pre upload URL
   * @param {string} bucket 桶名,如:3a02c3a7-c227-3a0b-a3f7-0b2856bc7000,规范:(1)用租户Id作为桶名;(2)若为超管没有租户Id,请上传一个定值
   * @param {string} directory 文件目录,如:/images/device/
   * @param {string} fileName 文件名称，需要带扩展名,如:t3-阀门.png
   * @param {number} [accessProp] 访问类型，0-公共，1-私有
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerGetFileUploadPathGet(
    bucket: string,
    directory: string,
    fileName: string,
    accessProp?: number,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerGetFileUploadPathGet(bucket, directory, fileName, accessProp, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [局域网内部]获取文件局域网下载路径/Get the file download path
   * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerQueryFileDownloadPathsPost(
    queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerQueryFileDownloadPathsPost(queryFileDownloadPathsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取文件外部网络下载地址 / get the external network download address of the file
   * @param {Array<QueryFileDownloadPathsInput>} [queryFileDownloadPathsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileServerApi
   */
  public apiV1FileServerQueryFileExternalDownloadPathsPost(
    queryFileDownloadPathsInput?: Array<QueryFileDownloadPathsInput>,
    options?: AxiosRequestConfig,
  ) {
    return FileServerApiFp(this.configuration)
      .apiV1FileServerQueryFileExternalDownloadPathsPost(queryFileDownloadPathsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
