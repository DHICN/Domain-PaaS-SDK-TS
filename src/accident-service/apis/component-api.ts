/* eslint-disable */
/**
 * accident-manager-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddComponentInput } from '../models'
// @ts-ignore
import { AddComponentKeyInput } from '../models'
// @ts-ignore
import { AddComponentValueInput } from '../models'
// @ts-ignore
import { ComponentDetailInfo } from '../models'
// @ts-ignore
import { ComponentDetailInput } from '../models'
// @ts-ignore
import { ComponentInfo } from '../models'
// @ts-ignore
import { ComponentKeyInfo } from '../models'
// @ts-ignore
import { ComponentValueInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateComponentInput } from '../models'
// @ts-ignore
import { UpdateComponentValueInput } from '../models'
/**
 * ComponentApi - axios parameter creator
 * @export
 */
export const ComponentApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加污染物质的属性 Add a pollutant attribute
     * @param {AddComponentKeyInput} [addComponentKeyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentKeyPost: async (
      addComponentKeyInput?: AddComponentKeyInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/add-component-key`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addComponentKeyInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加一种污染物质 Add a new pollutant
     * @param {AddComponentInput} [addComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentPost: async (
      addComponentInput?: AddComponentInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/add-component`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addComponentInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 给污染物质属性赋值 Set value for a pollutant attribute
     * @param {AddComponentValueInput} [addComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentValuePost: async (
      addComponentValueInput?: AddComponentValueInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/add-component-value`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addComponentValueInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量添加污染物的详细信息 Batch add pollutant detailed information
     * @param {string} [evnetId] 事件ID event id
     * @param {Array<ComponentDetailInput>} [componentDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddDetailPost: async (
      evnetId?: string,
      componentDetailInput?: Array<ComponentDetailInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/add-detail`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (evnetId !== undefined) {
        localVarQueryParameter['evnetId'] = evnetId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        componentDetailInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过事件删除污染物 Delete pollutants by event ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentByEventPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/delete-component-by-event`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除污染物的属性 Delete pollutant attributes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentKeyPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/delete-component-key`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除污染物 Delete pollutants by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/delete-component`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除污染物的属性值 Delete pollutant attribute values by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentValuePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/delete-component-value`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过事件Id查询污染物的详细信息 Get pollutant detailed information by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentDetailsGet: async (
      eventId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/list-component-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (eventId !== undefined) {
        localVarQueryParameter['eventId'] = eventId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据事件id获取污染物信息 Get pollutants by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentGet: async (
      eventId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/list-component`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (eventId !== undefined) {
        localVarQueryParameter['eventId'] = eventId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据业务类型获取污染物的属性 Get pollutant attributes by business type
     * @param {string} [businessType] 业务类型 business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentKeyGet: async (
      businessType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/list-component-key`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (businessType !== undefined) {
        localVarQueryParameter['businessType'] = businessType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据污染物ID获取污染物的属性值 Get pollutant attribute values by pollutant id
     * @param {string} [componentId] 污染物ID pollutant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentValueGet: async (
      componentId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/list-component-value`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (componentId !== undefined) {
        localVarQueryParameter['componentId'] = componentId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新污染物信息 Update a pollutant information
     * @param {UpdateComponentInput} [updateComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentUpdateComponentPost: async (
      updateComponentInput?: UpdateComponentInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/update-component`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateComponentInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新污染物的属性值 Update a pollutant attribute value
     * @param {UpdateComponentValueInput} [updateComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentUpdateComponentValuePost: async (
      updateComponentValueInput?: UpdateComponentValueInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/component/update-component-value`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateComponentValueInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ComponentApi - functional programming interface
 * @export
 */
export const ComponentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ComponentApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加污染物质的属性 Add a pollutant attribute
     * @param {AddComponentKeyInput} [addComponentKeyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentAddComponentKeyPost(
      addComponentKeyInput?: AddComponentKeyInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentKeyInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentAddComponentKeyPost(
          addComponentKeyInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加一种污染物质 Add a new pollutant
     * @param {AddComponentInput} [addComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentAddComponentPost(
      addComponentInput?: AddComponentInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentAddComponentPost(
          addComponentInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 给污染物质属性赋值 Set value for a pollutant attribute
     * @param {AddComponentValueInput} [addComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentAddComponentValuePost(
      addComponentValueInput?: AddComponentValueInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentValueInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentAddComponentValuePost(
          addComponentValueInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量添加污染物的详细信息 Batch add pollutant detailed information
     * @param {string} [evnetId] 事件ID event id
     * @param {Array<ComponentDetailInput>} [componentDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentAddDetailPost(
      evnetId?: string,
      componentDetailInput?: Array<ComponentDetailInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentComponentAddDetailPost(
        evnetId,
        componentDetailInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过事件删除污染物 Delete pollutants by event ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentDeleteComponentByEventPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentDeleteComponentByEventPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除污染物的属性 Delete pollutant attributes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentDeleteComponentKeyPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentDeleteComponentKeyPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除污染物 Delete pollutants by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentDeleteComponentPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentDeleteComponentPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除污染物的属性值 Delete pollutant attribute values by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentDeleteComponentValuePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentDeleteComponentValuePost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过事件Id查询污染物的详细信息 Get pollutant detailed information by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentListComponentDetailsGet(
      eventId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComponentDetailInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentListComponentDetailsGet(
          eventId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据事件id获取污染物信息 Get pollutants by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentListComponentGet(
      eventId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComponentInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentListComponentGet(eventId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据业务类型获取污染物的属性 Get pollutant attributes by business type
     * @param {string} [businessType] 业务类型 business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentListComponentKeyGet(
      businessType?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComponentKeyInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentListComponentKeyGet(
          businessType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据污染物ID获取污染物的属性值 Get pollutant attribute values by pollutant id
     * @param {string} [componentId] 污染物ID pollutant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentListComponentValueGet(
      componentId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ComponentValueInfo>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentListComponentValueGet(
          componentId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新污染物信息 Update a pollutant information
     * @param {UpdateComponentInput} [updateComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentUpdateComponentPost(
      updateComponentInput?: UpdateComponentInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentUpdateComponentPost(
          updateComponentInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新污染物的属性值 Update a pollutant attribute value
     * @param {UpdateComponentValueInput} [updateComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentComponentUpdateComponentValuePost(
      updateComponentValueInput?: UpdateComponentValueInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentValueInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentComponentUpdateComponentValuePost(
          updateComponentValueInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ComponentApi - factory interface
 * @export
 */
export const ComponentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ComponentApiFp(configuration)
  return {
    /**
     *
     * @summary 添加污染物质的属性 Add a pollutant attribute
     * @param {AddComponentKeyInput} [addComponentKeyInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentKeyPost(
      addComponentKeyInput?: AddComponentKeyInput,
      options?: any,
    ): AxiosPromise<ComponentKeyInfo> {
      return localVarFp
        .apiV1AccidentComponentAddComponentKeyPost(addComponentKeyInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加一种污染物质 Add a new pollutant
     * @param {AddComponentInput} [addComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentPost(
      addComponentInput?: AddComponentInput,
      options?: any,
    ): AxiosPromise<ComponentInfo> {
      return localVarFp
        .apiV1AccidentComponentAddComponentPost(addComponentInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 给污染物质属性赋值 Set value for a pollutant attribute
     * @param {AddComponentValueInput} [addComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddComponentValuePost(
      addComponentValueInput?: AddComponentValueInput,
      options?: any,
    ): AxiosPromise<ComponentValueInfo> {
      return localVarFp
        .apiV1AccidentComponentAddComponentValuePost(addComponentValueInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量添加污染物的详细信息 Batch add pollutant detailed information
     * @param {string} [evnetId] 事件ID event id
     * @param {Array<ComponentDetailInput>} [componentDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentAddDetailPost(
      evnetId?: string,
      componentDetailInput?: Array<ComponentDetailInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1AccidentComponentAddDetailPost(evnetId, componentDetailInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过事件删除污染物 Delete pollutants by event ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentByEventPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentComponentDeleteComponentByEventPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除污染物的属性 Delete pollutant attributes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentKeyPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentComponentDeleteComponentKeyPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除污染物 Delete pollutants by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentComponentDeleteComponentPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除污染物的属性值 Delete pollutant attribute values by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentDeleteComponentValuePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentComponentDeleteComponentValuePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过事件Id查询污染物的详细信息 Get pollutant detailed information by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentDetailsGet(
      eventId?: string,
      options?: any,
    ): AxiosPromise<Array<ComponentDetailInfo>> {
      return localVarFp
        .apiV1AccidentComponentListComponentDetailsGet(eventId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据事件id获取污染物信息 Get pollutants by event id
     * @param {string} [eventId] 事件ID event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentGet(
      eventId?: string,
      options?: any,
    ): AxiosPromise<Array<ComponentInfo>> {
      return localVarFp
        .apiV1AccidentComponentListComponentGet(eventId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据业务类型获取污染物的属性 Get pollutant attributes by business type
     * @param {string} [businessType] 业务类型 business type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentKeyGet(
      businessType?: string,
      options?: any,
    ): AxiosPromise<Array<ComponentKeyInfo>> {
      return localVarFp
        .apiV1AccidentComponentListComponentKeyGet(businessType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据污染物ID获取污染物的属性值 Get pollutant attribute values by pollutant id
     * @param {string} [componentId] 污染物ID pollutant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentListComponentValueGet(
      componentId?: string,
      options?: any,
    ): AxiosPromise<Array<ComponentValueInfo>> {
      return localVarFp
        .apiV1AccidentComponentListComponentValueGet(componentId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新污染物信息 Update a pollutant information
     * @param {UpdateComponentInput} [updateComponentInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentUpdateComponentPost(
      updateComponentInput?: UpdateComponentInput,
      options?: any,
    ): AxiosPromise<ComponentInfo> {
      return localVarFp
        .apiV1AccidentComponentUpdateComponentPost(updateComponentInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新污染物的属性值 Update a pollutant attribute value
     * @param {UpdateComponentValueInput} [updateComponentValueInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentComponentUpdateComponentValuePost(
      updateComponentValueInput?: UpdateComponentValueInput,
      options?: any,
    ): AxiosPromise<ComponentValueInfo> {
      return localVarFp
        .apiV1AccidentComponentUpdateComponentValuePost(updateComponentValueInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ComponentApi - object-oriented interface
 * @export
 * @class ComponentApi
 * @extends {BaseAPI}
 */
export class ComponentApi extends BaseAPI {
  /**
   *
   * @summary 添加污染物质的属性 Add a pollutant attribute
   * @param {AddComponentKeyInput} [addComponentKeyInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentAddComponentKeyPost(
    addComponentKeyInput?: AddComponentKeyInput,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentAddComponentKeyPost(addComponentKeyInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加一种污染物质 Add a new pollutant
   * @param {AddComponentInput} [addComponentInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentAddComponentPost(
    addComponentInput?: AddComponentInput,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentAddComponentPost(addComponentInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 给污染物质属性赋值 Set value for a pollutant attribute
   * @param {AddComponentValueInput} [addComponentValueInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentAddComponentValuePost(
    addComponentValueInput?: AddComponentValueInput,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentAddComponentValuePost(addComponentValueInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量添加污染物的详细信息 Batch add pollutant detailed information
   * @param {string} [evnetId] 事件ID event id
   * @param {Array<ComponentDetailInput>} [componentDetailInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentAddDetailPost(
    evnetId?: string,
    componentDetailInput?: Array<ComponentDetailInput>,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentAddDetailPost(evnetId, componentDetailInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过事件删除污染物 Delete pollutants by event ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentDeleteComponentByEventPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentDeleteComponentByEventPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除污染物的属性 Delete pollutant attributes by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentDeleteComponentKeyPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentDeleteComponentKeyPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除污染物 Delete pollutants by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentDeleteComponentPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentDeleteComponentPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除污染物的属性值 Delete pollutant attribute values by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentDeleteComponentValuePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentDeleteComponentValuePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过事件Id查询污染物的详细信息 Get pollutant detailed information by event id
   * @param {string} [eventId] 事件ID event id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentListComponentDetailsGet(
    eventId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentListComponentDetailsGet(eventId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据事件id获取污染物信息 Get pollutants by event id
   * @param {string} [eventId] 事件ID event id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentListComponentGet(eventId?: string, options?: AxiosRequestConfig) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentListComponentGet(eventId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据业务类型获取污染物的属性 Get pollutant attributes by business type
   * @param {string} [businessType] 业务类型 business type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentListComponentKeyGet(
    businessType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentListComponentKeyGet(businessType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据污染物ID获取污染物的属性值 Get pollutant attribute values by pollutant id
   * @param {string} [componentId] 污染物ID pollutant id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentListComponentValueGet(
    componentId?: string,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentListComponentValueGet(componentId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新污染物信息 Update a pollutant information
   * @param {UpdateComponentInput} [updateComponentInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentUpdateComponentPost(
    updateComponentInput?: UpdateComponentInput,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentUpdateComponentPost(updateComponentInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新污染物的属性值 Update a pollutant attribute value
   * @param {UpdateComponentValueInput} [updateComponentValueInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComponentApi
   */
  public apiV1AccidentComponentUpdateComponentValuePost(
    updateComponentValueInput?: UpdateComponentValueInput,
    options?: AxiosRequestConfig,
  ) {
    return ComponentApiFp(this.configuration)
      .apiV1AccidentComponentUpdateComponentValuePost(updateComponentValueInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
