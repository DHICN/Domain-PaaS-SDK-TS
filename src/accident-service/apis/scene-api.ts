/* eslint-disable */
/**
 * accident-manager-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddSceneInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SceneDetailInfo } from '../models'
// @ts-ignore
import { SceneDetailInput } from '../models'
// @ts-ignore
import { SceneInfo } from '../models'
// @ts-ignore
import { UpdateSceneInput } from '../models'
/**
 * SceneApi - axios parameter creator
 * @export
 */
export const SceneApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 批量添加情景详细信息，包括关联的事件、污染物等信息 Batch add scenes with detailed information including subordinate events, pollutants, etc.
     * @summary 批量添加情景详细信息 Batch add scenes with detailed information
     * @param {string} [accidentId] 事故ID accident id
     * @param {Array<SceneDetailInput>} [sceneDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneAddDetailPost: async (
      accidentId?: string,
      sceneDetailInput?: Array<SceneDetailInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/add-detail`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (accidentId !== undefined) {
        localVarQueryParameter['accidentId'] = accidentId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sceneDetailInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加一个新的情景 Add a new scene
     * @param {AddSceneInput} [addSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneAddPost: async (
      addSceneInput?: AddSceneInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addSceneInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过事故Id删除情景 Delete scenes by accident ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneDeleteByAccidentPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/delete-by-accident`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过Id删除情景 Delete scenes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by id
     * @summary 通过ID获取情景的详细信息 Get scene detailed information by id
     * @param {string} [sceneId] 情景ID scene id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneGetByIdGet: async (
      sceneId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/get-by-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sceneId !== undefined) {
        localVarQueryParameter['sceneId'] = sceneId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据事故id查询情景信息 Get scene by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListByAccidentGet: async (
      accidentId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/list-by-accident`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (accidentId !== undefined) {
        localVarQueryParameter['accidentId'] = accidentId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据方案id查询对应的情景 Get scene by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListByScenarioGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/list-by-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据事故ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by accident id
     * @summary 根据事故ID查询情景的详细信息 Get scene detailed information by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListDetailByAccidentGet: async (
      accidentId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/list-detail-by-accident`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (accidentId !== undefined) {
        localVarQueryParameter['accidentId'] = accidentId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据方案ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by scenario id
     * @summary 根据方案ID查询情景的详细信息 Get scene detailed information by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListDetailByScenarioGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/list-detail-by-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新场景基本信息 Update scene information
     * @param {UpdateSceneInput} [updateSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneUpdatePost: async (
      updateSceneInput?: UpdateSceneInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/accident/scene/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateSceneInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SceneApi - functional programming interface
 * @export
 */
export const SceneApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SceneApiAxiosParamCreator(configuration)
  return {
    /**
     * 批量添加情景详细信息，包括关联的事件、污染物等信息 Batch add scenes with detailed information including subordinate events, pollutants, etc.
     * @summary 批量添加情景详细信息 Batch add scenes with detailed information
     * @param {string} [accidentId] 事故ID accident id
     * @param {Array<SceneDetailInput>} [sceneDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneAddDetailPost(
      accidentId?: string,
      sceneDetailInput?: Array<SceneDetailInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneAddDetailPost(
        accidentId,
        sceneDetailInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加一个新的情景 Add a new scene
     * @param {AddSceneInput} [addSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneAddPost(
      addSceneInput?: AddSceneInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneAddPost(
        addSceneInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过事故Id删除情景 Delete scenes by accident ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneDeleteByAccidentPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentSceneDeleteByAccidentPost(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过Id删除情景 Delete scenes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneDeletePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by id
     * @summary 通过ID获取情景的详细信息 Get scene detailed information by id
     * @param {string} [sceneId] 情景ID scene id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneGetByIdGet(
      sceneId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneDetailInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneGetByIdGet(
        sceneId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据事故id查询情景信息 Get scene by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneListByAccidentGet(
      accidentId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SceneInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneListByAccidentGet(
        accidentId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据方案id查询对应的情景 Get scene by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneListByScenarioGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SceneInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneListByScenarioGet(
        scenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据事故ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by accident id
     * @summary 根据事故ID查询情景的详细信息 Get scene detailed information by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneListDetailByAccidentGet(
      accidentId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SceneDetailInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentSceneListDetailByAccidentGet(
          accidentId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据方案ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by scenario id
     * @summary 根据方案ID查询情景的详细信息 Get scene detailed information by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneListDetailByScenarioGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SceneDetailInfo>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AccidentSceneListDetailByScenarioGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新场景基本信息 Update scene information
     * @param {UpdateSceneInput} [updateSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AccidentSceneUpdatePost(
      updateSceneInput?: UpdateSceneInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccidentSceneUpdatePost(
        updateSceneInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * SceneApi - factory interface
 * @export
 */
export const SceneApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SceneApiFp(configuration)
  return {
    /**
     * 批量添加情景详细信息，包括关联的事件、污染物等信息 Batch add scenes with detailed information including subordinate events, pollutants, etc.
     * @summary 批量添加情景详细信息 Batch add scenes with detailed information
     * @param {string} [accidentId] 事故ID accident id
     * @param {Array<SceneDetailInput>} [sceneDetailInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneAddDetailPost(
      accidentId?: string,
      sceneDetailInput?: Array<SceneDetailInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1AccidentSceneAddDetailPost(accidentId, sceneDetailInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加一个新的情景 Add a new scene
     * @param {AddSceneInput} [addSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneAddPost(
      addSceneInput?: AddSceneInput,
      options?: any,
    ): AxiosPromise<SceneInfo> {
      return localVarFp
        .apiV1AccidentSceneAddPost(addSceneInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过事故Id删除情景 Delete scenes by accident ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneDeleteByAccidentPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentSceneDeleteByAccidentPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过Id删除情景 Delete scenes by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AccidentSceneDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by id
     * @summary 通过ID获取情景的详细信息 Get scene detailed information by id
     * @param {string} [sceneId] 情景ID scene id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneGetByIdGet(sceneId?: string, options?: any): AxiosPromise<SceneDetailInfo> {
      return localVarFp
        .apiV1AccidentSceneGetByIdGet(sceneId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据事故id查询情景信息 Get scene by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListByAccidentGet(
      accidentId?: string,
      options?: any,
    ): AxiosPromise<Array<SceneInfo>> {
      return localVarFp
        .apiV1AccidentSceneListByAccidentGet(accidentId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据方案id查询对应的情景 Get scene by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListByScenarioGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<SceneInfo>> {
      return localVarFp
        .apiV1AccidentSceneListByScenarioGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据事故ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by accident id
     * @summary 根据事故ID查询情景的详细信息 Get scene detailed information by accident id
     * @param {string} [accidentId] 事故ID accident id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListDetailByAccidentGet(
      accidentId?: string,
      options?: any,
    ): AxiosPromise<Array<SceneDetailInfo>> {
      return localVarFp
        .apiV1AccidentSceneListDetailByAccidentGet(accidentId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据方案ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by scenario id
     * @summary 根据方案ID查询情景的详细信息 Get scene detailed information by scenario id
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneListDetailByScenarioGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<SceneDetailInfo>> {
      return localVarFp
        .apiV1AccidentSceneListDetailByScenarioGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新场景基本信息 Update scene information
     * @param {UpdateSceneInput} [updateSceneInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AccidentSceneUpdatePost(
      updateSceneInput?: UpdateSceneInput,
      options?: any,
    ): AxiosPromise<SceneInfo> {
      return localVarFp
        .apiV1AccidentSceneUpdatePost(updateSceneInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * SceneApi - object-oriented interface
 * @export
 * @class SceneApi
 * @extends {BaseAPI}
 */
export class SceneApi extends BaseAPI {
  /**
   * 批量添加情景详细信息，包括关联的事件、污染物等信息 Batch add scenes with detailed information including subordinate events, pollutants, etc.
   * @summary 批量添加情景详细信息 Batch add scenes with detailed information
   * @param {string} [accidentId] 事故ID accident id
   * @param {Array<SceneDetailInput>} [sceneDetailInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneAddDetailPost(
    accidentId?: string,
    sceneDetailInput?: Array<SceneDetailInput>,
    options?: AxiosRequestConfig,
  ) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneAddDetailPost(accidentId, sceneDetailInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加一个新的情景 Add a new scene
   * @param {AddSceneInput} [addSceneInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneAddPost(addSceneInput?: AddSceneInput, options?: AxiosRequestConfig) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneAddPost(addSceneInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过事故Id删除情景 Delete scenes by accident ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneDeleteByAccidentPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneDeleteByAccidentPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过Id删除情景 Delete scenes by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneDeletePost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by id
   * @summary 通过ID获取情景的详细信息 Get scene detailed information by id
   * @param {string} [sceneId] 情景ID scene id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneGetByIdGet(sceneId?: string, options?: AxiosRequestConfig) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneGetByIdGet(sceneId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据事故id查询情景信息 Get scene by accident id
   * @param {string} [accidentId] 事故ID accident id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneListByAccidentGet(accidentId?: string, options?: AxiosRequestConfig) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneListByAccidentGet(accidentId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据方案id查询对应的情景 Get scene by scenario id
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneListByScenarioGet(scenarioId?: string, options?: AxiosRequestConfig) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneListByScenarioGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据事故ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by accident id
   * @summary 根据事故ID查询情景的详细信息 Get scene detailed information by accident id
   * @param {string} [accidentId] 事故ID accident id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneListDetailByAccidentGet(
    accidentId?: string,
    options?: AxiosRequestConfig,
  ) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneListDetailByAccidentGet(accidentId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据方案ID查询情景的详细信息，包括关联的事件、污染物等信息 Get scene detailed information including subordinate events, pollutants, etc. by scenario id
   * @summary 根据方案ID查询情景的详细信息 Get scene detailed information by scenario id
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneListDetailByScenarioGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneListDetailByScenarioGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新场景基本信息 Update scene information
   * @param {UpdateSceneInput} [updateSceneInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SceneApi
   */
  public apiV1AccidentSceneUpdatePost(
    updateSceneInput?: UpdateSceneInput,
    options?: AxiosRequestConfig,
  ) {
    return SceneApiFp(this.configuration)
      .apiV1AccidentSceneUpdatePost(updateSceneInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
