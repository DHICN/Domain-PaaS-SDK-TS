/* eslint-disable */
/**
 * digital-twin-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddModelPointDataTypeInput } from '../models'
// @ts-ignore
import { PointDataTypeInfo } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateModelPointDataTypeInput } from '../models'
/**
 * PointDataTypeMapApi - axios parameter creator
 * @export
 */
export const PointDataTypeMapApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapAddPost: async (
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/point-data-type-map/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addModelPointDataTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过TemplateId删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by TemplateId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapDeleteByTemplateidPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/point-data-type-map/delete-by-templateid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过id删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapDeletePost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/point-data-type-map/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取模型点位数据类型与设备指标之间的映射关系列表 Get mapping relations between model point data type and device indicator
     * @param {string} [templateId] 模板方案ID template scenario id
     * @param {string} [deviceIndicatorId] 设备指标id device indicator id
     * @param {string} [modelDataType] 模型中的数据类型 model data type
     * @param {string} [modelPointId] 模型点位ID model point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapListGet: async (
      templateId?: string,
      deviceIndicatorId?: string,
      modelDataType?: string,
      modelPointId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/point-data-type-map/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateId !== undefined) {
        localVarQueryParameter['TemplateId'] = templateId
      }

      if (deviceIndicatorId !== undefined) {
        localVarQueryParameter['DeviceIndicatorId'] = deviceIndicatorId
      }

      if (modelDataType !== undefined) {
        localVarQueryParameter['ModelDataType'] = modelDataType
      }

      if (modelPointId !== undefined) {
        localVarQueryParameter['ModelPointId'] = modelPointId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapUpdatePost: async (
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/point-data-type-map/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateModelPointDataTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PointDataTypeMapApi - functional programming interface
 * @export
 */
export const PointDataTypeMapApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PointDataTypeMapApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PointDataTypeMapAddPost(
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PointDataTypeMapAddPost(
        addModelPointDataTypeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过TemplateId删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by TemplateId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PointDataTypeMapDeleteByTemplateidPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PointDataTypeMapDeleteByTemplateidPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过id删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PointDataTypeMapDeletePost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PointDataTypeMapDeletePost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取模型点位数据类型与设备指标之间的映射关系列表 Get mapping relations between model point data type and device indicator
     * @param {string} [templateId] 模板方案ID template scenario id
     * @param {string} [deviceIndicatorId] 设备指标id device indicator id
     * @param {string} [modelDataType] 模型中的数据类型 model data type
     * @param {string} [modelPointId] 模型点位ID model point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PointDataTypeMapListGet(
      templateId?: string,
      deviceIndicatorId?: string,
      modelDataType?: string,
      modelPointId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PointDataTypeMapListGet(
        templateId,
        deviceIndicatorId,
        modelDataType,
        modelPointId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PointDataTypeMapUpdatePost(
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointDataTypeInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PointDataTypeMapUpdatePost(
        updateModelPointDataTypeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * PointDataTypeMapApi - factory interface
 * @export
 */
export const PointDataTypeMapApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PointDataTypeMapApiFp(configuration)
  return {
    /**
     *
     * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
     * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapAddPost(
      addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiV1PointDataTypeMapAddPost(addModelPointDataTypeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过TemplateId删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by TemplateId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapDeleteByTemplateidPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1PointDataTypeMapDeleteByTemplateidPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过id删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapDeletePost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1PointDataTypeMapDeletePost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取模型点位数据类型与设备指标之间的映射关系列表 Get mapping relations between model point data type and device indicator
     * @param {string} [templateId] 模板方案ID template scenario id
     * @param {string} [deviceIndicatorId] 设备指标id device indicator id
     * @param {string} [modelDataType] 模型中的数据类型 model data type
     * @param {string} [modelPointId] 模型点位ID model point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapListGet(
      templateId?: string,
      deviceIndicatorId?: string,
      modelDataType?: string,
      modelPointId?: string,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiV1PointDataTypeMapListGet(
          templateId,
          deviceIndicatorId,
          modelDataType,
          modelPointId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
     * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PointDataTypeMapUpdatePost(
      updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
      options?: any,
    ): AxiosPromise<Array<PointDataTypeInfo>> {
      return localVarFp
        .apiV1PointDataTypeMapUpdatePost(updateModelPointDataTypeInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PointDataTypeMapApi - object-oriented interface
 * @export
 * @class PointDataTypeMapApi
 * @extends {BaseAPI}
 */
export class PointDataTypeMapApi extends BaseAPI {
  /**
   *
   * @summary 添加模型点位数据类型与设备指标之间的映射关系 Add mapping relation between model point data type and device indicator
   * @param {Array<AddModelPointDataTypeInput>} [addModelPointDataTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointDataTypeMapApi
   */
  public apiV1PointDataTypeMapAddPost(
    addModelPointDataTypeInput?: Array<AddModelPointDataTypeInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointDataTypeMapApiFp(this.configuration)
      .apiV1PointDataTypeMapAddPost(addModelPointDataTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过TemplateId删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by TemplateId
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointDataTypeMapApi
   */
  public apiV1PointDataTypeMapDeleteByTemplateidPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PointDataTypeMapApiFp(this.configuration)
      .apiV1PointDataTypeMapDeleteByTemplateidPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过id删除模型点位数据类型与设备指标之间的映射关系 Delete mapping relations between model point data type and device indicator by id
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointDataTypeMapApi
   */
  public apiV1PointDataTypeMapDeletePost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PointDataTypeMapApiFp(this.configuration)
      .apiV1PointDataTypeMapDeletePost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取模型点位数据类型与设备指标之间的映射关系列表 Get mapping relations between model point data type and device indicator
   * @param {string} [templateId] 模板方案ID template scenario id
   * @param {string} [deviceIndicatorId] 设备指标id device indicator id
   * @param {string} [modelDataType] 模型中的数据类型 model data type
   * @param {string} [modelPointId] 模型点位ID model point id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointDataTypeMapApi
   */
  public apiV1PointDataTypeMapListGet(
    templateId?: string,
    deviceIndicatorId?: string,
    modelDataType?: string,
    modelPointId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PointDataTypeMapApiFp(this.configuration)
      .apiV1PointDataTypeMapListGet(
        templateId,
        deviceIndicatorId,
        modelDataType,
        modelPointId,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新模型点位数据类型与设备指标之间的映射关系 Update mapping relations between model point data type and device indicator
   * @param {Array<UpdateModelPointDataTypeInput>} [updateModelPointDataTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointDataTypeMapApi
   */
  public apiV1PointDataTypeMapUpdatePost(
    updateModelPointDataTypeInput?: Array<UpdateModelPointDataTypeInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointDataTypeMapApiFp(this.configuration)
      .apiV1PointDataTypeMapUpdatePost(updateModelPointDataTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
