/* eslint-disable */
/**
 * digital-twin-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddDeviceIndicatorInput } from '../models'
// @ts-ignore
import { DeviceIndicatorEto } from '../models'
// @ts-ignore
import { DeviceIndicatorOutput } from '../models'
// @ts-ignore
import { GetMultiDeviceIndicatorInput } from '../models'
// @ts-ignore
import { GetMultiDeviceIndicatorOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateDeviceIndicatorInput } from '../models'
/**
 * DeviceIndicatorApi - axios parameter creator
 * @export
 */
export const DeviceIndicatorApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary /api
     * @param {Array<DeviceIndicatorEto>} [deviceIndicatorEto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPost: async (
      deviceIndicatorEto?: Array<DeviceIndicatorEto>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deviceIndicatorEto,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorAddPost: async (
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有设备指标信息 Get all the device indicator information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorAllGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除设备指标信息 Delete indicator by id
     * @param {string} [id] 指标ID indicator id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorDeletePost: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过Id获取指标信息 Get indicator by id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorGetByIdGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/get-by-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorInitPost: async (
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/init`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型点位获取其对应的设备指标信息 Get device indicator information by corresponding model points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorListByModelPointPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/list-by-model-point`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取设备下的所有指标信息 Get indicators by device id
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorListGet: async (
      deviceId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (deviceId !== undefined) {
        localVarQueryParameter['deviceId'] = deviceId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除租户下的所有指标信息 Delete indicators by tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/remove-all-indicators-by-tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/remove-multi-device-indicators`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemovelistPost: async (
      body?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/removelist`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新设备指标信息 Update device indicators
     * @param {UpdateDeviceIndicatorInput} [updateDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorUpdatePost: async (
      updateDeviceIndicatorInput?: UpdateDeviceIndicatorInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/device-indicator/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取多个设备下的指标详情 Get indicators of multiple devices
     * @param {GetMultiDeviceIndicatorInput} [getMultiDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MultiDeviceIndicatorListPost: async (
      getMultiDeviceIndicatorInput?: GetMultiDeviceIndicatorInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/multi-device-indicator/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getMultiDeviceIndicatorInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DeviceIndicatorApi - functional programming interface
 * @export
 */
export const DeviceIndicatorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeviceIndicatorApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary /api
     * @param {Array<DeviceIndicatorEto>} [deviceIndicatorEto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPost(
      deviceIndicatorEto?: Array<DeviceIndicatorEto>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPost(deviceIndicatorEto, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorAddPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorAddPost(
        addDeviceIndicatorInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有设备指标信息 Get all the device indicator information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorAllGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorAllGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除设备指标信息 Delete indicator by id
     * @param {string} [id] 指标ID indicator id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorDeletePost(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorDeletePost(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过Id获取指标信息 Get indicator by id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorGetByIdGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceIndicatorOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorGetByIdGet(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorInitPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorInitPost(
        addDeviceIndicatorInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型点位获取其对应的设备指标信息 Get device indicator information by corresponding model points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorListByModelPointPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DeviceIndicatorListByModelPointPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取设备下的所有指标信息 Get indicators by device id
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorListGet(
      deviceId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorListGet(
        deviceId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除租户下的所有指标信息 Delete indicators by tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(
          requestBody,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorRemovelistPost(
      body?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorRemovelistPost(
        body,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新设备指标信息 Update device indicators
     * @param {UpdateDeviceIndicatorInput} [updateDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeviceIndicatorUpdatePost(
      updateDeviceIndicatorInput?: UpdateDeviceIndicatorInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceIndicatorOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeviceIndicatorUpdatePost(
        updateDeviceIndicatorInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取多个设备下的指标详情 Get indicators of multiple devices
     * @param {GetMultiDeviceIndicatorInput} [getMultiDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1MultiDeviceIndicatorListPost(
      getMultiDeviceIndicatorInput?: GetMultiDeviceIndicatorInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetMultiDeviceIndicatorOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MultiDeviceIndicatorListPost(
        getMultiDeviceIndicatorInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DeviceIndicatorApi - factory interface
 * @export
 */
export const DeviceIndicatorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DeviceIndicatorApiFp(configuration)
  return {
    /**
     *
     * @summary /api
     * @param {Array<DeviceIndicatorEto>} [deviceIndicatorEto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPost(deviceIndicatorEto?: Array<DeviceIndicatorEto>, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiPost(deviceIndicatorEto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 批量增加设备指标信息 batch add device indicators
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorAddPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorAddPost(addDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有设备指标信息 Get all the device indicator information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorAllGet(options?: any): AxiosPromise<Array<DeviceIndicatorOutput>> {
      return localVarFp
        .apiV1DeviceIndicatorAllGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除设备指标信息 Delete indicator by id
     * @param {string} [id] 指标ID indicator id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorDeletePost(id?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorDeletePost(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过Id获取指标信息 Get indicator by id
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorGetByIdGet(
      id?: string,
      options?: any,
    ): AxiosPromise<DeviceIndicatorOutput> {
      return localVarFp
        .apiV1DeviceIndicatorGetByIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
     * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorInitPost(
      addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorInitPost(addDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型点位获取其对应的设备指标信息 Get device indicator information by corresponding model points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorListByModelPointPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<DeviceIndicatorOutput>> {
      return localVarFp
        .apiV1DeviceIndicatorListByModelPointPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取设备下的所有指标信息 Get indicators by device id
     * @param {string} [deviceId] 设备ID device id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorListGet(
      deviceId?: string,
      options?: any,
    ): AxiosPromise<Array<DeviceIndicatorOutput>> {
      return localVarFp
        .apiV1DeviceIndicatorListGet(deviceId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除租户下的所有指标信息 Delete indicators by tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除设备下的所有指标信息 Delete indicators by device id
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorRemovelistPost(body?: string, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeviceIndicatorRemovelistPost(body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新设备指标信息 Update device indicators
     * @param {UpdateDeviceIndicatorInput} [updateDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeviceIndicatorUpdatePost(
      updateDeviceIndicatorInput?: UpdateDeviceIndicatorInput,
      options?: any,
    ): AxiosPromise<DeviceIndicatorOutput> {
      return localVarFp
        .apiV1DeviceIndicatorUpdatePost(updateDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取多个设备下的指标详情 Get indicators of multiple devices
     * @param {GetMultiDeviceIndicatorInput} [getMultiDeviceIndicatorInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MultiDeviceIndicatorListPost(
      getMultiDeviceIndicatorInput?: GetMultiDeviceIndicatorInput,
      options?: any,
    ): AxiosPromise<Array<GetMultiDeviceIndicatorOutput>> {
      return localVarFp
        .apiV1MultiDeviceIndicatorListPost(getMultiDeviceIndicatorInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DeviceIndicatorApi - object-oriented interface
 * @export
 * @class DeviceIndicatorApi
 * @extends {BaseAPI}
 */
export class DeviceIndicatorApi extends BaseAPI {
  /**
   *
   * @summary /api
   * @param {Array<DeviceIndicatorEto>} [deviceIndicatorEto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiPost(deviceIndicatorEto?: Array<DeviceIndicatorEto>, options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiPost(deviceIndicatorEto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 批量增加设备指标信息 batch add device indicators
   * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorAddPost(
    addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorAddPost(addDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有设备指标信息 Get all the device indicator information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorAllGet(options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorAllGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除设备指标信息 Delete indicator by id
   * @param {string} [id] 指标ID indicator id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorDeletePost(id?: string, options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorDeletePost(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过Id获取指标信息 Get indicator by id
   * @param {string} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorGetByIdGet(id?: string, options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorGetByIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 初始化设备指标信息，先删除旧的，重新批量新增 init device indicators，delete old data，add new data
   * @param {Array<AddDeviceIndicatorInput>} [addDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorInitPost(
    addDeviceIndicatorInput?: Array<AddDeviceIndicatorInput>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorInitPost(addDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型点位获取其对应的设备指标信息 Get device indicator information by corresponding model points
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorListByModelPointPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorListByModelPointPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取设备下的所有指标信息 Get indicators by device id
   * @param {string} [deviceId] 设备ID device id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorListGet(deviceId?: string, options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorListGet(deviceId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除租户下的所有指标信息 Delete indicators by tenant
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorRemoveAllIndicatorsByTenantPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除设备下的所有指标信息 Delete indicators by device id
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorRemoveMultiDeviceIndicatorsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除设备下的所有指标信息 Delete indicators by device id
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorRemovelistPost(body?: string, options?: AxiosRequestConfig) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorRemovelistPost(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新设备指标信息 Update device indicators
   * @param {UpdateDeviceIndicatorInput} [updateDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1DeviceIndicatorUpdatePost(
    updateDeviceIndicatorInput?: UpdateDeviceIndicatorInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1DeviceIndicatorUpdatePost(updateDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取多个设备下的指标详情 Get indicators of multiple devices
   * @param {GetMultiDeviceIndicatorInput} [getMultiDeviceIndicatorInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeviceIndicatorApi
   */
  public apiV1MultiDeviceIndicatorListPost(
    getMultiDeviceIndicatorInput?: GetMultiDeviceIndicatorInput,
    options?: AxiosRequestConfig,
  ) {
    return DeviceIndicatorApiFp(this.configuration)
      .apiV1MultiDeviceIndicatorListPost(getMultiDeviceIndicatorInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
