/* eslint-disable */
/**
 * 模型映射服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DeleteBoundaryByTemplateInput } from '../models'
// @ts-ignore
import { ModelBoundaryConfigFormatInput } from '../models'
// @ts-ignore
import { ModelBoundaryConfigFormatOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * ModelBoundaryApi - axios parameter creator
 * @export
 */
export const ModelBoundaryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 根据ID列表删除边界条件配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DeleteBoundaryConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/delete-boundary-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模板方案ID删除边界条件配置信息 Delete boundary configuration by template scenario id
     * @param {DeleteBoundaryByTemplateInput} [deleteBoundaryByTemplateInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DeleteByTemplateidPost: async (
      deleteBoundaryByTemplateInput?: DeleteBoundaryByTemplateInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/delete-by-templateid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteBoundaryByTemplateInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in json format
     * @summary 根据模板方案id获取边界条件配置信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2GetBoundaryConfigsGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/get-boundary-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 获取所有边界条件配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2GetallGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/getall`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 修改模型边界条件配置信息，边界与监测点的对应关系以json格式灵活交互 Update boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 修改模型边界条件配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigFormatInput>} [modelBoundaryConfigFormatInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2UpdateModelBoundaryConfigPost: async (
      modelBoundaryConfigFormatInput?: Array<ModelBoundaryConfigFormatInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v2/update-model-boundary-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelBoundaryConfigFormatInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModelBoundaryApi - functional programming interface
 * @export
 */
export const ModelBoundaryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModelBoundaryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据ID列表删除边界条件配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DeleteBoundaryConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DeleteBoundaryConfigsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模板方案ID删除边界条件配置信息 Delete boundary configuration by template scenario id
     * @param {DeleteBoundaryByTemplateInput} [deleteBoundaryByTemplateInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2DeleteByTemplateidPost(
      deleteBoundaryByTemplateInput?: DeleteBoundaryByTemplateInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DeleteByTemplateidPost(
        deleteBoundaryByTemplateInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in json format
     * @summary 根据模板方案id获取边界条件配置信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2GetBoundaryConfigsGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ModelBoundaryConfigFormatOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GetBoundaryConfigsGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 获取所有边界条件配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2GetallGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ModelBoundaryConfigFormatOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GetallGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 修改模型边界条件配置信息，边界与监测点的对应关系以json格式灵活交互 Update boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 修改模型边界条件配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigFormatInput>} [modelBoundaryConfigFormatInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV2UpdateModelBoundaryConfigPost(
      modelBoundaryConfigFormatInput?: Array<ModelBoundaryConfigFormatInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UpdateModelBoundaryConfigPost(
        modelBoundaryConfigFormatInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ModelBoundaryApi - factory interface
 * @export
 */
export const ModelBoundaryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModelBoundaryApiFp(configuration)
  return {
    /**
     *
     * @summary 根据ID列表删除边界条件配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DeleteBoundaryConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2DeleteBoundaryConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模板方案ID删除边界条件配置信息 Delete boundary configuration by template scenario id
     * @param {DeleteBoundaryByTemplateInput} [deleteBoundaryByTemplateInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2DeleteByTemplateidPost(
      deleteBoundaryByTemplateInput?: DeleteBoundaryByTemplateInput,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiV2DeleteByTemplateidPost(deleteBoundaryByTemplateInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in json format
     * @summary 根据模板方案id获取边界条件配置信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2GetBoundaryConfigsGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<ModelBoundaryConfigFormatOutput>> {
      return localVarFp
        .apiV2GetBoundaryConfigsGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 获取所有边界条件配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2GetallGet(options?: any): AxiosPromise<Array<ModelBoundaryConfigFormatOutput>> {
      return localVarFp.apiV2GetallGet(options).then((request) => request(axios, basePath))
    },
    /**
     * 修改模型边界条件配置信息，边界与监测点的对应关系以json格式灵活交互 Update boundary configuration, mapping relations between boundary and asset/device are in json format
     * @summary 修改模型边界条件配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigFormatInput>} [modelBoundaryConfigFormatInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2UpdateModelBoundaryConfigPost(
      modelBoundaryConfigFormatInput?: Array<ModelBoundaryConfigFormatInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV2UpdateModelBoundaryConfigPost(modelBoundaryConfigFormatInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModelBoundaryApi - object-oriented interface
 * @export
 * @class ModelBoundaryApi
 * @extends {BaseAPI}
 */
export class ModelBoundaryApi extends BaseAPI {
  /**
   *
   * @summary 根据ID列表删除边界条件配置信息 Delete boundary configuration by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelBoundaryApi
   */
  public apiV2DeleteBoundaryConfigsPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return ModelBoundaryApiFp(this.configuration)
      .apiV2DeleteBoundaryConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模板方案ID删除边界条件配置信息 Delete boundary configuration by template scenario id
   * @param {DeleteBoundaryByTemplateInput} [deleteBoundaryByTemplateInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelBoundaryApi
   */
  public apiV2DeleteByTemplateidPost(
    deleteBoundaryByTemplateInput?: DeleteBoundaryByTemplateInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelBoundaryApiFp(this.configuration)
      .apiV2DeleteByTemplateidPost(deleteBoundaryByTemplateInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in json format
   * @summary 根据模板方案id获取边界条件配置信息 Get boundary configuration by template scenario id
   * @param {string} [templateScenarioId] 模板方案的ID template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelBoundaryApi
   */
  public apiV2GetBoundaryConfigsGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return ModelBoundaryApiFp(this.configuration)
      .apiV2GetBoundaryConfigsGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取所有的边界配置信息，边界与监测点的对应关系以json格式灵活交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in json format
   * @summary 获取所有边界条件配置信息 Get all the boundary configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelBoundaryApi
   */
  public apiV2GetallGet(options?: AxiosRequestConfig) {
    return ModelBoundaryApiFp(this.configuration)
      .apiV2GetallGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 修改模型边界条件配置信息，边界与监测点的对应关系以json格式灵活交互 Update boundary configuration, mapping relations between boundary and asset/device are in json format
   * @summary 修改模型边界条件配置信息 Update boundary configuration
   * @param {Array<ModelBoundaryConfigFormatInput>} [modelBoundaryConfigFormatInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelBoundaryApi
   */
  public apiV2UpdateModelBoundaryConfigPost(
    modelBoundaryConfigFormatInput?: Array<ModelBoundaryConfigFormatInput>,
    options?: AxiosRequestConfig,
  ) {
    return ModelBoundaryApiFp(this.configuration)
      .apiV2UpdateModelBoundaryConfigPost(modelBoundaryConfigFormatInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
