/* eslint-disable */
/**
 * digital-twin-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { ModelPointOutput } from '../models'
// @ts-ignore
import { ModelPointOutputPage } from '../models'
// @ts-ignore
import { QueryModelPointByConditionInput } from '../models'
// @ts-ignore
import { QueryModelPointByIdsInput } from '../models'
// @ts-ignore
import { QueryModelPointByTypeInput } from '../models'
// @ts-ignore
import { QueryPageModelPointByTypeInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * ModelPointApi - axios parameter creator
 * @export
 */
export const ModelPointApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 根据ID查询模型点位的详细信息，包括属性值 Get model point detailed information by id, including attributes
     * @summary 获取指定模型点位的详细信息 Get model point detailed information by id
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {string} modelId 模型中的ID model muid
     * @param {string} [modelPointType] 模型点位类型 model point type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointAttributesGet: async (
      templateScenarioId: string,
      modelId: string,
      modelPointType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'templateScenarioId' is not null or undefined
      assertParamExists('apiV1ModelPointAttributesGet', 'templateScenarioId', templateScenarioId)
      // verify required parameter 'modelId' is not null or undefined
      assertParamExists('apiV1ModelPointAttributesGet', 'modelId', modelId)
      const localVarPath = `/api/v1/model-point/attributes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['TemplateScenarioId'] = templateScenarioId
      }

      if (modelId !== undefined) {
        localVarQueryParameter['ModelId'] = modelId
      }

      if (modelPointType !== undefined) {
        localVarQueryParameter['ModelPointType'] = modelPointType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryPageModelPointByTypeInput} [queryPageModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointPageSearchByTypePost: async (
      queryPageModelPointByTypeInput?: QueryPageModelPointByTypeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-point/page-search-by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryPageModelPointByTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据属性获取模型点位的详细信息
     * @param {QueryModelPointByConditionInput} [queryModelPointByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByConditionPost: async (
      queryModelPointByConditionInput?: QueryModelPointByConditionInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-point/search-by-condition`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryModelPointByConditionInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据模型点位id查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by model id, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据模型点位id获取模型点位的详细信息 Get model point detailed information by model id
     * @param {QueryModelPointByIdsInput} [queryModelPointByIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByModelIdPost: async (
      queryModelPointByIdsInput?: QueryModelPointByIdsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-point/search-by-model-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryModelPointByIdsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryModelPointByTypeInput} [queryModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByTypePost: async (
      queryModelPointByTypeInput?: QueryModelPointByTypeInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-point/search-by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryModelPointByTypeInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ModelPointApi - functional programming interface
 * @export
 */
export const ModelPointApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModelPointApiAxiosParamCreator(configuration)
  return {
    /**
     * 根据ID查询模型点位的详细信息，包括属性值 Get model point detailed information by id, including attributes
     * @summary 获取指定模型点位的详细信息 Get model point detailed information by id
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {string} modelId 模型中的ID model muid
     * @param {string} [modelPointType] 模型点位类型 model point type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelPointAttributesGet(
      templateScenarioId: string,
      modelId: string,
      modelPointType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPointOutput>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModelPointAttributesGet(
        templateScenarioId,
        modelId,
        modelPointType,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryPageModelPointByTypeInput} [queryPageModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelPointPageSearchByTypePost(
      queryPageModelPointByTypeInput?: QueryPageModelPointByTypeInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPointOutputPage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModelPointPageSearchByTypePost(
        queryPageModelPointByTypeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据属性获取模型点位的详细信息
     * @param {QueryModelPointByConditionInput} [queryModelPointByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelPointSearchByConditionPost(
      queryModelPointByConditionInput?: QueryModelPointByConditionInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelPointSearchByConditionPost(
          queryModelPointByConditionInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据模型点位id查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by model id, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据模型点位id获取模型点位的详细信息 Get model point detailed information by model id
     * @param {QueryModelPointByIdsInput} [queryModelPointByIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelPointSearchByModelIdPost(
      queryModelPointByIdsInput?: QueryModelPointByIdsInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModelPointSearchByModelIdPost(
        queryModelPointByIdsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryModelPointByTypeInput} [queryModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelPointSearchByTypePost(
      queryModelPointByTypeInput?: QueryModelPointByTypeInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModelPointSearchByTypePost(
        queryModelPointByTypeInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ModelPointApi - factory interface
 * @export
 */
export const ModelPointApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ModelPointApiFp(configuration)
  return {
    /**
     * 根据ID查询模型点位的详细信息，包括属性值 Get model point detailed information by id, including attributes
     * @summary 获取指定模型点位的详细信息 Get model point detailed information by id
     * @param {string} templateScenarioId 模板方案ID template scenario id
     * @param {string} modelId 模型中的ID model muid
     * @param {string} [modelPointType] 模型点位类型 model point type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointAttributesGet(
      templateScenarioId: string,
      modelId: string,
      modelPointType?: string,
      options?: any,
    ): AxiosPromise<ModelPointOutput> {
      return localVarFp
        .apiV1ModelPointAttributesGet(templateScenarioId, modelId, modelPointType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryPageModelPointByTypeInput} [queryPageModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointPageSearchByTypePost(
      queryPageModelPointByTypeInput?: QueryPageModelPointByTypeInput,
      options?: any,
    ): AxiosPromise<ModelPointOutputPage> {
      return localVarFp
        .apiV1ModelPointPageSearchByTypePost(queryPageModelPointByTypeInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据属性获取模型点位的详细信息
     * @param {QueryModelPointByConditionInput} [queryModelPointByConditionInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByConditionPost(
      queryModelPointByConditionInput?: QueryModelPointByConditionInput,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiV1ModelPointSearchByConditionPost(queryModelPointByConditionInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据模型点位id查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by model id, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据模型点位id获取模型点位的详细信息 Get model point detailed information by model id
     * @param {QueryModelPointByIdsInput} [queryModelPointByIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByModelIdPost(
      queryModelPointByIdsInput?: QueryModelPointByIdsInput,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiV1ModelPointSearchByModelIdPost(queryModelPointByIdsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
     * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
     * @param {QueryModelPointByTypeInput} [queryModelPointByTypeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelPointSearchByTypePost(
      queryModelPointByTypeInput?: QueryModelPointByTypeInput,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiV1ModelPointSearchByTypePost(queryModelPointByTypeInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ModelPointApi - object-oriented interface
 * @export
 * @class ModelPointApi
 * @extends {BaseAPI}
 */
export class ModelPointApi extends BaseAPI {
  /**
   * 根据ID查询模型点位的详细信息，包括属性值 Get model point detailed information by id, including attributes
   * @summary 获取指定模型点位的详细信息 Get model point detailed information by id
   * @param {string} templateScenarioId 模板方案ID template scenario id
   * @param {string} modelId 模型中的ID model muid
   * @param {string} [modelPointType] 模型点位类型 model point type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelPointApi
   */
  public apiV1ModelPointAttributesGet(
    templateScenarioId: string,
    modelId: string,
    modelPointType?: string,
    options?: AxiosRequestConfig,
  ) {
    return ModelPointApiFp(this.configuration)
      .apiV1ModelPointAttributesGet(templateScenarioId, modelId, modelPointType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
   * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
   * @param {QueryPageModelPointByTypeInput} [queryPageModelPointByTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelPointApi
   */
  public apiV1ModelPointPageSearchByTypePost(
    queryPageModelPointByTypeInput?: QueryPageModelPointByTypeInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelPointApiFp(this.configuration)
      .apiV1ModelPointPageSearchByTypePost(queryPageModelPointByTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据属性获取模型点位的详细信息
   * @param {QueryModelPointByConditionInput} [queryModelPointByConditionInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelPointApi
   */
  public apiV1ModelPointSearchByConditionPost(
    queryModelPointByConditionInput?: QueryModelPointByConditionInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelPointApiFp(this.configuration)
      .apiV1ModelPointSearchByConditionPost(queryModelPointByConditionInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据模型点位id查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by model id, including attributes, meanwhile ModelIds can be used to filter the model points
   * @summary 根据模型点位id获取模型点位的详细信息 Get model point detailed information by model id
   * @param {QueryModelPointByIdsInput} [queryModelPointByIdsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelPointApi
   */
  public apiV1ModelPointSearchByModelIdPost(
    queryModelPointByIdsInput?: QueryModelPointByIdsInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelPointApiFp(this.configuration)
      .apiV1ModelPointSearchByModelIdPost(queryModelPointByIdsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据点位类型查询模型点位的详细信息，包括属性值，同时可利用ModelIds对返回的模型点位进行过滤 Get model point detailed information by point type, including attributes, meanwhile ModelIds can be used to filter the model points
   * @summary 根据点位类型获取模型点位的详细信息 Get model point detailed information by point type
   * @param {QueryModelPointByTypeInput} [queryModelPointByTypeInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelPointApi
   */
  public apiV1ModelPointSearchByTypePost(
    queryModelPointByTypeInput?: QueryModelPointByTypeInput,
    options?: AxiosRequestConfig,
  ) {
    return ModelPointApiFp(this.configuration)
      .apiV1ModelPointSearchByTypePost(queryModelPointByTypeInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
