/* eslint-disable */
/**
 * digital-twin-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddKeyPointInput } from '../models'
// @ts-ignore
import { AddRealityModelRelationInput } from '../models'
// @ts-ignore
import { GetModelIdsOutput } from '../models'
// @ts-ignore
import { KeyPointIdsInput } from '../models'
// @ts-ignore
import { KeyPointInfo } from '../models'
// @ts-ignore
import { ModelBoundaryConfigInput } from '../models'
// @ts-ignore
import { ModelBoundaryConfigOutput } from '../models'
// @ts-ignore
import { ModelPointListInput } from '../models'
// @ts-ignore
import { ModelPointOutput } from '../models'
// @ts-ignore
import { ModelPointOutputPage } from '../models'
// @ts-ignore
import { RealityModelRelationOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateKeyPointInput } from '../models'
/**
 * PointMapApi - axios parameter creator
 * @export
 */
export const PointMapApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加关键点位 Add key points
     * @param {Array<AddKeyPointInput>} [addKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddKeyPointsPost: async (
      addKeyPointInput?: Array<AddKeyPointInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/add-key-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addKeyPointInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 添加模型边界配置，边界与监测点的对应关系以固定格式交互 Add boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 添加模型边界配置 Add model boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddModelBoundaryConfigPost: async (
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/add-model-boundary-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelBoundaryConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddRealityModelRelationsPost: async (
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/add-reality-model-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addRealityModelRelationInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID列表删除边界配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteBoundaryConfigsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete-boundary-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除关键点位 Delete key points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteKeyPointsPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete-key-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteRealityModelRelationPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete-reality-model-relation`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteRmRelationByTemplateidPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/delete-rm-relation-by-templateid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以固定格式交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in fixed format
     * @summary 根据模板方案id获取边界条件信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的id template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetBoundaryConfigsGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get-boundary-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取关键点位的详细信息 Get key point detailed information
     * @param {string} [id] 关键点位ID key point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetKeyPointDetailsGet: async (
      id?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get-key-point-details`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过关键点位id获取其对应的模型点位信息 Get model point information by key point ids
     * @param {KeyPointIdsInput} [keyPointIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetModelIdsByKeyPointIdsPost: async (
      keyPointIdsInput?: KeyPointIdsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/get-model-ids/by-key-point-ids`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        keyPointIdsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以固定格式交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 获取所有的边界配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetallGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/getall`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID或者名称，搜索关键点位 Search key points by id or name
     * @param {string} [id] 关键点位Id,可为空 key point id, can be empty
     * @param {string} [showName] 关键点位显示名称,可为空 key point show name, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryKeyPointsGet: async (
      id?: string,
      showName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/query/key-points`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id
      }

      if (showName !== undefined) {
        localVarQueryParameter['ShowName'] = showName
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据资产/设备id查询对应的模型点位信息 Get model point detailed information by corresponding asset/device ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchModelPointListByAssetPost: async (
      requestBody?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/search-model-point/list-by-asset`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据点位类型搜索模型点位信息列表，支持分页 Get model point detailed information by type in paging mode
     * @param {ModelPointListInput} [modelPointListInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchModelPointListPost: async (
      modelPointListInput?: ModelPointListInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/search-model-point/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelPointListInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 选择基于资产/设备ID、类型、模型点位ID、模板方案ID等搜索资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point based on asset/device id, type, model point id or template scenario id
     * @summary 根据条件查询资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point
     * @param {string} [entityId] 资产/设备ID，可为空 asset/device id, can be empty
     * @param {number} [entityType] 实体类型，资产或设备，可为空 entity type, Asset or Device, can be empty
     * @param {string} [modelPointId] 模型点位ID，可为空 model point id, can be empty
     * @param {string} [templateId] 模板方案ID，可为空 template scenario id, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchRealityModelRelationsGet: async (
      entityId?: string,
      entityType?: number,
      modelPointId?: string,
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/search-reality-model-relations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (entityId !== undefined) {
        localVarQueryParameter['EntityId'] = entityId
      }

      if (entityType !== undefined) {
        localVarQueryParameter['EntityType'] = entityType
      }

      if (modelPointId !== undefined) {
        localVarQueryParameter['ModelPointId'] = modelPointId
      }

      if (templateId !== undefined) {
        localVarQueryParameter['TemplateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 修改关键点位，可同时删除原来的重要点位与模型点位的映射关系 Update key point information, mapping relations between key point and model point can be deleted
     * @summary 修改关键点位信息 Update key point information
     * @param {Array<UpdateKeyPointInput>} [updateKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UpdateKeyPointPost: async (
      updateKeyPointInput?: Array<UpdateKeyPointInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/update-key-point`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateKeyPointInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 修改边界配置信息，边界与监测点的对应关系以固定格式交互 Update boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 修改模型边界配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UpdateModelBoundaryConfigPost: async (
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/update-model-boundary-config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        modelBoundaryConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PointMapApi - functional programming interface
 * @export
 */
export const PointMapApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PointMapApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 添加关键点位 Add key points
     * @param {Array<AddKeyPointInput>} [addKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AddKeyPointsPost(
      addKeyPointInput?: Array<AddKeyPointInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AddKeyPointsPost(
        addKeyPointInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 添加模型边界配置，边界与监测点的对应关系以固定格式交互 Add boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 添加模型边界配置 Add model boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AddModelBoundaryConfigPost(
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AddModelBoundaryConfigPost(
        modelBoundaryConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AddRealityModelRelationsPost(
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AddRealityModelRelationsPost(
        addRealityModelRelationInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID列表删除边界配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteBoundaryConfigsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteBoundaryConfigsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除关键点位 Delete key points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteKeyPointsPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteKeyPointsPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteRealityModelRelationPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DeleteRealityModelRelationPost(
        requestBody,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DeleteRmRelationByTemplateidPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DeleteRmRelationByTemplateidPost(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以固定格式交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in fixed format
     * @summary 根据模板方案id获取边界条件信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的id template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetBoundaryConfigsGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelBoundaryConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetBoundaryConfigsGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取关键点位的详细信息 Get key point detailed information
     * @param {string} [id] 关键点位ID key point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetKeyPointDetailsGet(
      id?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyPointInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetKeyPointDetailsGet(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过关键点位id获取其对应的模型点位信息 Get model point information by key point ids
     * @param {KeyPointIdsInput} [keyPointIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetModelIdsByKeyPointIdsPost(
      keyPointIdsInput?: KeyPointIdsInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetModelIdsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetModelIdsByKeyPointIdsPost(
        keyPointIdsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以固定格式交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 获取所有的边界配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1GetallGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelBoundaryConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GetallGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID或者名称，搜索关键点位 Search key points by id or name
     * @param {string} [id] 关键点位Id,可为空 key point id, can be empty
     * @param {string} [showName] 关键点位显示名称,可为空 key point show name, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QueryKeyPointsGet(
      id?: string,
      showName?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeyPointInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1QueryKeyPointsGet(
        id,
        showName,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据资产/设备id查询对应的模型点位信息 Get model point detailed information by corresponding asset/device ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchModelPointListByAssetPost(
      requestBody?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelPointOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1SearchModelPointListByAssetPost(requestBody, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据点位类型搜索模型点位信息列表，支持分页 Get model point detailed information by type in paging mode
     * @param {ModelPointListInput} [modelPointListInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchModelPointListPost(
      modelPointListInput?: ModelPointListInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelPointOutputPage>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SearchModelPointListPost(
        modelPointListInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 选择基于资产/设备ID、类型、模型点位ID、模板方案ID等搜索资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point based on asset/device id, type, model point id or template scenario id
     * @summary 根据条件查询资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point
     * @param {string} [entityId] 资产/设备ID，可为空 asset/device id, can be empty
     * @param {number} [entityType] 实体类型，资产或设备，可为空 entity type, Asset or Device, can be empty
     * @param {string} [modelPointId] 模型点位ID，可为空 model point id, can be empty
     * @param {string} [templateId] 模板方案ID，可为空 template scenario id, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1SearchRealityModelRelationsGet(
      entityId?: string,
      entityType?: number,
      modelPointId?: string,
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RealityModelRelationOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SearchRealityModelRelationsGet(
        entityId,
        entityType,
        modelPointId,
        templateId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 修改关键点位，可同时删除原来的重要点位与模型点位的映射关系 Update key point information, mapping relations between key point and model point can be deleted
     * @summary 修改关键点位信息 Update key point information
     * @param {Array<UpdateKeyPointInput>} [updateKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UpdateKeyPointPost(
      updateKeyPointInput?: Array<UpdateKeyPointInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UpdateKeyPointPost(
        updateKeyPointInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 修改边界配置信息，边界与监测点的对应关系以固定格式交互 Update boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 修改模型边界配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UpdateModelBoundaryConfigPost(
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UpdateModelBoundaryConfigPost(
        modelBoundaryConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * PointMapApi - factory interface
 * @export
 */
export const PointMapApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PointMapApiFp(configuration)
  return {
    /**
     *
     * @summary 添加关键点位 Add key points
     * @param {Array<AddKeyPointInput>} [addKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddKeyPointsPost(
      addKeyPointInput?: Array<AddKeyPointInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AddKeyPointsPost(addKeyPointInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 添加模型边界配置，边界与监测点的对应关系以固定格式交互 Add boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 添加模型边界配置 Add model boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddModelBoundaryConfigPost(
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AddModelBoundaryConfigPost(modelBoundaryConfigInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
     * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AddRealityModelRelationsPost(
      addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1AddRealityModelRelationsPost(addRealityModelRelationInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID列表删除边界配置信息 Delete boundary configuration by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteBoundaryConfigsPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeleteBoundaryConfigsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除关键点位 Delete key points
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteKeyPointsPost(requestBody?: Array<string>, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeleteKeyPointsPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteRealityModelRelationPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeleteRealityModelRelationPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DeleteRmRelationByTemplateidPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1DeleteRmRelationByTemplateidPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以固定格式交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in fixed format
     * @summary 根据模板方案id获取边界条件信息 Get boundary configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案的id template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetBoundaryConfigsGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<ModelBoundaryConfigOutput>> {
      return localVarFp
        .apiV1GetBoundaryConfigsGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取关键点位的详细信息 Get key point detailed information
     * @param {string} [id] 关键点位ID key point id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetKeyPointDetailsGet(id?: string, options?: any): AxiosPromise<KeyPointInfo> {
      return localVarFp
        .apiV1GetKeyPointDetailsGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过关键点位id获取其对应的模型点位信息 Get model point information by key point ids
     * @param {KeyPointIdsInput} [keyPointIdsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetModelIdsByKeyPointIdsPost(
      keyPointIdsInput?: KeyPointIdsInput,
      options?: any,
    ): AxiosPromise<Array<GetModelIdsOutput>> {
      return localVarFp
        .apiV1GetModelIdsByKeyPointIdsPost(keyPointIdsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 获取所有的边界配置信息，边界与监测点的对应关系以固定格式交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 获取所有的边界配置信息 Get all the boundary configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1GetallGet(options?: any): AxiosPromise<Array<ModelBoundaryConfigOutput>> {
      return localVarFp.apiV1GetallGet(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID或者名称，搜索关键点位 Search key points by id or name
     * @param {string} [id] 关键点位Id,可为空 key point id, can be empty
     * @param {string} [showName] 关键点位显示名称,可为空 key point show name, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QueryKeyPointsGet(
      id?: string,
      showName?: string,
      options?: any,
    ): AxiosPromise<Array<KeyPointInfo>> {
      return localVarFp
        .apiV1QueryKeyPointsGet(id, showName, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据资产/设备id查询对应的模型点位信息 Get model point detailed information by corresponding asset/device ids
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchModelPointListByAssetPost(
      requestBody?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<ModelPointOutput>> {
      return localVarFp
        .apiV1SearchModelPointListByAssetPost(requestBody, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据点位类型搜索模型点位信息列表，支持分页 Get model point detailed information by type in paging mode
     * @param {ModelPointListInput} [modelPointListInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchModelPointListPost(
      modelPointListInput?: ModelPointListInput,
      options?: any,
    ): AxiosPromise<ModelPointOutputPage> {
      return localVarFp
        .apiV1SearchModelPointListPost(modelPointListInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 选择基于资产/设备ID、类型、模型点位ID、模板方案ID等搜索资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point based on asset/device id, type, model point id or template scenario id
     * @summary 根据条件查询资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point
     * @param {string} [entityId] 资产/设备ID，可为空 asset/device id, can be empty
     * @param {number} [entityType] 实体类型，资产或设备，可为空 entity type, Asset or Device, can be empty
     * @param {string} [modelPointId] 模型点位ID，可为空 model point id, can be empty
     * @param {string} [templateId] 模板方案ID，可为空 template scenario id, can be empty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchRealityModelRelationsGet(
      entityId?: string,
      entityType?: number,
      modelPointId?: string,
      templateId?: string,
      options?: any,
    ): AxiosPromise<Array<RealityModelRelationOutput>> {
      return localVarFp
        .apiV1SearchRealityModelRelationsGet(
          entityId,
          entityType,
          modelPointId,
          templateId,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 修改关键点位，可同时删除原来的重要点位与模型点位的映射关系 Update key point information, mapping relations between key point and model point can be deleted
     * @summary 修改关键点位信息 Update key point information
     * @param {Array<UpdateKeyPointInput>} [updateKeyPointInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UpdateKeyPointPost(
      updateKeyPointInput?: Array<UpdateKeyPointInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1UpdateKeyPointPost(updateKeyPointInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 修改边界配置信息，边界与监测点的对应关系以固定格式交互 Update boundary configuration, mapping relations between boundary and asset/device are in fixed format
     * @summary 修改模型边界配置信息 Update boundary configuration
     * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UpdateModelBoundaryConfigPost(
      modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
      options?: any,
    ): AxiosPromise<boolean> {
      return localVarFp
        .apiV1UpdateModelBoundaryConfigPost(modelBoundaryConfigInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PointMapApi - object-oriented interface
 * @export
 * @class PointMapApi
 * @extends {BaseAPI}
 */
export class PointMapApi extends BaseAPI {
  /**
   *
   * @summary 添加关键点位 Add key points
   * @param {Array<AddKeyPointInput>} [addKeyPointInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1AddKeyPointsPost(
    addKeyPointInput?: Array<AddKeyPointInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1AddKeyPointsPost(addKeyPointInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 添加模型边界配置，边界与监测点的对应关系以固定格式交互 Add boundary configuration, mapping relations between boundary and asset/device are in fixed format
   * @summary 添加模型边界配置 Add model boundary configuration
   * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1AddModelBoundaryConfigPost(
    modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1AddModelBoundaryConfigPost(modelBoundaryConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加资产/设备与模型点位之间的映射关系 Add mapping relation between asset/device and model point
   * @param {Array<AddRealityModelRelationInput>} [addRealityModelRelationInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1AddRealityModelRelationsPost(
    addRealityModelRelationInput?: Array<AddRealityModelRelationInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1AddRealityModelRelationsPost(addRealityModelRelationInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID列表删除边界配置信息 Delete boundary configuration by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1DeleteBoundaryConfigsPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1DeleteBoundaryConfigsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除关键点位 Delete key points
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1DeleteKeyPointsPost(requestBody?: Array<string>, options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1DeleteKeyPointsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1DeleteRealityModelRelationPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1DeleteRealityModelRelationPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据TemplateId列表删除资产/设备与模型点位之间的映射关系 Delete mapping relation between asset/device and model point by TemplateIds
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1DeleteRmRelationByTemplateidPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1DeleteRmRelationByTemplateidPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 根据模板方案id获取边界配置信息，边界与监测点的对应关系以固定格式交互 Get boundary configuration by template scenario id, mapping relations between boundary and asset/device are in fixed format
   * @summary 根据模板方案id获取边界条件信息 Get boundary configuration by template scenario id
   * @param {string} [templateScenarioId] 模板方案的id template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1GetBoundaryConfigsGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1GetBoundaryConfigsGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取关键点位的详细信息 Get key point detailed information
   * @param {string} [id] 关键点位ID key point id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1GetKeyPointDetailsGet(id?: string, options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1GetKeyPointDetailsGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过关键点位id获取其对应的模型点位信息 Get model point information by key point ids
   * @param {KeyPointIdsInput} [keyPointIdsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1GetModelIdsByKeyPointIdsPost(
    keyPointIdsInput?: KeyPointIdsInput,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1GetModelIdsByKeyPointIdsPost(keyPointIdsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 获取所有的边界配置信息，边界与监测点的对应关系以固定格式交互 Get all the boundary configuration, mapping relations between boundary and asset/device are in fixed format
   * @summary 获取所有的边界配置信息 Get all the boundary configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1GetallGet(options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1GetallGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID或者名称，搜索关键点位 Search key points by id or name
   * @param {string} [id] 关键点位Id,可为空 key point id, can be empty
   * @param {string} [showName] 关键点位显示名称,可为空 key point show name, can be empty
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1QueryKeyPointsGet(id?: string, showName?: string, options?: AxiosRequestConfig) {
    return PointMapApiFp(this.configuration)
      .apiV1QueryKeyPointsGet(id, showName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据资产/设备id查询对应的模型点位信息 Get model point detailed information by corresponding asset/device ids
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1SearchModelPointListByAssetPost(
    requestBody?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1SearchModelPointListByAssetPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据点位类型搜索模型点位信息列表，支持分页 Get model point detailed information by type in paging mode
   * @param {ModelPointListInput} [modelPointListInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1SearchModelPointListPost(
    modelPointListInput?: ModelPointListInput,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1SearchModelPointListPost(modelPointListInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 选择基于资产/设备ID、类型、模型点位ID、模板方案ID等搜索资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point based on asset/device id, type, model point id or template scenario id
   * @summary 根据条件查询资产/设备与模型点位之间的映射关系 Search mapping relations between asset/device and model point
   * @param {string} [entityId] 资产/设备ID，可为空 asset/device id, can be empty
   * @param {number} [entityType] 实体类型，资产或设备，可为空 entity type, Asset or Device, can be empty
   * @param {string} [modelPointId] 模型点位ID，可为空 model point id, can be empty
   * @param {string} [templateId] 模板方案ID，可为空 template scenario id, can be empty
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1SearchRealityModelRelationsGet(
    entityId?: string,
    entityType?: number,
    modelPointId?: string,
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1SearchRealityModelRelationsGet(entityId, entityType, modelPointId, templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 修改关键点位，可同时删除原来的重要点位与模型点位的映射关系 Update key point information, mapping relations between key point and model point can be deleted
   * @summary 修改关键点位信息 Update key point information
   * @param {Array<UpdateKeyPointInput>} [updateKeyPointInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1UpdateKeyPointPost(
    updateKeyPointInput?: Array<UpdateKeyPointInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1UpdateKeyPointPost(updateKeyPointInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 修改边界配置信息，边界与监测点的对应关系以固定格式交互 Update boundary configuration, mapping relations between boundary and asset/device are in fixed format
   * @summary 修改模型边界配置信息 Update boundary configuration
   * @param {Array<ModelBoundaryConfigInput>} [modelBoundaryConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PointMapApi
   */
  public apiV1UpdateModelBoundaryConfigPost(
    modelBoundaryConfigInput?: Array<ModelBoundaryConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return PointMapApiFp(this.configuration)
      .apiV1UpdateModelBoundaryConfigPost(modelBoundaryConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
