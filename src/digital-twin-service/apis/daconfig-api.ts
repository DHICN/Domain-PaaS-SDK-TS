/* eslint-disable */
/**
 * digital-twin-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DaConfigOutput } from '../models'
// @ts-ignore
import { IdsInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { SaveDaConfigsInput } from '../models'
// @ts-ignore
import { UpdateDaConfigInput } from '../models'
/**
 * DAConfigApi - axios parameter creator
 * @export
 */
export const DAConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 根据模板方案ID删除实时校正配置信息 Delete DA configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsDeleteByTemplateidPost: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/da-configs/delete-by-templateid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据ID删除实时校正配置项 Delete DA configuration by id
     * @param {IdsInput} [idsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsDeletePost: async (
      idsInput?: IdsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/da-configs/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        idsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取模板方案的实时校正配置信息 Get DA configuration of the template scenario
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsGetGet: async (
      templateScenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/da-configs/get`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (templateScenarioId !== undefined) {
        localVarQueryParameter['templateScenarioId'] = templateScenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存实时校正配置信息 Save DA configuration
     * @param {Array<SaveDaConfigsInput>} [saveDaConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsSavePost: async (
      saveDaConfigsInput?: Array<SaveDaConfigsInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/da-configs/save`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        saveDaConfigsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新模板方案的实时校正配置信息 Update DA configuration of the template scenario
     * @param {Array<UpdateDaConfigInput>} [updateDaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsUpdatePost: async (
      updateDaConfigInput?: Array<UpdateDaConfigInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/da-configs/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDaConfigInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DAConfigApi - functional programming interface
 * @export
 */
export const DAConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DAConfigApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 根据模板方案ID删除实时校正配置信息 Delete DA configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DaConfigsDeleteByTemplateidPost(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1DaConfigsDeleteByTemplateidPost(
          templateScenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据ID删除实时校正配置项 Delete DA configuration by id
     * @param {IdsInput} [idsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DaConfigsDeletePost(
      idsInput?: IdsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DaConfigsDeletePost(
        idsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取模板方案的实时校正配置信息 Get DA configuration of the template scenario
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DaConfigsGetGet(
      templateScenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DaConfigOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DaConfigsGetGet(
        templateScenarioId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存实时校正配置信息 Save DA configuration
     * @param {Array<SaveDaConfigsInput>} [saveDaConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DaConfigsSavePost(
      saveDaConfigsInput?: Array<SaveDaConfigsInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DaConfigsSavePost(
        saveDaConfigsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 更新模板方案的实时校正配置信息 Update DA configuration of the template scenario
     * @param {Array<UpdateDaConfigInput>} [updateDaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1DaConfigsUpdatePost(
      updateDaConfigInput?: Array<UpdateDaConfigInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DaConfigOutput>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DaConfigsUpdatePost(
        updateDaConfigInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DAConfigApi - factory interface
 * @export
 */
export const DAConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DAConfigApiFp(configuration)
  return {
    /**
     *
     * @summary 根据模板方案ID删除实时校正配置信息 Delete DA configuration by template scenario id
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsDeleteByTemplateidPost(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DaConfigsDeleteByTemplateidPost(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据ID删除实时校正配置项 Delete DA configuration by id
     * @param {IdsInput} [idsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsDeletePost(idsInput?: IdsInput, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1DaConfigsDeletePost(idsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取模板方案的实时校正配置信息 Get DA configuration of the template scenario
     * @param {string} [templateScenarioId] 模板方案ID template scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsGetGet(
      templateScenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<DaConfigOutput>> {
      return localVarFp
        .apiV1DaConfigsGetGet(templateScenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存实时校正配置信息 Save DA configuration
     * @param {Array<SaveDaConfigsInput>} [saveDaConfigsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsSavePost(
      saveDaConfigsInput?: Array<SaveDaConfigsInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1DaConfigsSavePost(saveDaConfigsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 更新模板方案的实时校正配置信息 Update DA configuration of the template scenario
     * @param {Array<UpdateDaConfigInput>} [updateDaConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DaConfigsUpdatePost(
      updateDaConfigInput?: Array<UpdateDaConfigInput>,
      options?: any,
    ): AxiosPromise<Array<DaConfigOutput>> {
      return localVarFp
        .apiV1DaConfigsUpdatePost(updateDaConfigInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DAConfigApi - object-oriented interface
 * @export
 * @class DAConfigApi
 * @extends {BaseAPI}
 */
export class DAConfigApi extends BaseAPI {
  /**
   *
   * @summary 根据模板方案ID删除实时校正配置信息 Delete DA configuration by template scenario id
   * @param {string} [templateScenarioId] 模板方案ID template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DAConfigApi
   */
  public apiV1DaConfigsDeleteByTemplateidPost(
    templateScenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return DAConfigApiFp(this.configuration)
      .apiV1DaConfigsDeleteByTemplateidPost(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据ID删除实时校正配置项 Delete DA configuration by id
   * @param {IdsInput} [idsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DAConfigApi
   */
  public apiV1DaConfigsDeletePost(idsInput?: IdsInput, options?: AxiosRequestConfig) {
    return DAConfigApiFp(this.configuration)
      .apiV1DaConfigsDeletePost(idsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取模板方案的实时校正配置信息 Get DA configuration of the template scenario
   * @param {string} [templateScenarioId] 模板方案ID template scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DAConfigApi
   */
  public apiV1DaConfigsGetGet(templateScenarioId?: string, options?: AxiosRequestConfig) {
    return DAConfigApiFp(this.configuration)
      .apiV1DaConfigsGetGet(templateScenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存实时校正配置信息 Save DA configuration
   * @param {Array<SaveDaConfigsInput>} [saveDaConfigsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DAConfigApi
   */
  public apiV1DaConfigsSavePost(
    saveDaConfigsInput?: Array<SaveDaConfigsInput>,
    options?: AxiosRequestConfig,
  ) {
    return DAConfigApiFp(this.configuration)
      .apiV1DaConfigsSavePost(saveDaConfigsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新模板方案的实时校正配置信息 Update DA configuration of the template scenario
   * @param {Array<UpdateDaConfigInput>} [updateDaConfigInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DAConfigApi
   */
  public apiV1DaConfigsUpdatePost(
    updateDaConfigInput?: Array<UpdateDaConfigInput>,
    options?: AxiosRequestConfig,
  ) {
    return DAConfigApiFp(this.configuration)
      .apiV1DaConfigsUpdatePost(updateDaConfigInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
