/* eslint-disable */
/**
 * 方案计算服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
/**
 * UrbanCSScenarioApi - axios parameter creator
 * @export
 */
export const UrbanCSScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：      排水、调度    使用场景：      此接口用于基于模板方案创建排水调度方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据和边界数据默认来自模板方案；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在排水溢流风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以在基础模板方案的基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、开始时间、结束时间等。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建排水调度方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/urbancs/schedule-scenario/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UrbanCSScenarioApi - functional programming interface
 * @export
 */
export const UrbanCSScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UrbanCSScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：      排水、调度    使用场景：      此接口用于基于模板方案创建排水调度方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据和边界数据默认来自模板方案；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在排水溢流风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以在基础模板方案的基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、开始时间、结束时间等。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建排水调度方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * UrbanCSScenarioApi - factory interface
 * @export
 */
export const UrbanCSScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UrbanCSScenarioApiFp(configuration)
  return {
    /**
     * 关键词：      排水、调度    使用场景：      此接口用于基于模板方案创建排水调度方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据和边界数据默认来自模板方案；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在排水溢流风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以在基础模板方案的基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、开始时间、结束时间等。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建排水调度方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UrbanCSScenarioApi - object-oriented interface
 * @export
 * @class UrbanCSScenarioApi
 * @extends {BaseAPI}
 */
export class UrbanCSScenarioApi extends BaseAPI {
  /**
   * 关键词：      排水、调度    使用场景：      此接口用于基于模板方案创建排水调度方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据和边界数据默认来自模板方案；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在排水溢流风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以在基础模板方案的基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、开始时间、结束时间等。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
   * @summary 创建排水调度方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UrbanCSScenarioApi
   */
  public apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return UrbanCSScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeUrbancsScheduleScenarioCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
