/* eslint-disable */
/**
 * 方案计算服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateTraceScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput } from '../models'
/**
 * WDScenarioApi - axios parameter creator
 * @export
 */
export const WDScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：      供水、自动预报        使用场景：      此接口用于构建供水自动预报方案，      该接口通常作为定时滚动计算流程的内部处理环节，由程序触发调用，用户不需要直接调用该接口。若用户直接调用仅是创建了自动预报的方案，后续还将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。    输入：      通常情况下，创建一个供水领域的自动预报方案，BusinessType参数固定为3，LibraryType参数固定为1    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建供水领域自动预报的方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdAutoForecastCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/auto-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建关阀方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdCloseValveCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/close-valve/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建模拟管道冲洗方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdFlushingCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/flushing/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、人工预报方案        使用场景：      此接口用于构建供水人工预报方案        相关背景：      人工预报方案，一般用于对过去某一天的管网工况进行反演模拟    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建人工预报方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdManualForecastCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/manual-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、爆管事故方案        使用场景：      此接口用于构建供水爆管事故方案        相关背景：      爆管事故方案，用于模拟爆管后的管道暴漏以及后续的关阀操作，在调用该接口创建爆管事故方案后，通常还需要进一步编辑保存爆管事故相关的信息，用于方案计算      保存爆管事故信息，参考接口：/api/v1/domain-wd/accident/burst-pipe/add    输出：      如果创建成功，将返回所创建爆管事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建爆管事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPipeBurstAccidentCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/pipe-burst-accident/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、规划评估方案        使用场景：      此接口用于构建供水规划评估方案        相关背景：      规划评估方案，用于模拟在管网改造后的运行工况，在调用该接口创建规划评估方案后，通常还需要进一步编辑保存规划评估相关的信息，用于方案计算      保存编辑的节点，参考接口：/api/v1/model-information/domain-wd/junction/resave      保存编辑的管道，参考接口：/api/v1/model-information/domain-wd/pipe/resave      保存编辑的水泵，参考接口：/api/v1/model-information/domain-wd/pump/resave      保存编辑的水池，参考接口：/api/v1/model-information/domain-wd/tank/resave      保存编辑的阀门，参考接口：/api/v1/model-information/domain-wd/valve/resave      保存编辑的水量，参考接口：/api/v1/model-information/domain-wd/demand/resave    输出：      如果创建成功，将返回所创建规划评估方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建规划评估方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPlanningCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/planning/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、调度方案        使用场景：      此接口用于构建供水调度方案，一般有两种创建调度方案的场景，一种是基于模板方案创建，一种是基于一个已有的方案（例如关阀方案）创建的派生方案        相关背景：      调度方案，可以分为日常调度、关阀调度和事故调度，不管是哪种情况，通常都需要对管网上的水池、泵站、阀门等结构物的压力、流量或开停状况进行设置，模拟不同调度下管网的运行工况，      进而提前分析出最优调度方案，为操作人员提供决策支持    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建调度方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdScheduleCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/schedule/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、水锤模拟方案        使用场景：      此接口用于构建供水水锤模拟方案        相关背景：      水锤模拟方案，用于模拟输水管线发生水锤的情况    输出：      如果创建成功，将返回所创建水锤模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水锤模拟方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWaterhammerCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/waterhammer/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、水质事故方案        使用场景：      此接口用于构建供水水质事故方案        相关背景：      水质事故方案，用于模拟发生水质污染事故后，污染物的在管网中的扩散情况，在调用该接口创建水质事故方案后，通常还需要进一步编辑保存水质事故相关的信息，用于方案计算      保存水质事故信息，参考接口：/api/v1/domain-wd/accident/wq-accident/add    输出：      如果创建成功，将返回所创建水质事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqAccidentCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/wq-accident/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      供水、水质追踪方案        使用场景：      此接口用于构建供水水质追踪方案        相关背景：      水质追踪方案，用于模拟某个管网节点为起点的水质在管网中的扩散情况    输出：      如果创建成功，将返回所创建水质追踪方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质追踪方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateTraceScenarioInput} [dhiDssScenarioComputeWdDtosCreateTraceScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqTraceCreatePost: async (
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateTraceScenarioInput?: DhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/wq-trace/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId != null) {
        localVarHeaderParameter['tenantId'] = String(tenantId)
      }

      if (debugHeaderSign != null) {
        localVarHeaderParameter['debug-header-sign'] = String(debugHeaderSign)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDScenarioApi - functional programming interface
 * @export
 */
export const WDScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：      供水、自动预报        使用场景：      此接口用于构建供水自动预报方案，      该接口通常作为定时滚动计算流程的内部处理环节，由程序触发调用，用户不需要直接调用该接口。若用户直接调用仅是创建了自动预报的方案，后续还将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。    输入：      通常情况下，创建一个供水领域的自动预报方案，BusinessType参数固定为3，LibraryType参数固定为1    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建供水领域自动预报的方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdAutoForecastCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdAutoForecastCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建关阀方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdCloseValveCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdCloseValveCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建模拟管道冲洗方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdFlushingCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdFlushingCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、人工预报方案        使用场景：      此接口用于构建供水人工预报方案        相关背景：      人工预报方案，一般用于对过去某一天的管网工况进行反演模拟    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建人工预报方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdManualForecastCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdManualForecastCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、爆管事故方案        使用场景：      此接口用于构建供水爆管事故方案        相关背景：      爆管事故方案，用于模拟爆管后的管道暴漏以及后续的关阀操作，在调用该接口创建爆管事故方案后，通常还需要进一步编辑保存爆管事故相关的信息，用于方案计算      保存爆管事故信息，参考接口：/api/v1/domain-wd/accident/burst-pipe/add    输出：      如果创建成功，将返回所创建爆管事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建爆管事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、规划评估方案        使用场景：      此接口用于构建供水规划评估方案        相关背景：      规划评估方案，用于模拟在管网改造后的运行工况，在调用该接口创建规划评估方案后，通常还需要进一步编辑保存规划评估相关的信息，用于方案计算      保存编辑的节点，参考接口：/api/v1/model-information/domain-wd/junction/resave      保存编辑的管道，参考接口：/api/v1/model-information/domain-wd/pipe/resave      保存编辑的水泵，参考接口：/api/v1/model-information/domain-wd/pump/resave      保存编辑的水池，参考接口：/api/v1/model-information/domain-wd/tank/resave      保存编辑的阀门，参考接口：/api/v1/model-information/domain-wd/valve/resave      保存编辑的水量，参考接口：/api/v1/model-information/domain-wd/demand/resave    输出：      如果创建成功，将返回所创建规划评估方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建规划评估方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdPlanningCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdPlanningCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、调度方案        使用场景：      此接口用于构建供水调度方案，一般有两种创建调度方案的场景，一种是基于模板方案创建，一种是基于一个已有的方案（例如关阀方案）创建的派生方案        相关背景：      调度方案，可以分为日常调度、关阀调度和事故调度，不管是哪种情况，通常都需要对管网上的水池、泵站、阀门等结构物的压力、流量或开停状况进行设置，模拟不同调度下管网的运行工况，      进而提前分析出最优调度方案，为操作人员提供决策支持    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建调度方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdScheduleCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdScheduleCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、水锤模拟方案        使用场景：      此接口用于构建供水水锤模拟方案        相关背景：      水锤模拟方案，用于模拟输水管线发生水锤的情况    输出：      如果创建成功，将返回所创建水锤模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水锤模拟方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdWaterhammerCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdWaterhammerCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、水质事故方案        使用场景：      此接口用于构建供水水质事故方案        相关背景：      水质事故方案，用于模拟发生水质污染事故后，污染物的在管网中的扩散情况，在调用该接口创建水质事故方案后，通常还需要进一步编辑保存水质事故相关的信息，用于方案计算      保存水质事故信息，参考接口：/api/v1/domain-wd/accident/wq-accident/add    输出：      如果创建成功，将返回所创建水质事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdWqAccidentCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdWqAccidentCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      供水、水质追踪方案        使用场景：      此接口用于构建供水水质追踪方案        相关背景：      水质追踪方案，用于模拟某个管网节点为起点的水质在管网中的扩散情况    输出：      如果创建成功，将返回所创建水质追踪方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质追踪方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateTraceScenarioInput} [dhiDssScenarioComputeWdDtosCreateTraceScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdWqTraceCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateTraceScenarioInput?: DhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdWqTraceCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDScenarioApi - factory interface
 * @export
 */
export const WDScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDScenarioApiFp(configuration)
  return {
    /**
     * 关键词：      供水、自动预报        使用场景：      此接口用于构建供水自动预报方案，      该接口通常作为定时滚动计算流程的内部处理环节，由程序触发调用，用户不需要直接调用该接口。若用户直接调用仅是创建了自动预报的方案，后续还将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。    输入：      通常情况下，创建一个供水领域的自动预报方案，BusinessType参数固定为3，LibraryType参数固定为1    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建供水领域自动预报的方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdAutoForecastCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdAutoForecastCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建关阀方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdCloseValveCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdCloseValveCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建模拟管道冲洗方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdFlushingCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdFlushingCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、人工预报方案        使用场景：      此接口用于构建供水人工预报方案        相关背景：      人工预报方案，一般用于对过去某一天的管网工况进行反演模拟    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建人工预报方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdManualForecastCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdManualForecastCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、爆管事故方案        使用场景：      此接口用于构建供水爆管事故方案        相关背景：      爆管事故方案，用于模拟爆管后的管道暴漏以及后续的关阀操作，在调用该接口创建爆管事故方案后，通常还需要进一步编辑保存爆管事故相关的信息，用于方案计算      保存爆管事故信息，参考接口：/api/v1/domain-wd/accident/burst-pipe/add    输出：      如果创建成功，将返回所创建爆管事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建爆管事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、规划评估方案        使用场景：      此接口用于构建供水规划评估方案        相关背景：      规划评估方案，用于模拟在管网改造后的运行工况，在调用该接口创建规划评估方案后，通常还需要进一步编辑保存规划评估相关的信息，用于方案计算      保存编辑的节点，参考接口：/api/v1/model-information/domain-wd/junction/resave      保存编辑的管道，参考接口：/api/v1/model-information/domain-wd/pipe/resave      保存编辑的水泵，参考接口：/api/v1/model-information/domain-wd/pump/resave      保存编辑的水池，参考接口：/api/v1/model-information/domain-wd/tank/resave      保存编辑的阀门，参考接口：/api/v1/model-information/domain-wd/valve/resave      保存编辑的水量，参考接口：/api/v1/model-information/domain-wd/demand/resave    输出：      如果创建成功，将返回所创建规划评估方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建规划评估方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPlanningCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdPlanningCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、调度方案        使用场景：      此接口用于构建供水调度方案，一般有两种创建调度方案的场景，一种是基于模板方案创建，一种是基于一个已有的方案（例如关阀方案）创建的派生方案        相关背景：      调度方案，可以分为日常调度、关阀调度和事故调度，不管是哪种情况，通常都需要对管网上的水池、泵站、阀门等结构物的压力、流量或开停状况进行设置，模拟不同调度下管网的运行工况，      进而提前分析出最优调度方案，为操作人员提供决策支持    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建调度方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdScheduleCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdScheduleCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、水锤模拟方案        使用场景：      此接口用于构建供水水锤模拟方案        相关背景：      水锤模拟方案，用于模拟输水管线发生水锤的情况    输出：      如果创建成功，将返回所创建水锤模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水锤模拟方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWaterhammerCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdWaterhammerCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、水质事故方案        使用场景：      此接口用于构建供水水质事故方案        相关背景：      水质事故方案，用于模拟发生水质污染事故后，污染物的在管网中的扩散情况，在调用该接口创建水质事故方案后，通常还需要进一步编辑保存水质事故相关的信息，用于方案计算      保存水质事故信息，参考接口：/api/v1/domain-wd/accident/wq-accident/add    输出：      如果创建成功，将返回所创建水质事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质事故方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqAccidentCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdWqAccidentCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      供水、水质追踪方案        使用场景：      此接口用于构建供水水质追踪方案        相关背景：      水质追踪方案，用于模拟某个管网节点为起点的水质在管网中的扩散情况    输出：      如果创建成功，将返回所创建水质追踪方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建水质追踪方案
     * @param {string} [tenantId]
     * @param {string} [debugHeaderSign]
     * @param {DhiDssScenarioComputeWdDtosCreateTraceScenarioInput} [dhiDssScenarioComputeWdDtosCreateTraceScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqTraceCreatePost(
      tenantId?: string,
      debugHeaderSign?: string,
      dhiDssScenarioComputeWdDtosCreateTraceScenarioInput?: DhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdWqTraceCreatePost(
          tenantId,
          debugHeaderSign,
          dhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDScenarioApi - object-oriented interface
 * @export
 * @class WDScenarioApi
 * @extends {BaseAPI}
 */
export class WDScenarioApi extends BaseAPI {
  /**
   * 关键词：      供水、自动预报        使用场景：      此接口用于构建供水自动预报方案，      该接口通常作为定时滚动计算流程的内部处理环节，由程序触发调用，用户不需要直接调用该接口。若用户直接调用仅是创建了自动预报的方案，后续还将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。    输入：      通常情况下，创建一个供水领域的自动预报方案，BusinessType参数固定为3，LibraryType参数固定为1    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建供水领域自动预报的方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdAutoForecastCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdAutoForecastCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建关阀方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdCloseValveCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdCloseValveCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、管道冲洗方案        使用场景：      此接口用于构建供水管道冲洗方案        相关背景：      管道冲洗方案，用于模拟在管网改造后的运行工况，在调用该接口创建管道冲洗方案后，通常还需要进一步编辑保存管道冲洗相关的信息，用于方案计算      保存编辑的管道冲洗信息，参考接口：/api/v1/domain-wd/accident/flushing/add    输出：      如果创建成功，将返回所创建管道冲洗方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建模拟管道冲洗方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdFlushingCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdFlushingCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、人工预报方案        使用场景：      此接口用于构建供水人工预报方案        相关背景：      人工预报方案，一般用于对过去某一天的管网工况进行反演模拟    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建人工预报方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdManualForecastCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdManualForecastCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、爆管事故方案        使用场景：      此接口用于构建供水爆管事故方案        相关背景：      爆管事故方案，用于模拟爆管后的管道暴漏以及后续的关阀操作，在调用该接口创建爆管事故方案后，通常还需要进一步编辑保存爆管事故相关的信息，用于方案计算      保存爆管事故信息，参考接口：/api/v1/domain-wd/accident/burst-pipe/add    输出：      如果创建成功，将返回所创建爆管事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建爆管事故方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、规划评估方案        使用场景：      此接口用于构建供水规划评估方案        相关背景：      规划评估方案，用于模拟在管网改造后的运行工况，在调用该接口创建规划评估方案后，通常还需要进一步编辑保存规划评估相关的信息，用于方案计算      保存编辑的节点，参考接口：/api/v1/model-information/domain-wd/junction/resave      保存编辑的管道，参考接口：/api/v1/model-information/domain-wd/pipe/resave      保存编辑的水泵，参考接口：/api/v1/model-information/domain-wd/pump/resave      保存编辑的水池，参考接口：/api/v1/model-information/domain-wd/tank/resave      保存编辑的阀门，参考接口：/api/v1/model-information/domain-wd/valve/resave      保存编辑的水量，参考接口：/api/v1/model-information/domain-wd/demand/resave    输出：      如果创建成功，将返回所创建规划评估方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建规划评估方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdPlanningCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdPlanningCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、调度方案        使用场景：      此接口用于构建供水调度方案，一般有两种创建调度方案的场景，一种是基于模板方案创建，一种是基于一个已有的方案（例如关阀方案）创建的派生方案        相关背景：      调度方案，可以分为日常调度、关阀调度和事故调度，不管是哪种情况，通常都需要对管网上的水池、泵站、阀门等结构物的压力、流量或开停状况进行设置，模拟不同调度下管网的运行工况，      进而提前分析出最优调度方案，为操作人员提供决策支持    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建调度方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdScheduleCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdScheduleCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、水锤模拟方案        使用场景：      此接口用于构建供水水锤模拟方案        相关背景：      水锤模拟方案，用于模拟输水管线发生水锤的情况    输出：      如果创建成功，将返回所创建水锤模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建水锤模拟方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdWaterhammerCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdWaterhammerCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、水质事故方案        使用场景：      此接口用于构建供水水质事故方案        相关背景：      水质事故方案，用于模拟发生水质污染事故后，污染物的在管网中的扩散情况，在调用该接口创建水质事故方案后，通常还需要进一步编辑保存水质事故相关的信息，用于方案计算      保存水质事故信息，参考接口：/api/v1/domain-wd/accident/wq-accident/add    输出：      如果创建成功，将返回所创建水质事故方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建水质事故方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdWqAccidentCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdWqAccidentCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      供水、水质追踪方案        使用场景：      此接口用于构建供水水质追踪方案        相关背景：      水质追踪方案，用于模拟某个管网节点为起点的水质在管网中的扩散情况    输出：      如果创建成功，将返回所创建水质追踪方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建水质追踪方案
   * @param {string} [tenantId]
   * @param {string} [debugHeaderSign]
   * @param {DhiDssScenarioComputeWdDtosCreateTraceScenarioInput} [dhiDssScenarioComputeWdDtosCreateTraceScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdWqTraceCreatePost(
    tenantId?: string,
    debugHeaderSign?: string,
    dhiDssScenarioComputeWdDtosCreateTraceScenarioInput?: DhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdWqTraceCreatePost(
        tenantId,
        debugHeaderSign,
        dhiDssScenarioComputeWdDtosCreateTraceScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
