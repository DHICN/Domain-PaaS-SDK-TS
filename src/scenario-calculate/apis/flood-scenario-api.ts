/* eslint-disable */
/**
 * 方案计算服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
/**
 * FloodScenarioApi - axios parameter creator
 * @export
 */
export const FloodScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 关键词：      内涝、自动预报        使用场景：      此接口用于构建内涝自动预报方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存，以便于后续计算的时候从数据库获取相应的数据并写入模型。      该接口通常由定时任务调度进行调用，用户不需要直接调用该接口，在该接口完成自动预报方案的创建之后，通常将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。自动预报的模式有两种，一种是以一定的周期定时滚动执行预报，例如每天执行一次预报，每小时执行一次预报等；另一种是以条件进行触发的预报，例如当降雨达到一定条件的时候触发执行滚动预报，当降雨小于某个阈值的时候再停止执行滚动预报。一般情况下，内涝自动预报采用第二种。    输入：      输入初始条件类型，接口会根据初始条件类型自动设置初始场数据。    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝自动预报方案
     * @param {string} [initialConditionType] 初始条件类型，枚举，目前已存在0-2种定义，包括0：不设置初始场；1：热启动初始场；2：局部值初始场
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodAutoScenarioCreatePost: async (
      initialConditionType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/flood/auto-scenario/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (initialConditionType !== undefined) {
        localVarQueryParameter['initialConditionType'] = initialConditionType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      内涝、人工预报    使用场景：      此接口用于创建内涝人工预报方案，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      人工预报，即当自动预报无法满足用户的需求时，比如自动预报所接入的数据有缺失，或者有问题时，用户需要进行人为干预。用户可以通过创建人工预报方案，手动更新模型所需的相关数据，来执行预报。    输入：      输入主要包括方案的名称、描述、开始时间、结束时间、预报时刻、初始场类型等。    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝人工预报方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodManualScenarioCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/flood/manual-scenario/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      内涝、情景模拟    使用场景：      此接口用于创建内涝情景模拟方案，一般直接基于方案库所配置的模板方案来创建。除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      情景模拟方案，用于对一些特定的内涝情形进行模拟分析，可以是某一场历史的降雨条件下的情景、也可以是用户假定的情景。基于情景模拟方案，用户可以灵活设置方案的时间范围、修改方案的初始场数据、各类边界数据、调度规则数据等，通过模拟结果支持对内涝情景的具体分析。    输入：      输入主要包括情景模拟方案的名称、描述、开始时间、结束时间，初始场类型等。    输出：      如果创建成功，将返回所创建情景模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝情景模拟方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScenarioSimulationCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/flood/scenario-simulation/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      内涝、调度    使用场景：      此接口用于基于某一个内涝预报方案创建内涝调度方案，即在预报方案的基础之上，做一些调度设置，对调度的效果进行模拟。除了创建方案之外，此接口也会准备模型计算所需要的初始场数据、边界数据、调度规则等，这些数据默认和选择的基础预报方案一致，直接拷贝入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的调度规则等数据进行编辑，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在内涝风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以基于指定时间段的内涝预报方案来创建调度方案，也可以基于模板方案创建调度方案，并在此基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、对应预报方案的ID等。方案的开始时间和结束时间，不需要输入，会自动和预报方案的时间保持一致。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝调度方案（基于预报方案）
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScheduleScenarioCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/flood/schedule-scenario/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 关键词：      内涝、调度、经验库    使用场景：      此接口用于将一个调度方案转存到经验库中，原调度方案依然留在调度库，会在经验库下新建一个经验方案，并将调度方案的所有数据完整的复制给经验方案。        相关背景：      经验库，类似于专家库，用于保存一些对内涝治理有借鉴意义、指导价值的调度方案，供后续内涝调度参考。用户可以将一些内涝治理效果较好的调度方案转存到经验库中。    输入：      输入包括原调度方案的ID、新创建经验方案的名称等。    输出：      如果创建成功，将返回所创建经验方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 保存内涝调度方案到经验库
     * @param {DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput} [dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost: async (
      dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput?: DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/flood/schedule-scenario/save-to-experience`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FloodScenarioApi - functional programming interface
 * @export
 */
export const FloodScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FloodScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     * 关键词：      内涝、自动预报        使用场景：      此接口用于构建内涝自动预报方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存，以便于后续计算的时候从数据库获取相应的数据并写入模型。      该接口通常由定时任务调度进行调用，用户不需要直接调用该接口，在该接口完成自动预报方案的创建之后，通常将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。自动预报的模式有两种，一种是以一定的周期定时滚动执行预报，例如每天执行一次预报，每小时执行一次预报等；另一种是以条件进行触发的预报，例如当降雨达到一定条件的时候触发执行滚动预报，当降雨小于某个阈值的时候再停止执行滚动预报。一般情况下，内涝自动预报采用第二种。    输入：      输入初始条件类型，接口会根据初始条件类型自动设置初始场数据。    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝自动预报方案
     * @param {string} [initialConditionType] 初始条件类型，枚举，目前已存在0-2种定义，包括0：不设置初始场；1：热启动初始场；2：局部值初始场
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeFloodAutoScenarioCreatePost(
      initialConditionType?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeFloodAutoScenarioCreatePost(
          initialConditionType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      内涝、人工预报    使用场景：      此接口用于创建内涝人工预报方案，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      人工预报，即当自动预报无法满足用户的需求时，比如自动预报所接入的数据有缺失，或者有问题时，用户需要进行人为干预。用户可以通过创建人工预报方案，手动更新模型所需的相关数据，来执行预报。    输入：      输入主要包括方案的名称、描述、开始时间、结束时间、预报时刻、初始场类型等。    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝人工预报方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeFloodManualScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeFloodManualScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      内涝、情景模拟    使用场景：      此接口用于创建内涝情景模拟方案，一般直接基于方案库所配置的模板方案来创建。除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      情景模拟方案，用于对一些特定的内涝情形进行模拟分析，可以是某一场历史的降雨条件下的情景、也可以是用户假定的情景。基于情景模拟方案，用户可以灵活设置方案的时间范围、修改方案的初始场数据、各类边界数据、调度规则数据等，通过模拟结果支持对内涝情景的具体分析。    输入：      输入主要包括情景模拟方案的名称、描述、开始时间、结束时间，初始场类型等。    输出：      如果创建成功，将返回所创建情景模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝情景模拟方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      内涝、调度    使用场景：      此接口用于基于某一个内涝预报方案创建内涝调度方案，即在预报方案的基础之上，做一些调度设置，对调度的效果进行模拟。除了创建方案之外，此接口也会准备模型计算所需要的初始场数据、边界数据、调度规则等，这些数据默认和选择的基础预报方案一致，直接拷贝入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的调度规则等数据进行编辑，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在内涝风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以基于指定时间段的内涝预报方案来创建调度方案，也可以基于模板方案创建调度方案，并在此基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、对应预报方案的ID等。方案的开始时间和结束时间，不需要输入，会自动和预报方案的时间保持一致。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝调度方案（基于预报方案）
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * 关键词：      内涝、调度、经验库    使用场景：      此接口用于将一个调度方案转存到经验库中，原调度方案依然留在调度库，会在经验库下新建一个经验方案，并将调度方案的所有数据完整的复制给经验方案。        相关背景：      经验库，类似于专家库，用于保存一些对内涝治理有借鉴意义、指导价值的调度方案，供后续内涝调度参考。用户可以将一些内涝治理效果较好的调度方案转存到经验库中。    输入：      输入包括原调度方案的ID、新创建经验方案的名称等。    输出：      如果创建成功，将返回所创建经验方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 保存内涝调度方案到经验库
     * @param {DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput} [dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
      dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput?: DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
          dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * FloodScenarioApi - factory interface
 * @export
 */
export const FloodScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FloodScenarioApiFp(configuration)
  return {
    /**
     * 关键词：      内涝、自动预报        使用场景：      此接口用于构建内涝自动预报方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存，以便于后续计算的时候从数据库获取相应的数据并写入模型。      该接口通常由定时任务调度进行调用，用户不需要直接调用该接口，在该接口完成自动预报方案的创建之后，通常将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。自动预报的模式有两种，一种是以一定的周期定时滚动执行预报，例如每天执行一次预报，每小时执行一次预报等；另一种是以条件进行触发的预报，例如当降雨达到一定条件的时候触发执行滚动预报，当降雨小于某个阈值的时候再停止执行滚动预报。一般情况下，内涝自动预报采用第二种。    输入：      输入初始条件类型，接口会根据初始条件类型自动设置初始场数据。    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝自动预报方案
     * @param {string} [initialConditionType] 初始条件类型，枚举，目前已存在0-2种定义，包括0：不设置初始场；1：热启动初始场；2：局部值初始场
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodAutoScenarioCreatePost(
      initialConditionType?: string,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeFloodAutoScenarioCreatePost(initialConditionType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      内涝、人工预报    使用场景：      此接口用于创建内涝人工预报方案，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      人工预报，即当自动预报无法满足用户的需求时，比如自动预报所接入的数据有缺失，或者有问题时，用户需要进行人为干预。用户可以通过创建人工预报方案，手动更新模型所需的相关数据，来执行预报。    输入：      输入主要包括方案的名称、描述、开始时间、结束时间、预报时刻、初始场类型等。    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
     * @summary 创建内涝人工预报方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodManualScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeFloodManualScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      内涝、情景模拟    使用场景：      此接口用于创建内涝情景模拟方案，一般直接基于方案库所配置的模板方案来创建。除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      情景模拟方案，用于对一些特定的内涝情形进行模拟分析，可以是某一场历史的降雨条件下的情景、也可以是用户假定的情景。基于情景模拟方案，用户可以灵活设置方案的时间范围、修改方案的初始场数据、各类边界数据、调度规则数据等，通过模拟结果支持对内涝情景的具体分析。    输入：      输入主要包括情景模拟方案的名称、描述、开始时间、结束时间，初始场类型等。    输出：      如果创建成功，将返回所创建情景模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝情景模拟方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      内涝、调度    使用场景：      此接口用于基于某一个内涝预报方案创建内涝调度方案，即在预报方案的基础之上，做一些调度设置，对调度的效果进行模拟。除了创建方案之外，此接口也会准备模型计算所需要的初始场数据、边界数据、调度规则等，这些数据默认和选择的基础预报方案一致，直接拷贝入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的调度规则等数据进行编辑，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在内涝风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以基于指定时间段的内涝预报方案来创建调度方案，也可以基于模板方案创建调度方案，并在此基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、对应预报方案的ID等。方案的开始时间和结束时间，不需要输入，会自动和预报方案的时间保持一致。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 创建内涝调度方案（基于预报方案）
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 关键词：      内涝、调度、经验库    使用场景：      此接口用于将一个调度方案转存到经验库中，原调度方案依然留在调度库，会在经验库下新建一个经验方案，并将调度方案的所有数据完整的复制给经验方案。        相关背景：      经验库，类似于专家库，用于保存一些对内涝治理有借鉴意义、指导价值的调度方案，供后续内涝调度参考。用户可以将一些内涝治理效果较好的调度方案转存到经验库中。    输入：      输入包括原调度方案的ID、新创建经验方案的名称等。    输出：      如果创建成功，将返回所创建经验方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
     * @summary 保存内涝调度方案到经验库
     * @param {DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput} [dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
      dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput?: DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
          dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * FloodScenarioApi - object-oriented interface
 * @export
 * @class FloodScenarioApi
 * @extends {BaseAPI}
 */
export class FloodScenarioApi extends BaseAPI {
  /**
   * 关键词：      内涝、自动预报        使用场景：      此接口用于构建内涝自动预报方案，除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存，以便于后续计算的时候从数据库获取相应的数据并写入模型。      该接口通常由定时任务调度进行调用，用户不需要直接调用该接口，在该接口完成自动预报方案的创建之后，通常将调用ModelDriver计算服务的/ModelRun/RunModel接口来执行该方案的计算。        相关背景：      自动预报，即以一定规则在后台自动执行的预报，不需要人为干预。自动预报的模式有两种，一种是以一定的周期定时滚动执行预报，例如每天执行一次预报，每小时执行一次预报等；另一种是以条件进行触发的预报，例如当降雨达到一定条件的时候触发执行滚动预报，当降雨小于某个阈值的时候再停止执行滚动预报。一般情况下，内涝自动预报采用第二种。    输入：      输入初始条件类型，接口会根据初始条件类型自动设置初始场数据。    输出：      如果创建成功，将返回所创建自动预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建内涝自动预报方案
   * @param {string} [initialConditionType] 初始条件类型，枚举，目前已存在0-2种定义，包括0：不设置初始场；1：热启动初始场；2：局部值初始场
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FloodScenarioApi
   */
  public apiV1ScenarioComputeFloodAutoScenarioCreatePost(
    initialConditionType?: string,
    options?: AxiosRequestConfig,
  ) {
    return FloodScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeFloodAutoScenarioCreatePost(initialConditionType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      内涝、人工预报    使用场景：      此接口用于创建内涝人工预报方案，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      人工预报，即当自动预报无法满足用户的需求时，比如自动预报所接入的数据有缺失，或者有问题时，用户需要进行人为干预。用户可以通过创建人工预报方案，手动更新模型所需的相关数据，来执行预报。    输入：      输入主要包括方案的名称、描述、开始时间、结束时间、预报时刻、初始场类型等。    输出：      如果创建成功，将返回所创建人工预报方案的具体信息，包括方案ID，方案名称、开始时间、结束时间、预报时刻等。
   * @summary 创建内涝人工预报方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FloodScenarioApi
   */
  public apiV1ScenarioComputeFloodManualScenarioCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return FloodScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeFloodManualScenarioCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      内涝、情景模拟    使用场景：      此接口用于创建内涝情景模拟方案，一般直接基于方案库所配置的模板方案来创建。除了创建方案之外，也会准备模型计算所需要的初始场数据、边界数据、调度规则等，其中初始场数据根据项目的实际情况，既可以选择热启动文件，也可以选择实测数据作为局部初始场数据；边界数据来源优先选择实测数据；调度规则默认取调度策略库中降雨为0的调度规则。完成各类数据的构建之后将其入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的初始场数据、边界数据、调度规则等进行编辑和修正，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/initial-condition/hotstart/update接口用于设置热启动初始场数据；      模型信息服务的/api/v1/model-information/initial-condition/local-values/update接口用于设置局部初始场数据；      模型信息服务的/api/v1/model-information/boundary/timeseries/update接口用于设置边界数据，包括部分闸、泵调度时间序列数据；      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      情景模拟方案，用于对一些特定的内涝情形进行模拟分析，可以是某一场历史的降雨条件下的情景、也可以是用户假定的情景。基于情景模拟方案，用户可以灵活设置方案的时间范围、修改方案的初始场数据、各类边界数据、调度规则数据等，通过模拟结果支持对内涝情景的具体分析。    输入：      输入主要包括情景模拟方案的名称、描述、开始时间、结束时间，初始场类型等。    输出：      如果创建成功，将返回所创建情景模拟方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
   * @summary 创建内涝情景模拟方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FloodScenarioApi
   */
  public apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return FloodScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeFloodScenarioSimulationCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      内涝、调度    使用场景：      此接口用于基于某一个内涝预报方案创建内涝调度方案，即在预报方案的基础之上，做一些调度设置，对调度的效果进行模拟。除了创建方案之外，此接口也会准备模型计算所需要的初始场数据、边界数据、调度规则等，这些数据默认和选择的基础预报方案一致，直接拷贝入库保存。      在完成该方案的创建之后，用户往往还需要通过系统界面对默认设置的调度规则等数据进行编辑，并更新到数据库中，以便于后续计算的时候从数据库获取相应的数据并写入模型。相关接口如下：      模型信息服务的/api/v1/model-information/control-rule/update接口用于设置调度规则数据；      ModelDriver计算服务的/ModelRun/RunModel接口用于执行方案的计算。    相关背景：      调度方案，当用户发现存在内涝风险时，往往需要考虑调度的措施来降低风险，此时用户可以考虑创建调度方案来进行措施的效果模拟。用户可以基于指定时间段的内涝预报方案来创建调度方案，也可以基于模板方案创建调度方案，并在此基础之上，进一步修改其泵、闸、阀等结构物的调度规则，通过模拟来辅助判断有效的调度措施。    输入：      输入主要包括调度方案的名称、描述、对应预报方案的ID等。方案的开始时间和结束时间，不需要输入，会自动和预报方案的时间保持一致。    输出：      如果创建成功，将返回所创建调度方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
   * @summary 创建内涝调度方案（基于预报方案）
   * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FloodScenarioApi
   */
  public apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return FloodScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeFloodScheduleScenarioCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 关键词：      内涝、调度、经验库    使用场景：      此接口用于将一个调度方案转存到经验库中，原调度方案依然留在调度库，会在经验库下新建一个经验方案，并将调度方案的所有数据完整的复制给经验方案。        相关背景：      经验库，类似于专家库，用于保存一些对内涝治理有借鉴意义、指导价值的调度方案，供后续内涝调度参考。用户可以将一些内涝治理效果较好的调度方案转存到经验库中。    输入：      输入包括原调度方案的ID、新创建经验方案的名称等。    输出：      如果创建成功，将返回所创建经验方案的具体信息，包括方案ID，方案名称、开始时间、结束时间等。
   * @summary 保存内涝调度方案到经验库
   * @param {DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput} [dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FloodScenarioApi
   */
  public apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
    dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput?: DhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
    options?: AxiosRequestConfig,
  ) {
    return FloodScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeFloodScheduleScenarioSaveToExperiencePost(
        dhiDssScenarioComputeFloodDtosSaveScenarioToExperienceInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
