/* eslint-disable */
/**
 * scenario-compute-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeDaprServicesDtosModelBoundaryConfigOutput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeDaprServicesDtosRunModelInfo } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosDeviceIndicatorOutput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
// @ts-ignore
import { VoloAbpHttpRemoteServiceErrorResponse } from '../models'
/**
 * DaprApi - axios parameter creator
 * @export
 */
export const DaprApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 创建自动预报方案
     * @param {string} tenantId
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprAutoComputeTenantIdPost: async (
      tenantId: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tenantId' is not null or undefined
      assertParamExists('apiAppDaprAutoComputeTenantIdPost', 'tenantId', tenantId)
      const localVarPath = `/api/app/dapr/auto-compute/{tenantId}`.replace(
        `{${'tenantId'}}`,
        encodeURIComponent(String(tenantId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据设备指标Id 获取指标的详细信息，
     * @param {string} [tenantId]
     * @param {string} [indicatorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprDeviceIndicatorByIdGet: async (
      tenantId?: string,
      indicatorId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/dapr/device-indicator-by-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (indicatorId !== undefined) {
        localVarQueryParameter['indicatorId'] = indicatorId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取编辑条件配置
     * @param {string} [tenantId]
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprModelBoundariesGet: async (
      tenantId?: string,
      templateId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/dapr/model-boundaries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['tenantId'] = tenantId
      }

      if (templateId !== undefined) {
        localVarQueryParameter['templateId'] = templateId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/dapr/rainfall-data
     * @param {string} [tenantId]
     * @param {string} [deviceId]
     * @param {string} [indicator]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprRainfallDataGet: async (
      tenantId?: string,
      deviceId?: string,
      indicator?: string,
      startTime?: string,
      endTime?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/dapr/rainfall-data`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['TenantId'] = tenantId
      }

      if (deviceId !== undefined) {
        localVarQueryParameter['DeviceId'] = deviceId
      }

      if (indicator !== undefined) {
        localVarQueryParameter['Indicator'] = indicator
      }

      if (startTime !== undefined) {
        localVarQueryParameter['StartTime'] = startTime
      }

      if (endTime !== undefined) {
        localVarQueryParameter['EndTime'] = endTime
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过ModelDriver 运行模型
     * @param {DhiDssScenarioComputeDaprServicesDtosRunModelInfo} [dhiDssScenarioComputeDaprServicesDtosRunModelInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprRunModelPost: async (
      dhiDssScenarioComputeDaprServicesDtosRunModelInfo?: DhiDssScenarioComputeDaprServicesDtosRunModelInfo,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/dapr/run-model`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeDaprServicesDtosRunModelInfo,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DaprApi - functional programming interface
 * @export
 */
export const DaprApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DaprApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 创建自动预报方案
     * @param {string} tenantId
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppDaprAutoComputeTenantIdPost(
      tenantId: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDaprAutoComputeTenantIdPost(
        tenantId,
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据设备指标Id 获取指标的详细信息，
     * @param {string} [tenantId]
     * @param {string} [indicatorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppDaprDeviceIndicatorByIdGet(
      tenantId?: string,
      indicatorId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosDeviceIndicatorOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDaprDeviceIndicatorByIdGet(
        tenantId,
        indicatorId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取编辑条件配置
     * @param {string} [tenantId]
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppDaprModelBoundariesGet(
      tenantId?: string,
      templateId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<DhiDssScenarioComputeDaprServicesDtosModelBoundaryConfigOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDaprModelBoundariesGet(
        tenantId,
        templateId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/dapr/rainfall-data
     * @param {string} [tenantId]
     * @param {string} [deviceId]
     * @param {string} [indicator]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppDaprRainfallDataGet(
      tenantId?: string,
      deviceId?: string,
      indicator?: string,
      startTime?: string,
      endTime?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDaprRainfallDataGet(
        tenantId,
        deviceId,
        indicator,
        startTime,
        endTime,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过ModelDriver 运行模型
     * @param {DhiDssScenarioComputeDaprServicesDtosRunModelInfo} [dhiDssScenarioComputeDaprServicesDtosRunModelInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppDaprRunModelPost(
      dhiDssScenarioComputeDaprServicesDtosRunModelInfo?: DhiDssScenarioComputeDaprServicesDtosRunModelInfo,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDaprRunModelPost(
        dhiDssScenarioComputeDaprServicesDtosRunModelInfo,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DaprApi - factory interface
 * @export
 */
export const DaprApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DaprApiFp(configuration)
  return {
    /**
     *
     * @summary 创建自动预报方案
     * @param {string} tenantId
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprAutoComputeTenantIdPost(
      tenantId: string,
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiAppDaprAutoComputeTenantIdPost(
          tenantId,
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据设备指标Id 获取指标的详细信息，
     * @param {string} [tenantId]
     * @param {string} [indicatorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprDeviceIndicatorByIdGet(
      tenantId?: string,
      indicatorId?: string,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosDeviceIndicatorOutput> {
      return localVarFp
        .apiAppDaprDeviceIndicatorByIdGet(tenantId, indicatorId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取编辑条件配置
     * @param {string} [tenantId]
     * @param {string} [templateId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprModelBoundariesGet(
      tenantId?: string,
      templateId?: string,
      options?: any,
    ): AxiosPromise<Array<DhiDssScenarioComputeDaprServicesDtosModelBoundaryConfigOutput>> {
      return localVarFp
        .apiAppDaprModelBoundariesGet(tenantId, templateId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/dapr/rainfall-data
     * @param {string} [tenantId]
     * @param {string} [deviceId]
     * @param {string} [indicator]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprRainfallDataGet(
      tenantId?: string,
      deviceId?: string,
      indicator?: string,
      startTime?: string,
      endTime?: string,
      options?: any,
    ): AxiosPromise<number> {
      return localVarFp
        .apiAppDaprRainfallDataGet(tenantId, deviceId, indicator, startTime, endTime, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过ModelDriver 运行模型
     * @param {DhiDssScenarioComputeDaprServicesDtosRunModelInfo} [dhiDssScenarioComputeDaprServicesDtosRunModelInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppDaprRunModelPost(
      dhiDssScenarioComputeDaprServicesDtosRunModelInfo?: DhiDssScenarioComputeDaprServicesDtosRunModelInfo,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAppDaprRunModelPost(dhiDssScenarioComputeDaprServicesDtosRunModelInfo, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DaprApi - object-oriented interface
 * @export
 * @class DaprApi
 * @extends {BaseAPI}
 */
export class DaprApi extends BaseAPI {
  /**
   *
   * @summary 创建自动预报方案
   * @param {string} tenantId
   * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DaprApi
   */
  public apiAppDaprAutoComputeTenantIdPost(
    tenantId: string,
    dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return DaprApiFp(this.configuration)
      .apiAppDaprAutoComputeTenantIdPost(
        tenantId,
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据设备指标Id 获取指标的详细信息，
   * @param {string} [tenantId]
   * @param {string} [indicatorId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DaprApi
   */
  public apiAppDaprDeviceIndicatorByIdGet(
    tenantId?: string,
    indicatorId?: string,
    options?: AxiosRequestConfig,
  ) {
    return DaprApiFp(this.configuration)
      .apiAppDaprDeviceIndicatorByIdGet(tenantId, indicatorId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取编辑条件配置
   * @param {string} [tenantId]
   * @param {string} [templateId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DaprApi
   */
  public apiAppDaprModelBoundariesGet(
    tenantId?: string,
    templateId?: string,
    options?: AxiosRequestConfig,
  ) {
    return DaprApiFp(this.configuration)
      .apiAppDaprModelBoundariesGet(tenantId, templateId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/dapr/rainfall-data
   * @param {string} [tenantId]
   * @param {string} [deviceId]
   * @param {string} [indicator]
   * @param {string} [startTime]
   * @param {string} [endTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DaprApi
   */
  public apiAppDaprRainfallDataGet(
    tenantId?: string,
    deviceId?: string,
    indicator?: string,
    startTime?: string,
    endTime?: string,
    options?: AxiosRequestConfig,
  ) {
    return DaprApiFp(this.configuration)
      .apiAppDaprRainfallDataGet(tenantId, deviceId, indicator, startTime, endTime, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过ModelDriver 运行模型
   * @param {DhiDssScenarioComputeDaprServicesDtosRunModelInfo} [dhiDssScenarioComputeDaprServicesDtosRunModelInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DaprApi
   */
  public apiAppDaprRunModelPost(
    dhiDssScenarioComputeDaprServicesDtosRunModelInfo?: DhiDssScenarioComputeDaprServicesDtosRunModelInfo,
    options?: AxiosRequestConfig,
  ) {
    return DaprApiFp(this.configuration)
      .apiAppDaprRunModelPost(dhiDssScenarioComputeDaprServicesDtosRunModelInfo, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
