/* eslint-disable */
/**
 * 方案计算服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput } from '../models'
// @ts-ignore
import { VoloAbpHttpRemoteServiceErrorResponse } from '../models'
/**
 * WDScenarioApi - axios parameter creator
 * @export
 */
export const WDScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 创建供水领域自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdAutoForecastCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/auto-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建关阀方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdCloseValveCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/close-valve/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除方案和方案的模型数据
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdDeleteScenarioGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/delete-scenario`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建模拟管道冲洗方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdFlushingCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/flushing/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建人工预报方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdManualForecastCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/manual-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建爆管事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPipeBurstAccidentCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/pipe-burst-accident/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建规划评估方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPlanningCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/planning/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建调度方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdScheduleCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/schedule/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建水锤模拟方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWaterhammerCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/waterhammer/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建水质事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqAccidentCreatePost: async (
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wd/wq-accident/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDScenarioApi - functional programming interface
 * @export
 */
export const WDScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 创建供水领域自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建关阀方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdCloseValveCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdCloseValveCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除方案和方案的模型数据
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdDeleteScenarioGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdDeleteScenarioGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建模拟管道冲洗方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdFlushingCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdFlushingCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建人工预报方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdManualForecastCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdManualForecastCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建爆管事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建规划评估方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdPlanningCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdPlanningCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建调度方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdScheduleCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdScheduleCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建水锤模拟方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdWaterhammerCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdWaterhammerCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建水质事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWdWqAccidentCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWdWqAccidentCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDScenarioApi - factory interface
 * @export
 */
export const WDScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDScenarioApiFp(configuration)
  return {
    /**
     *
     * @summary 创建供水领域自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建关阀方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdCloseValveCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdCloseValveCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除方案和方案的模型数据
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdDeleteScenarioGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ScenarioComputeWdDeleteScenarioGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建模拟管道冲洗方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdFlushingCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdFlushingCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建人工预报方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdManualForecastCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdManualForecastCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建爆管事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建规划评估方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdPlanningCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdPlanningCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建调度方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdScheduleCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdScheduleCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建水锤模拟方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWaterhammerCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdWaterhammerCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建水质事故方案
     * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWdWqAccidentCreatePost(
      dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWdWqAccidentCreatePost(
          dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDScenarioApi - object-oriented interface
 * @export
 * @class WDScenarioApi
 * @extends {BaseAPI}
 */
export class WDScenarioApi extends BaseAPI {
  /**
   *
   * @summary 创建供水领域自动预报的方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdAutoForecastCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdAutoForecastCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建关阀方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdCloseValveCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdCloseValveCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除方案和方案的模型数据
   * @param {string} [scenarioId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdDeleteScenarioGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdDeleteScenarioGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建模拟管道冲洗方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdFlushingCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdFlushingCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdFlushingScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建人工预报方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdManualForecastCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdManualForecastCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdCloseValveScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建爆管事故方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdPipeBurstAccidentCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdPipeBurstAccidentScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建规划评估方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdPlanningCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdPlanningCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdPlanningScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建调度方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdScheduleCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdScheduleCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdScheduleScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建水锤模拟方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdWaterhammerCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdWaterhammerCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdWaterHammerScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建水质事故方案
   * @param {DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput} [dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDScenarioApi
   */
  public apiV1ScenarioComputeWdWqAccidentCreatePost(
    dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput?: DhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return WDScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWdWqAccidentCreatePost(
        dhiDssScenarioComputeWdDtosCreateWdwqAccidentScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
