/* eslint-disable */
/**
 * scenario-compute-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
// @ts-ignore
import { VoloAbpHttpRemoteServiceErrorResponse } from '../models'
/**
 * RFScenarioApi - axios parameter creator
 * @export
 */
export const RFScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 创建流域洪水自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodAutoForecastCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/river-flood/auto-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建行蓄洪区调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput} [dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost: async (
      dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput?: DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/river-flood/flood-storage-area/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建流域洪水人工预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodManualForecastCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/river-flood/manual-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建流域洪水调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodScheduleCreatePost: async (
      dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/river-flood/schedule/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RFScenarioApi - functional programming interface
 * @export
 */
export const RFScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RFScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 创建流域洪水自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建行蓄洪区调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput} [dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
      dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput?: DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
          dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建流域洪水人工预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建流域洪水调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeRiverFloodScheduleCreatePost(
      dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeRiverFloodScheduleCreatePost(
          dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * RFScenarioApi - factory interface
 * @export
 */
export const RFScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RFScenarioApiFp(configuration)
  return {
    /**
     *
     * @summary 创建流域洪水自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建行蓄洪区调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput} [dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
      dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput?: DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
          dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建流域洪水人工预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建流域洪水调度的方案
     * @param {DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeRiverFloodScheduleCreatePost(
      dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeRiverFloodScheduleCreatePost(
          dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * RFScenarioApi - object-oriented interface
 * @export
 * @class RFScenarioApi
 * @extends {BaseAPI}
 */
export class RFScenarioApi extends BaseAPI {
  /**
   *
   * @summary 创建流域洪水自动预报的方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFScenarioApi
   */
  public apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return RFScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeRiverFloodAutoForecastCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建行蓄洪区调度的方案
   * @param {DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput} [dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFScenarioApi
   */
  public apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
    dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput?: DhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return RFScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeRiverFloodFloodStorageAreaCreatePost(
        dhiDssScenarioComputeRfDtosCreateFloodStorageAreaScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建流域洪水人工预报的方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFScenarioApi
   */
  public apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return RFScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeRiverFloodManualForecastCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateManualScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建流域洪水调度的方案
   * @param {DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RFScenarioApi
   */
  public apiV1ScenarioComputeRiverFloodScheduleCreatePost(
    dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return RFScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeRiverFloodScheduleCreatePost(
        dhiDssScenarioComputeRfDtosCreateScheduleScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
