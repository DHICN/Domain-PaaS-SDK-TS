/* eslint-disable */
/**
 * scenario-compute-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput } from '../models'
// @ts-ignore
import { DhiDssScenarioComputeScenarioDtosScenarioInfo } from '../models'
// @ts-ignore
import { VoloAbpHttpRemoteServiceErrorResponse } from '../models'
/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export const ScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 通过TenantId、BusinessType、libraryType 获取模板方案
     * @param {string} tenantId
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppScenarioTempalteScenarioTenantIdGet: async (
      tenantId: string,
      businessType?: number,
      libraryType?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tenantId' is not null or undefined
      assertParamExists('apiAppScenarioTempalteScenarioTenantIdGet', 'tenantId', tenantId)
      const localVarPath = `/api/app/scenario/tempalte-scenario/{tenantId}`.replace(
        `{${'tenantId'}}`,
        encodeURIComponent(String(tenantId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (businessType !== undefined) {
        localVarQueryParameter['businessType'] = businessType
      }

      if (libraryType !== undefined) {
        localVarQueryParameter['libraryType'] = libraryType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 突发水污染事故方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqAccidentCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wq/accident/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqAutoForecastCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wq/auto-forecast/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 事故措施方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqResponseCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wq/response/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 情景模拟方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqScenarioCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wq/scenario/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 优化调度方案创建   父方案没有边界数据
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqScheduleCreatePost: async (
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/scenario-compute/wq/schedule/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 通过TenantId、BusinessType、libraryType 获取模板方案
     * @param {string} tenantId
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppScenarioTempalteScenarioTenantIdGet(
      tenantId: string,
      businessType?: number,
      libraryType?: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppScenarioTempalteScenarioTenantIdGet(
          tenantId,
          businessType,
          libraryType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 突发水污染事故方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWqAccidentCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWqAccidentCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 创建自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWqAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWqAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 事故措施方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWqResponseCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWqResponseCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 情景模拟方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWqScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWqScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 优化调度方案创建   父方案没有边界数据
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ScenarioComputeWqScheduleCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ScenarioComputeWqScheduleCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScenarioApi - factory interface
 * @export
 */
export const ScenarioApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScenarioApiFp(configuration)
  return {
    /**
     *
     * @summary 通过TenantId、BusinessType、libraryType 获取模板方案
     * @param {string} tenantId
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppScenarioTempalteScenarioTenantIdGet(
      tenantId: string,
      businessType?: number,
      libraryType?: number,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiAppScenarioTempalteScenarioTenantIdGet(tenantId, businessType, libraryType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 突发水污染事故方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqAccidentCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWqAccidentCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 创建自动预报的方案
     * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqAutoForecastCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWqAutoForecastCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 事故措施方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqResponseCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWqResponseCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 情景模拟方案创建
     * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqScenarioCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWqScenarioCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 优化调度方案创建   父方案没有边界数据
     * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ScenarioComputeWqScheduleCreatePost(
      dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
      options?: any,
    ): AxiosPromise<DhiDssScenarioComputeScenarioDtosScenarioInfo> {
      return localVarFp
        .apiV1ScenarioComputeWqScheduleCreatePost(
          dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
  /**
   *
   * @summary 通过TenantId、BusinessType、libraryType 获取模板方案
   * @param {string} tenantId
   * @param {number} [businessType]
   * @param {number} [libraryType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiAppScenarioTempalteScenarioTenantIdGet(
    tenantId: string,
    businessType?: number,
    libraryType?: number,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiAppScenarioTempalteScenarioTenantIdGet(tenantId, businessType, libraryType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 突发水污染事故方案创建
   * @param {DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ScenarioComputeWqAccidentCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWqAccidentCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateWqAccidentScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建自动预报的方案
   * @param {DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ScenarioComputeWqAutoForecastCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWqAutoForecastCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateAutoScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 事故措施方案创建
   * @param {DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ScenarioComputeWqResponseCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWqResponseCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateResponseScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 情景模拟方案创建
   * @param {DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ScenarioComputeWqScenarioCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWqScenarioCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateSceneScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 优化调度方案创建   父方案没有边界数据
   * @param {DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput} [dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScenarioApi
   */
  public apiV1ScenarioComputeWqScheduleCreatePost(
    dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput?: DhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
    options?: AxiosRequestConfig,
  ) {
    return ScenarioApiFp(this.configuration)
      .apiV1ScenarioComputeWqScheduleCreatePost(
        dhiDssScenarioComputeScenarioDtosCreateScheduleScenarioInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
