/* eslint-disable */
/**
 * scenario-compute-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { VoloAbpHttpRemoteServiceErrorResponse } from '../models'
/**
 * TaskScheduleApi - axios parameter creator
 * @export
 */
export const TaskScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 1 注册调度服务，定时一分钟的任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleResgisterScheduleTaskPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/TaskSchedule/ResgisterScheduleTask`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 2 执行回调，扫描租户配置数据，按注册时的频率来扫描
     * @param {string} [systemId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleScanAutoForecastConfigGet: async (
      systemId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/TaskSchedule/ScanAutoForecastConfig`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (systemId !== undefined) {
        localVarQueryParameter['systemId'] = systemId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 3 调度服务回调,创建对应的方案
     * @param {string} [tenantId]
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleScheduleInvokeMethodGet: async (
      tenantId?: string,
      businessType?: number,
      libraryType?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/TaskSchedule/ScheduleInvokeMethod`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (tenantId !== undefined) {
        localVarQueryParameter['TenantId'] = tenantId
      }

      if (businessType !== undefined) {
        localVarQueryParameter['BusinessType'] = businessType
      }

      if (libraryType !== undefined) {
        localVarQueryParameter['LibraryType'] = libraryType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TaskScheduleApi - functional programming interface
 * @export
 */
export const TaskScheduleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TaskScheduleApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 1 注册调度服务，定时一分钟的任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTaskScheduleResgisterScheduleTaskPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTaskScheduleResgisterScheduleTaskPost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 2 执行回调，扫描租户配置数据，按注册时的频率来扫描
     * @param {string} [systemId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTaskScheduleScanAutoForecastConfigGet(
      systemId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTaskScheduleScanAutoForecastConfigGet(systemId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 3 调度服务回调,创建对应的方案
     * @param {string} [tenantId]
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTaskScheduleScheduleInvokeMethodGet(
      tenantId?: string,
      businessType?: number,
      libraryType?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiTaskScheduleScheduleInvokeMethodGet(
          tenantId,
          businessType,
          libraryType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TaskScheduleApi - factory interface
 * @export
 */
export const TaskScheduleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TaskScheduleApiFp(configuration)
  return {
    /**
     *
     * @summary 1 注册调度服务，定时一分钟的任务
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleResgisterScheduleTaskPost(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiTaskScheduleResgisterScheduleTaskPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 2 执行回调，扫描租户配置数据，按注册时的频率来扫描
     * @param {string} [systemId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleScanAutoForecastConfigGet(
      systemId?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiTaskScheduleScanAutoForecastConfigGet(systemId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 3 调度服务回调,创建对应的方案
     * @param {string} [tenantId]
     * @param {number} [businessType]
     * @param {number} [libraryType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTaskScheduleScheduleInvokeMethodGet(
      tenantId?: string,
      businessType?: number,
      libraryType?: number,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiTaskScheduleScheduleInvokeMethodGet(tenantId, businessType, libraryType, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TaskScheduleApi - object-oriented interface
 * @export
 * @class TaskScheduleApi
 * @extends {BaseAPI}
 */
export class TaskScheduleApi extends BaseAPI {
  /**
   *
   * @summary 1 注册调度服务，定时一分钟的任务
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskScheduleApi
   */
  public apiTaskScheduleResgisterScheduleTaskPost(options?: AxiosRequestConfig) {
    return TaskScheduleApiFp(this.configuration)
      .apiTaskScheduleResgisterScheduleTaskPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 2 执行回调，扫描租户配置数据，按注册时的频率来扫描
   * @param {string} [systemId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskScheduleApi
   */
  public apiTaskScheduleScanAutoForecastConfigGet(systemId?: string, options?: AxiosRequestConfig) {
    return TaskScheduleApiFp(this.configuration)
      .apiTaskScheduleScanAutoForecastConfigGet(systemId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 3 调度服务回调,创建对应的方案
   * @param {string} [tenantId]
   * @param {number} [businessType]
   * @param {number} [libraryType]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskScheduleApi
   */
  public apiTaskScheduleScheduleInvokeMethodGet(
    tenantId?: string,
    businessType?: number,
    libraryType?: number,
    options?: AxiosRequestConfig,
  ) {
    return TaskScheduleApiFp(this.configuration)
      .apiTaskScheduleScheduleInvokeMethodGet(tenantId, businessType, libraryType, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
