/* eslint-disable */
/**
 * model-information-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddControlTsInput } from '../models'
// @ts-ignore
import { AddCurveRelationTsInput } from '../models'
// @ts-ignore
import { AddFlushingParaInput } from '../models'
// @ts-ignore
import { AddPatternTsInput } from '../models'
// @ts-ignore
import { ControlTsDto } from '../models'
// @ts-ignore
import { CurveRelationTsDto } from '../models'
// @ts-ignore
import { DeleteControlTsInput } from '../models'
// @ts-ignore
import { DeleteCurveRelationTsInput } from '../models'
// @ts-ignore
import { DeleteFlushingParaInput } from '../models'
// @ts-ignore
import { DeletePatternTsInput } from '../models'
// @ts-ignore
import { FlushingParaDto } from '../models'
// @ts-ignore
import { GetControlTsListyModelIdInput } from '../models'
// @ts-ignore
import { GetCurveRelationTsListyModelIdInput } from '../models'
// @ts-ignore
import { GetPatternTsListyModelIdInput } from '../models'
// @ts-ignore
import { PatternTsDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateControlTsInput } from '../models'
// @ts-ignore
import { UpdateCurveRelationTsInput } from '../models'
// @ts-ignore
import { UpdateFlushingParaInput } from '../models'
// @ts-ignore
import { UpdatePatternTsInput } from '../models'
/**
 * WDModelEditApi - axios parameter creator
 * @export
 */
export const WDModelEditApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增控制规则时序数据 Add control time-series data
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsAddPost: async (
      addControlTsInput?: AddControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的控制规则时序数据 Get all control time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsAllGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除控制规则时序数据 Delete control time-series data
     * @param {DeleteControlTsInput} [deleteControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsDeletePost: async (
      deleteControlTsInput?: DeleteControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定模型id的控制规则时序数据 Get control time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中控制规则的ID control muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsGetByModeidGet: async (
      scenarioId?: string,
      modelId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/get-by-modeid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (modelId !== undefined) {
        localVarQueryParameter['modelId'] = modelId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型id列表获取控制规则时序数据 Get control time-series data of a scenario by muids
     * @param {GetControlTsListyModelIdInput} [getControlTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsGetlistByModelidPost: async (
      getControlTsListyModelIdInput?: GetControlTsListyModelIdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/getlist-by-modelid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getControlTsListyModelIdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存控制规则时序数据，原有控制规则时序数据会被删除 Save control time-series data, old control time-series data will be deleted
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsResavePost: async (
      addControlTsInput?: AddControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改控制规则时序数据 Update control time-series data
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsUpdatePost: async (
      updateControlTsInput?: UpdateControlTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/control-ts/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateControlTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增曲线时序数据 Add curve time-series data
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsAddPost: async (
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCurveRelationTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的曲线时序数据 Get all curve time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsAllGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除曲线时序数据 Delete curve time-series data
     * @param {DeleteCurveRelationTsInput} [deleteCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsDeletePost: async (
      deleteCurveRelationTsInput?: DeleteCurveRelationTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCurveRelationTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定模型id的曲线时序数据 Get curve time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中曲线ID curve id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet: async (
      scenarioId?: string,
      modelId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/get-by-modelid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (modelId !== undefined) {
        localVarQueryParameter['modelId'] = modelId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型id列表获取曲线时序数据 Get curve time-series data of a scenario by muids
     * @param {GetCurveRelationTsListyModelIdInput} [getCurveRelationTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost: async (
      getCurveRelationTsListyModelIdInput?: GetCurveRelationTsListyModelIdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/getlist-by-modelid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getCurveRelationTsListyModelIdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存曲线时序数据，原有曲线时序数据会被删除 Save curve time-series data, old curve time-series data will be deleted
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsResavePost: async (
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCurveRelationTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改曲线时序数据 Update curve time-series data
     * @param {UpdateCurveRelationTsInput} [updateCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsUpdatePost: async (
      updateCurveRelationTsInput?: UpdateCurveRelationTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/curve-relation-ts/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCurveRelationTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增管道冲洗参数设置 Add pipe flushing parameters
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaAddPost: async (
      addFlushingParaInput?: AddFlushingParaInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/flushing/para/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addFlushingParaInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除管道冲洗参数设置 Delete pipe flushing parameters
     * @param {DeleteFlushingParaInput} [deleteFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaDeletePost: async (
      deleteFlushingParaInput?: DeleteFlushingParaInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/flushing/para/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteFlushingParaInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询管道冲洗参数设置 Get pipe flushing parameters of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaGetGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/flushing/para/get`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存管道冲洗参数信息，原有管道冲洗参数信息会被删除 Save pipe flushing parameters, old pipe flushing parameters will be deleted
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaResavePost: async (
      addFlushingParaInput?: AddFlushingParaInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/flushing/para/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addFlushingParaInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改管道冲洗参数设置 Update pipe flushing parameters
     * @param {UpdateFlushingParaInput} [updateFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaUpdatePost: async (
      updateFlushingParaInput?: UpdateFlushingParaInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/flushing/para/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFlushingParaInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 新增模式时序数据 Add pattern time-series data
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsAddPost: async (
      addPatternTsInput?: AddPatternTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPatternTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的模式时序数据 Get all pattern time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsAllGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除模式时序数据 Delete pattern time-series data
     * @param {DeletePatternTsInput} [deletePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsDeletePost: async (
      deletePatternTsInput?: DeletePatternTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePatternTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定模型id的模式时序数据 Get pattern time-series data of a scenario by pattern muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中模式的ID pattern muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetByModelidGet: async (
      scenarioId?: string,
      modelId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/get-by-modelid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (modelId !== undefined) {
        localVarQueryParameter['modelId'] = modelId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取指定类型的模式时序数据 Get pattern time-series data of a scenario by type
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [patternType] 模式类型 pattern type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetByTypeGet: async (
      scenarioId?: string,
      patternType?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/get-by-type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (patternType !== undefined) {
        localVarQueryParameter['patternType'] = patternType
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 根据模型id列表获取模式时序数据 Get pattern time-series data of a scenario by pattern muids
     * @param {GetPatternTsListyModelIdInput} [getPatternTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost: async (
      getPatternTsListyModelIdInput?: GetPatternTsListyModelIdInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/getlist-by-modelid`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        getPatternTsListyModelIdInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存模式时序数据，原有模式时序数据会被删除 Save pattern time-series data, old pattern time-series data will be deleted
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsResavePost: async (
      addPatternTsInput?: AddPatternTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPatternTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改模式时序数据 Update pattern time-series data
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsUpdatePost: async (
      updatePatternTsInput?: UpdatePatternTsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pattern-ts/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePatternTsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDModelEditApi - functional programming interface
 * @export
 */
export const WDModelEditApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDModelEditApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增控制规则时序数据 Add control time-series data
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsAddPost(
      addControlTsInput?: AddControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsAddPost(
          addControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的控制规则时序数据 Get all control time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsAllGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlTsDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsAllGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除控制规则时序数据 Delete control time-series data
     * @param {DeleteControlTsInput} [deleteControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsDeletePost(
      deleteControlTsInput?: DeleteControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsDeletePost(
          deleteControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定模型id的控制规则时序数据 Get control time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中控制规则的ID control muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsGetByModeidGet(
      scenarioId?: string,
      modelId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlTsDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsGetByModeidGet(
          scenarioId,
          modelId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型id列表获取控制规则时序数据 Get control time-series data of a scenario by muids
     * @param {GetControlTsListyModelIdInput} [getControlTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
      getControlTsListyModelIdInput?: GetControlTsListyModelIdInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControlTsDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
          getControlTsListyModelIdInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存控制规则时序数据，原有控制规则时序数据会被删除 Save control time-series data, old control time-series data will be deleted
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsResavePost(
      addControlTsInput?: AddControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsResavePost(
          addControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改控制规则时序数据 Update control time-series data
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdControlTsUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdControlTsUpdatePost(
          updateControlTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增曲线时序数据 Add curve time-series data
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsAddPost(
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsAddPost(
          addCurveRelationTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的曲线时序数据 Get all curve time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsAllGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurveRelationTsDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsAllGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除曲线时序数据 Delete curve time-series data
     * @param {DeleteCurveRelationTsInput} [deleteCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsDeletePost(
      deleteCurveRelationTsInput?: DeleteCurveRelationTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsDeletePost(
          deleteCurveRelationTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定模型id的曲线时序数据 Get curve time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中曲线ID curve id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(
      scenarioId?: string,
      modelId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurveRelationTsDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(
          scenarioId,
          modelId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型id列表获取曲线时序数据 Get curve time-series data of a scenario by muids
     * @param {GetCurveRelationTsListyModelIdInput} [getCurveRelationTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
      getCurveRelationTsListyModelIdInput?: GetCurveRelationTsListyModelIdInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurveRelationTsDto>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
          getCurveRelationTsListyModelIdInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存曲线时序数据，原有曲线时序数据会被删除 Save curve time-series data, old curve time-series data will be deleted
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsResavePost(
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsResavePost(
          addCurveRelationTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改曲线时序数据 Update curve time-series data
     * @param {UpdateCurveRelationTsInput} [updateCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(
      updateCurveRelationTsInput?: UpdateCurveRelationTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(
          updateCurveRelationTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增管道冲洗参数设置 Add pipe flushing parameters
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdFlushingParaAddPost(
      addFlushingParaInput?: AddFlushingParaInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdFlushingParaAddPost(
          addFlushingParaInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除管道冲洗参数设置 Delete pipe flushing parameters
     * @param {DeleteFlushingParaInput} [deleteFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdFlushingParaDeletePost(
      deleteFlushingParaInput?: DeleteFlushingParaInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdFlushingParaDeletePost(
          deleteFlushingParaInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询管道冲洗参数设置 Get pipe flushing parameters of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdFlushingParaGetGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlushingParaDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdFlushingParaGetGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存管道冲洗参数信息，原有管道冲洗参数信息会被删除 Save pipe flushing parameters, old pipe flushing parameters will be deleted
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdFlushingParaResavePost(
      addFlushingParaInput?: AddFlushingParaInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdFlushingParaResavePost(
          addFlushingParaInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改管道冲洗参数设置 Update pipe flushing parameters
     * @param {UpdateFlushingParaInput} [updateFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdFlushingParaUpdatePost(
      updateFlushingParaInput?: UpdateFlushingParaInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdFlushingParaUpdatePost(
          updateFlushingParaInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 新增模式时序数据 Add pattern time-series data
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsAddPost(
      addPatternTsInput?: AddPatternTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsAddPost(
          addPatternTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的模式时序数据 Get all pattern time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsAllGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatternTsDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsAllGet(
          scenarioId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除模式时序数据 Delete pattern time-series data
     * @param {DeletePatternTsInput} [deletePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsDeletePost(
      deletePatternTsInput?: DeletePatternTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsDeletePost(
          deletePatternTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定模型id的模式时序数据 Get pattern time-series data of a scenario by pattern muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中模式的ID pattern muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsGetByModelidGet(
      scenarioId?: string,
      modelId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatternTsDto>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsGetByModelidGet(
          scenarioId,
          modelId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取指定类型的模式时序数据 Get pattern time-series data of a scenario by type
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [patternType] 模式类型 pattern type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsGetByTypeGet(
      scenarioId?: string,
      patternType?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatternTsDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsGetByTypeGet(
          scenarioId,
          patternType,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 根据模型id列表获取模式时序数据 Get pattern time-series data of a scenario by pattern muids
     * @param {GetPatternTsListyModelIdInput} [getPatternTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
      getPatternTsListyModelIdInput?: GetPatternTsListyModelIdInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatternTsDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
          getPatternTsListyModelIdInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存模式时序数据，原有模式时序数据会被删除 Save pattern time-series data, old pattern time-series data will be deleted
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsResavePost(
      addPatternTsInput?: AddPatternTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsResavePost(
          addPatternTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改模式时序数据 Update pattern time-series data
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPatternTsUpdatePost(
      updatePatternTsInput?: UpdatePatternTsInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPatternTsUpdatePost(
          updatePatternTsInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDModelEditApi - factory interface
 * @export
 */
export const WDModelEditApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDModelEditApiFp(configuration)
  return {
    /**
     *
     * @summary 新增控制规则时序数据 Add control time-series data
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsAddPost(
      addControlTsInput?: AddControlTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsAddPost(addControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的控制规则时序数据 Get all control time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsAllGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<ControlTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsAllGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除控制规则时序数据 Delete control time-series data
     * @param {DeleteControlTsInput} [deleteControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsDeletePost(
      deleteControlTsInput?: DeleteControlTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsDeletePost(deleteControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定模型id的控制规则时序数据 Get control time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中控制规则的ID control muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsGetByModeidGet(
      scenarioId?: string,
      modelId?: string,
      options?: any,
    ): AxiosPromise<ControlTsDto> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsGetByModeidGet(scenarioId, modelId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型id列表获取控制规则时序数据 Get control time-series data of a scenario by muids
     * @param {GetControlTsListyModelIdInput} [getControlTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
      getControlTsListyModelIdInput?: GetControlTsListyModelIdInput,
      options?: any,
    ): AxiosPromise<Array<ControlTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
          getControlTsListyModelIdInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存控制规则时序数据，原有控制规则时序数据会被删除 Save control time-series data, old control time-series data will be deleted
     * @param {AddControlTsInput} [addControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsResavePost(
      addControlTsInput?: AddControlTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsResavePost(addControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改控制规则时序数据 Update control time-series data
     * @param {UpdateControlTsInput} [updateControlTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdControlTsUpdatePost(
      updateControlTsInput?: UpdateControlTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdControlTsUpdatePost(updateControlTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增曲线时序数据 Add curve time-series data
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsAddPost(
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsAddPost(addCurveRelationTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的曲线时序数据 Get all curve time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsAllGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<CurveRelationTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsAllGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除曲线时序数据 Delete curve time-series data
     * @param {DeleteCurveRelationTsInput} [deleteCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsDeletePost(
      deleteCurveRelationTsInput?: DeleteCurveRelationTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsDeletePost(deleteCurveRelationTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定模型id的曲线时序数据 Get curve time-series data of a scenario by muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中曲线ID curve id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(
      scenarioId?: string,
      modelId?: string,
      options?: any,
    ): AxiosPromise<CurveRelationTsDto> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(scenarioId, modelId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型id列表获取曲线时序数据 Get curve time-series data of a scenario by muids
     * @param {GetCurveRelationTsListyModelIdInput} [getCurveRelationTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
      getCurveRelationTsListyModelIdInput?: GetCurveRelationTsListyModelIdInput,
      options?: any,
    ): AxiosPromise<Array<CurveRelationTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
          getCurveRelationTsListyModelIdInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存曲线时序数据，原有曲线时序数据会被删除 Save curve time-series data, old curve time-series data will be deleted
     * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsResavePost(
      addCurveRelationTsInput?: AddCurveRelationTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsResavePost(addCurveRelationTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改曲线时序数据 Update curve time-series data
     * @param {UpdateCurveRelationTsInput} [updateCurveRelationTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(
      updateCurveRelationTsInput?: UpdateCurveRelationTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(updateCurveRelationTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增管道冲洗参数设置 Add pipe flushing parameters
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaAddPost(
      addFlushingParaInput?: AddFlushingParaInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdFlushingParaAddPost(addFlushingParaInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除管道冲洗参数设置 Delete pipe flushing parameters
     * @param {DeleteFlushingParaInput} [deleteFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaDeletePost(
      deleteFlushingParaInput?: DeleteFlushingParaInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdFlushingParaDeletePost(deleteFlushingParaInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询管道冲洗参数设置 Get pipe flushing parameters of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaGetGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<FlushingParaDto> {
      return localVarFp
        .apiV1ModelInformationDomainWdFlushingParaGetGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存管道冲洗参数信息，原有管道冲洗参数信息会被删除 Save pipe flushing parameters, old pipe flushing parameters will be deleted
     * @param {AddFlushingParaInput} [addFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaResavePost(
      addFlushingParaInput?: AddFlushingParaInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdFlushingParaResavePost(addFlushingParaInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改管道冲洗参数设置 Update pipe flushing parameters
     * @param {UpdateFlushingParaInput} [updateFlushingParaInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdFlushingParaUpdatePost(
      updateFlushingParaInput?: UpdateFlushingParaInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdFlushingParaUpdatePost(updateFlushingParaInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 新增模式时序数据 Add pattern time-series data
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsAddPost(
      addPatternTsInput?: AddPatternTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsAddPost(addPatternTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的模式时序数据 Get all pattern time-series data of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsAllGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<PatternTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsAllGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除模式时序数据 Delete pattern time-series data
     * @param {DeletePatternTsInput} [deletePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsDeletePost(
      deletePatternTsInput?: DeletePatternTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsDeletePost(deletePatternTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定模型id的模式时序数据 Get pattern time-series data of a scenario by pattern muid
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [modelId] 模型中模式的ID pattern muid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetByModelidGet(
      scenarioId?: string,
      modelId?: string,
      options?: any,
    ): AxiosPromise<PatternTsDto> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsGetByModelidGet(scenarioId, modelId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取指定类型的模式时序数据 Get pattern time-series data of a scenario by type
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {string} [patternType] 模式类型 pattern type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetByTypeGet(
      scenarioId?: string,
      patternType?: string,
      options?: any,
    ): AxiosPromise<Array<PatternTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsGetByTypeGet(scenarioId, patternType, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 根据模型id列表获取模式时序数据 Get pattern time-series data of a scenario by pattern muids
     * @param {GetPatternTsListyModelIdInput} [getPatternTsListyModelIdInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
      getPatternTsListyModelIdInput?: GetPatternTsListyModelIdInput,
      options?: any,
    ): AxiosPromise<Array<PatternTsDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
          getPatternTsListyModelIdInput,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存模式时序数据，原有模式时序数据会被删除 Save pattern time-series data, old pattern time-series data will be deleted
     * @param {AddPatternTsInput} [addPatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsResavePost(
      addPatternTsInput?: AddPatternTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsResavePost(addPatternTsInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改模式时序数据 Update pattern time-series data
     * @param {UpdatePatternTsInput} [updatePatternTsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPatternTsUpdatePost(
      updatePatternTsInput?: UpdatePatternTsInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPatternTsUpdatePost(updatePatternTsInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDModelEditApi - object-oriented interface
 * @export
 * @class WDModelEditApi
 * @extends {BaseAPI}
 */
export class WDModelEditApi extends BaseAPI {
  /**
   *
   * @summary 新增控制规则时序数据 Add control time-series data
   * @param {AddControlTsInput} [addControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsAddPost(
    addControlTsInput?: AddControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsAddPost(addControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的控制规则时序数据 Get all control time-series data of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsAllGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsAllGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除控制规则时序数据 Delete control time-series data
   * @param {DeleteControlTsInput} [deleteControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsDeletePost(
    deleteControlTsInput?: DeleteControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsDeletePost(deleteControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定模型id的控制规则时序数据 Get control time-series data of a scenario by muid
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [modelId] 模型中控制规则的ID control muid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsGetByModeidGet(
    scenarioId?: string,
    modelId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsGetByModeidGet(scenarioId, modelId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型id列表获取控制规则时序数据 Get control time-series data of a scenario by muids
   * @param {GetControlTsListyModelIdInput} [getControlTsListyModelIdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
    getControlTsListyModelIdInput?: GetControlTsListyModelIdInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsGetlistByModelidPost(
        getControlTsListyModelIdInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存控制规则时序数据，原有控制规则时序数据会被删除 Save control time-series data, old control time-series data will be deleted
   * @param {AddControlTsInput} [addControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsResavePost(
    addControlTsInput?: AddControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsResavePost(addControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改控制规则时序数据 Update control time-series data
   * @param {UpdateControlTsInput} [updateControlTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdControlTsUpdatePost(
    updateControlTsInput?: UpdateControlTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdControlTsUpdatePost(updateControlTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增曲线时序数据 Add curve time-series data
   * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsAddPost(
    addCurveRelationTsInput?: AddCurveRelationTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsAddPost(addCurveRelationTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的曲线时序数据 Get all curve time-series data of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsAllGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsAllGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除曲线时序数据 Delete curve time-series data
   * @param {DeleteCurveRelationTsInput} [deleteCurveRelationTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsDeletePost(
    deleteCurveRelationTsInput?: DeleteCurveRelationTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsDeletePost(deleteCurveRelationTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定模型id的曲线时序数据 Get curve time-series data of a scenario by muid
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [modelId] 模型中曲线ID curve id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(
    scenarioId?: string,
    modelId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsGetByModelidGet(scenarioId, modelId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型id列表获取曲线时序数据 Get curve time-series data of a scenario by muids
   * @param {GetCurveRelationTsListyModelIdInput} [getCurveRelationTsListyModelIdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
    getCurveRelationTsListyModelIdInput?: GetCurveRelationTsListyModelIdInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsGetlistByModelidPost(
        getCurveRelationTsListyModelIdInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存曲线时序数据，原有曲线时序数据会被删除 Save curve time-series data, old curve time-series data will be deleted
   * @param {AddCurveRelationTsInput} [addCurveRelationTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsResavePost(
    addCurveRelationTsInput?: AddCurveRelationTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsResavePost(addCurveRelationTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改曲线时序数据 Update curve time-series data
   * @param {UpdateCurveRelationTsInput} [updateCurveRelationTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(
    updateCurveRelationTsInput?: UpdateCurveRelationTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdCurveRelationTsUpdatePost(updateCurveRelationTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增管道冲洗参数设置 Add pipe flushing parameters
   * @param {AddFlushingParaInput} [addFlushingParaInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdFlushingParaAddPost(
    addFlushingParaInput?: AddFlushingParaInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdFlushingParaAddPost(addFlushingParaInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除管道冲洗参数设置 Delete pipe flushing parameters
   * @param {DeleteFlushingParaInput} [deleteFlushingParaInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdFlushingParaDeletePost(
    deleteFlushingParaInput?: DeleteFlushingParaInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdFlushingParaDeletePost(deleteFlushingParaInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询管道冲洗参数设置 Get pipe flushing parameters of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdFlushingParaGetGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdFlushingParaGetGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存管道冲洗参数信息，原有管道冲洗参数信息会被删除 Save pipe flushing parameters, old pipe flushing parameters will be deleted
   * @param {AddFlushingParaInput} [addFlushingParaInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdFlushingParaResavePost(
    addFlushingParaInput?: AddFlushingParaInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdFlushingParaResavePost(addFlushingParaInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改管道冲洗参数设置 Update pipe flushing parameters
   * @param {UpdateFlushingParaInput} [updateFlushingParaInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdFlushingParaUpdatePost(
    updateFlushingParaInput?: UpdateFlushingParaInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdFlushingParaUpdatePost(updateFlushingParaInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 新增模式时序数据 Add pattern time-series data
   * @param {AddPatternTsInput} [addPatternTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsAddPost(
    addPatternTsInput?: AddPatternTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsAddPost(addPatternTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的模式时序数据 Get all pattern time-series data of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsAllGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsAllGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除模式时序数据 Delete pattern time-series data
   * @param {DeletePatternTsInput} [deletePatternTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsDeletePost(
    deletePatternTsInput?: DeletePatternTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsDeletePost(deletePatternTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定模型id的模式时序数据 Get pattern time-series data of a scenario by pattern muid
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [modelId] 模型中模式的ID pattern muid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsGetByModelidGet(
    scenarioId?: string,
    modelId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsGetByModelidGet(scenarioId, modelId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取指定类型的模式时序数据 Get pattern time-series data of a scenario by type
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {string} [patternType] 模式类型 pattern type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsGetByTypeGet(
    scenarioId?: string,
    patternType?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsGetByTypeGet(scenarioId, patternType, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 根据模型id列表获取模式时序数据 Get pattern time-series data of a scenario by pattern muids
   * @param {GetPatternTsListyModelIdInput} [getPatternTsListyModelIdInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
    getPatternTsListyModelIdInput?: GetPatternTsListyModelIdInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsGetlistByModelidPost(
        getPatternTsListyModelIdInput,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存模式时序数据，原有模式时序数据会被删除 Save pattern time-series data, old pattern time-series data will be deleted
   * @param {AddPatternTsInput} [addPatternTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsResavePost(
    addPatternTsInput?: AddPatternTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsResavePost(addPatternTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改模式时序数据 Update pattern time-series data
   * @param {UpdatePatternTsInput} [updatePatternTsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDModelEditApi
   */
  public apiV1ModelInformationDomainWdPatternTsUpdatePost(
    updatePatternTsInput?: UpdatePatternTsInput,
    options?: AxiosRequestConfig,
  ) {
    return WDModelEditApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPatternTsUpdatePost(updatePatternTsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
