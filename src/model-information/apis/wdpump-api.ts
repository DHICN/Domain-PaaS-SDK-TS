/* eslint-disable */
/**
 * model-information-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddPumpInput } from '../models'
// @ts-ignore
import { DeleteInput } from '../models'
// @ts-ignore
import { QueryPumpDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdatePumpInput } from '../models'
/**
 * WDPumpApi - axios parameter creator
 * @export
 */
export const WDPumpApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 新增泵站要素编辑信息 Add pump information
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpAddPost: async (
      addPumpInput?: AddPumpInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPumpInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取该方案下所有的泵站要素信息 Get all pumps information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpAllGet: async (
      scenarioId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/all`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除泵站要素编辑信息 Delete pump information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpDeletePost: async (
      deleteInput?: DeleteInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取该方案下指定muids的泵站要素信息 Get pumps information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中泵站ID列表 pump muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpListGet: async (
      scenarioId?: string,
      muids?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (scenarioId !== undefined) {
        localVarQueryParameter['scenarioId'] = scenarioId
      }

      if (muids !== undefined) {
        localVarQueryParameter['muids'] = muids
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 保存泵站要素信息，原有泵站信息会被删除 Save pump information, old pump information will be deleted
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpResavePost: async (
      addPumpInput?: AddPumpInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/resave`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addPumpInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改泵站要素信息 Update pump information
     * @param {UpdatePumpInput} [updatePumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpUpdatePost: async (
      updatePumpInput?: UpdatePumpInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/model-information/domain-wd/pump/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePumpInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * WDPumpApi - functional programming interface
 * @export
 */
export const WDPumpApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WDPumpApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 新增泵站要素编辑信息 Add pump information
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpAddPost(
      addPumpInput?: AddPumpInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpAddPost(
          addPumpInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取该方案下所有的泵站要素信息 Get all pumps information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpAllGet(
      scenarioId?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryPumpDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpAllGet(scenarioId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除泵站要素编辑信息 Delete pump information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpDeletePost(
      deleteInput?: DeleteInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpDeletePost(
          deleteInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取该方案下指定muids的泵站要素信息 Get pumps information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中泵站ID列表 pump muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpListGet(
      scenarioId?: string,
      muids?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryPumpDto>>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpListGet(
          scenarioId,
          muids,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 保存泵站要素信息，原有泵站信息会被删除 Save pump information, old pump information will be deleted
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpResavePost(
      addPumpInput?: AddPumpInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpResavePost(
          addPumpInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改泵站要素信息 Update pump information
     * @param {UpdatePumpInput} [updatePumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1ModelInformationDomainWdPumpUpdatePost(
      updatePumpInput?: UpdatePumpInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1ModelInformationDomainWdPumpUpdatePost(
          updatePumpInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * WDPumpApi - factory interface
 * @export
 */
export const WDPumpApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WDPumpApiFp(configuration)
  return {
    /**
     *
     * @summary 新增泵站要素编辑信息 Add pump information
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpAddPost(
      addPumpInput?: AddPumpInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpAddPost(addPumpInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取该方案下所有的泵站要素信息 Get all pumps information of a scenario
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpAllGet(
      scenarioId?: string,
      options?: any,
    ): AxiosPromise<Array<QueryPumpDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpAllGet(scenarioId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除泵站要素编辑信息 Delete pump information
     * @param {DeleteInput} [deleteInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpDeletePost(
      deleteInput?: DeleteInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpDeletePost(deleteInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取该方案下指定muids的泵站要素信息 Get pumps information of a scenario by muids
     * @param {string} [scenarioId] 方案ID scenario id
     * @param {Array<string>} [muids] 模型中泵站ID列表 pump muids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpListGet(
      scenarioId?: string,
      muids?: Array<string>,
      options?: any,
    ): AxiosPromise<Array<QueryPumpDto>> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpListGet(scenarioId, muids, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 保存泵站要素信息，原有泵站信息会被删除 Save pump information, old pump information will be deleted
     * @param {AddPumpInput} [addPumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpResavePost(
      addPumpInput?: AddPumpInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpResavePost(addPumpInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改泵站要素信息 Update pump information
     * @param {UpdatePumpInput} [updatePumpInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ModelInformationDomainWdPumpUpdatePost(
      updatePumpInput?: UpdatePumpInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1ModelInformationDomainWdPumpUpdatePost(updatePumpInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * WDPumpApi - object-oriented interface
 * @export
 * @class WDPumpApi
 * @extends {BaseAPI}
 */
export class WDPumpApi extends BaseAPI {
  /**
   *
   * @summary 新增泵站要素编辑信息 Add pump information
   * @param {AddPumpInput} [addPumpInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpAddPost(
    addPumpInput?: AddPumpInput,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpAddPost(addPumpInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取该方案下所有的泵站要素信息 Get all pumps information of a scenario
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpAllGet(
    scenarioId?: string,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpAllGet(scenarioId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除泵站要素编辑信息 Delete pump information
   * @param {DeleteInput} [deleteInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpDeletePost(
    deleteInput?: DeleteInput,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpDeletePost(deleteInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取该方案下指定muids的泵站要素信息 Get pumps information of a scenario by muids
   * @param {string} [scenarioId] 方案ID scenario id
   * @param {Array<string>} [muids] 模型中泵站ID列表 pump muids
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpListGet(
    scenarioId?: string,
    muids?: Array<string>,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpListGet(scenarioId, muids, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 保存泵站要素信息，原有泵站信息会被删除 Save pump information, old pump information will be deleted
   * @param {AddPumpInput} [addPumpInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpResavePost(
    addPumpInput?: AddPumpInput,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpResavePost(addPumpInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改泵站要素信息 Update pump information
   * @param {UpdatePumpInput} [updatePumpInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WDPumpApi
   */
  public apiV1ModelInformationDomainWdPumpUpdatePost(
    updatePumpInput?: UpdatePumpInput,
    options?: AxiosRequestConfig,
  ) {
    return WDPumpApiFp(this.configuration)
      .apiV1ModelInformationDomainWdPumpUpdatePost(updatePumpInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
