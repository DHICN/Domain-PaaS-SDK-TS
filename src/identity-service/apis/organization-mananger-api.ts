/* eslint-disable */
/**
 * 用户认证管理服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddOrganizationInput } from '../models'
// @ts-ignore
import { AddOrganizationUserRelInput } from '../models'
// @ts-ignore
import { DeleteOrganizationUserRelInput } from '../models'
// @ts-ignore
import { KeysInput } from '../models'
// @ts-ignore
import { OrganizationEntity } from '../models'
// @ts-ignore
import { OrganizationWithUserInfoOutput } from '../models'
// @ts-ignore
import { QueryOrganizationOutput } from '../models'
// @ts-ignore
import { QueryOrganizationWithUserInfoInput } from '../models'
// @ts-ignore
import { QueryUserDetailsByUserInput } from '../models'
// @ts-ignore
import { QueryUserDetailsInput } from '../models'
// @ts-ignore
import { QueryUserInformationOutput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { UpdateOrganizationInput } from '../models'
/**
 * OrganizationManangerApi - axios parameter creator
 * @export
 */
export const OrganizationManangerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 增加组织机构 | add organization
     * @param {AddOrganizationInput} [addOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationAddPost: async (
      addOrganizationInput?: AddOrganizationInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOrganizationInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除组织架构 | delete organization
     * @param {KeysInput} [keysInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationDeletePost: async (
      keysInput?: KeysInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        keysInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询组织架构树 | query organization tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationTreeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization/tree`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改组织架构 | update organization
     * @param {UpdateOrganizationInput} [updateOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUpdatePost: async (
      updateOrganizationInput?: UpdateOrganizationInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization/update`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrganizationInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 增加组织架构-用户关系 | bind organization and user
     * @param {Array<AddOrganizationUserRelInput>} [addOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUserRelevanceAddPost: async (
      addOrganizationUserRelInput?: Array<AddOrganizationUserRelInput>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization-user-relevance/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addOrganizationUserRelInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除组织架构用户关联 | delete organization with user relevance
     * @param {DeleteOrganizationUserRelInput} [deleteOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUserRelevanceDeletePost: async (
      deleteOrganizationUserRelInput?: DeleteOrganizationUserRelInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization-user-relevance/delete`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteOrganizationUserRelInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询组织架构树及所有人员，如果传入的组织架构ID为空，则返回所有组织架构 | query organization with user\'s detail information,if organization\'s id is null,we will return all organizations
     * @param {QueryOrganizationWithUserInfoInput} [queryOrganizationWithUserInfoInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationWithUserInfoTreePost: async (
      queryOrganizationWithUserInfoInput?: QueryOrganizationWithUserInfoInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organization-with-user-info/tree`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOrganizationWithUserInfoInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 通过用户输入的关键字查询用户
     * @param {QueryUserDetailsByUserInput} [queryUserDetailsByUserInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserDetailsQueryByKeywordPost: async (
      queryUserDetailsByUserInput?: QueryUserDetailsByUserInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user-details/query-by-keyword`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserDetailsByUserInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询用户详细信息 | query user\'s detail information
     * @param {QueryUserDetailsInput} [queryUserDetailsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserDetailsQueryByUserIdPost: async (
      queryUserDetailsInput?: QueryUserDetailsInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user-details/query-by-user-id`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserDetailsInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OrganizationManangerApi - functional programming interface
 * @export
 */
export const OrganizationManangerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrganizationManangerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 增加组织机构 | add organization
     * @param {AddOrganizationInput} [addOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationAddPost(
      addOrganizationInput?: AddOrganizationInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationAddPost(
        addOrganizationInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除组织架构 | delete organization
     * @param {KeysInput} [keysInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationDeletePost(
      keysInput?: KeysInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationDeletePost(
        keysInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询组织架构树 | query organization tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationTreeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryOrganizationOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationTreeGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改组织架构 | update organization
     * @param {UpdateOrganizationInput} [updateOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationUpdatePost(
      updateOrganizationInput?: UpdateOrganizationInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationEntity>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationUpdatePost(
        updateOrganizationInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 增加组织架构-用户关系 | bind organization and user
     * @param {Array<AddOrganizationUserRelInput>} [addOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationUserRelevanceAddPost(
      addOrganizationUserRelInput?: Array<AddOrganizationUserRelInput>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1OrganizationUserRelevanceAddPost(
          addOrganizationUserRelInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除组织架构用户关联 | delete organization with user relevance
     * @param {DeleteOrganizationUserRelInput} [deleteOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationUserRelevanceDeletePost(
      deleteOrganizationUserRelInput?: DeleteOrganizationUserRelInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1OrganizationUserRelevanceDeletePost(
          deleteOrganizationUserRelInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询组织架构树及所有人员，如果传入的组织架构ID为空，则返回所有组织架构 | query organization with user\'s detail information,if organization\'s id is null,we will return all organizations
     * @param {QueryOrganizationWithUserInfoInput} [queryOrganizationWithUserInfoInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1OrganizationWithUserInfoTreePost(
      queryOrganizationWithUserInfoInput?: QueryOrganizationWithUserInfoInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OrganizationWithUserInfoOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1OrganizationWithUserInfoTreePost(
          queryOrganizationWithUserInfoInput,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 通过用户输入的关键字查询用户
     * @param {QueryUserDetailsByUserInput} [queryUserDetailsByUserInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UserDetailsQueryByKeywordPost(
      queryUserDetailsByUserInput?: QueryUserDetailsByUserInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryUserInformationOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserDetailsQueryByKeywordPost(
        queryUserDetailsByUserInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询用户详细信息 | query user\'s detail information
     * @param {QueryUserDetailsInput} [queryUserDetailsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UserDetailsQueryByUserIdPost(
      queryUserDetailsInput?: QueryUserDetailsInput,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueryUserInformationOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserDetailsQueryByUserIdPost(
        queryUserDetailsInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * OrganizationManangerApi - factory interface
 * @export
 */
export const OrganizationManangerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganizationManangerApiFp(configuration)
  return {
    /**
     *
     * @summary 增加组织机构 | add organization
     * @param {AddOrganizationInput} [addOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationAddPost(
      addOrganizationInput?: AddOrganizationInput,
      options?: any,
    ): AxiosPromise<OrganizationEntity> {
      return localVarFp
        .apiV1OrganizationAddPost(addOrganizationInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除组织架构 | delete organization
     * @param {KeysInput} [keysInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationDeletePost(keysInput?: KeysInput, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiV1OrganizationDeletePost(keysInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询组织架构树 | query organization tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationTreeGet(options?: any): AxiosPromise<Array<QueryOrganizationOutput>> {
      return localVarFp
        .apiV1OrganizationTreeGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改组织架构 | update organization
     * @param {UpdateOrganizationInput} [updateOrganizationInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUpdatePost(
      updateOrganizationInput?: UpdateOrganizationInput,
      options?: any,
    ): AxiosPromise<Array<OrganizationEntity>> {
      return localVarFp
        .apiV1OrganizationUpdatePost(updateOrganizationInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 增加组织架构-用户关系 | bind organization and user
     * @param {Array<AddOrganizationUserRelInput>} [addOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUserRelevanceAddPost(
      addOrganizationUserRelInput?: Array<AddOrganizationUserRelInput>,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1OrganizationUserRelevanceAddPost(addOrganizationUserRelInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除组织架构用户关联 | delete organization with user relevance
     * @param {DeleteOrganizationUserRelInput} [deleteOrganizationUserRelInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationUserRelevanceDeletePost(
      deleteOrganizationUserRelInput?: DeleteOrganizationUserRelInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1OrganizationUserRelevanceDeletePost(deleteOrganizationUserRelInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询组织架构树及所有人员，如果传入的组织架构ID为空，则返回所有组织架构 | query organization with user\'s detail information,if organization\'s id is null,we will return all organizations
     * @param {QueryOrganizationWithUserInfoInput} [queryOrganizationWithUserInfoInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1OrganizationWithUserInfoTreePost(
      queryOrganizationWithUserInfoInput?: QueryOrganizationWithUserInfoInput,
      options?: any,
    ): AxiosPromise<Array<OrganizationWithUserInfoOutput>> {
      return localVarFp
        .apiV1OrganizationWithUserInfoTreePost(queryOrganizationWithUserInfoInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 通过用户输入的关键字查询用户
     * @param {QueryUserDetailsByUserInput} [queryUserDetailsByUserInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserDetailsQueryByKeywordPost(
      queryUserDetailsByUserInput?: QueryUserDetailsByUserInput,
      options?: any,
    ): AxiosPromise<Array<QueryUserInformationOutput>> {
      return localVarFp
        .apiV1UserDetailsQueryByKeywordPost(queryUserDetailsByUserInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询用户详细信息 | query user\'s detail information
     * @param {QueryUserDetailsInput} [queryUserDetailsInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UserDetailsQueryByUserIdPost(
      queryUserDetailsInput?: QueryUserDetailsInput,
      options?: any,
    ): AxiosPromise<Array<QueryUserInformationOutput>> {
      return localVarFp
        .apiV1UserDetailsQueryByUserIdPost(queryUserDetailsInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OrganizationManangerApi - object-oriented interface
 * @export
 * @class OrganizationManangerApi
 * @extends {BaseAPI}
 */
export class OrganizationManangerApi extends BaseAPI {
  /**
   *
   * @summary 增加组织机构 | add organization
   * @param {AddOrganizationInput} [addOrganizationInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationAddPost(
    addOrganizationInput?: AddOrganizationInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationAddPost(addOrganizationInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除组织架构 | delete organization
   * @param {KeysInput} [keysInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationDeletePost(keysInput?: KeysInput, options?: AxiosRequestConfig) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationDeletePost(keysInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询组织架构树 | query organization tree
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationTreeGet(options?: AxiosRequestConfig) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationTreeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改组织架构 | update organization
   * @param {UpdateOrganizationInput} [updateOrganizationInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationUpdatePost(
    updateOrganizationInput?: UpdateOrganizationInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationUpdatePost(updateOrganizationInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 增加组织架构-用户关系 | bind organization and user
   * @param {Array<AddOrganizationUserRelInput>} [addOrganizationUserRelInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationUserRelevanceAddPost(
    addOrganizationUserRelInput?: Array<AddOrganizationUserRelInput>,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationUserRelevanceAddPost(addOrganizationUserRelInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除组织架构用户关联 | delete organization with user relevance
   * @param {DeleteOrganizationUserRelInput} [deleteOrganizationUserRelInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationUserRelevanceDeletePost(
    deleteOrganizationUserRelInput?: DeleteOrganizationUserRelInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationUserRelevanceDeletePost(deleteOrganizationUserRelInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询组织架构树及所有人员，如果传入的组织架构ID为空，则返回所有组织架构 | query organization with user\'s detail information,if organization\'s id is null,we will return all organizations
   * @param {QueryOrganizationWithUserInfoInput} [queryOrganizationWithUserInfoInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1OrganizationWithUserInfoTreePost(
    queryOrganizationWithUserInfoInput?: QueryOrganizationWithUserInfoInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1OrganizationWithUserInfoTreePost(queryOrganizationWithUserInfoInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 通过用户输入的关键字查询用户
   * @param {QueryUserDetailsByUserInput} [queryUserDetailsByUserInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1UserDetailsQueryByKeywordPost(
    queryUserDetailsByUserInput?: QueryUserDetailsByUserInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1UserDetailsQueryByKeywordPost(queryUserDetailsByUserInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询用户详细信息 | query user\'s detail information
   * @param {QueryUserDetailsInput} [queryUserDetailsInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationManangerApi
   */
  public apiV1UserDetailsQueryByUserIdPost(
    queryUserDetailsInput?: QueryUserDetailsInput,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationManangerApiFp(this.configuration)
      .apiV1UserDetailsQueryByUserIdPost(queryUserDetailsInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
