/* eslint-disable */
/**
 * 用户认证管理服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppFilesUploadPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/app/files/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppFilesUploadPost_1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/app/files/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
  return {
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppFilesUploadPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppFilesUploadPost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppFilesUploadPost_1(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppFilesUploadPost_1(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FilesApiFp(configuration)
  return {
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppFilesUploadPost(options?: any): AxiosPromise<string> {
      return localVarFp.apiAppFilesUploadPost(options).then((request) => request(axios, basePath))
    },
    /**
     * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
     * @summary 文件上传 File upload:
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppFilesUploadPost_1(options?: any): AxiosPromise<string> {
      return localVarFp.apiAppFilesUploadPost_1(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
  /**
   * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
   * @summary 文件上传 File upload:
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public apiAppFilesUploadPost(options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .apiAppFilesUploadPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * FormData的格式上传,参数为：file:stream;type:0，代表登录页文件资源上传 Upload in the format of formdata. The parameters are: File:stream;type:0, representing upload file resources on behalf of login page
   * @summary 文件上传 File upload:
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public apiAppFilesUploadPost_1(options?: AxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .apiAppFilesUploadPost_1(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
