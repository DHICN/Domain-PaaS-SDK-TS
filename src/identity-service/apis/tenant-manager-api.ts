/* eslint-disable */
/**
 * 用户认证管理服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
// @ts-ignore
import { AddCustomTenantInput } from '../models'
// @ts-ignore
import { AddTenantInput } from '../models'
// @ts-ignore
import { DownloadTenantConfigParam } from '../models'
// @ts-ignore
import { FunctionDto } from '../models'
// @ts-ignore
import { GetSystemsOutput } from '../models'
// @ts-ignore
import { GetTenantTempConfigOutput } from '../models'
// @ts-ignore
import { GetTenantsBySysOutput } from '../models'
// @ts-ignore
import { GetTenantsOutput } from '../models'
// @ts-ignore
import { GuidStringKeyValue } from '../models'
// @ts-ignore
import { LicenseData } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { TenantPersonalizedInfoDto } from '../models'
// @ts-ignore
import { UpdateCustomTenantInput } from '../models'
// @ts-ignore
import { UpdateTenantInput } from '../models'
/**
 * TenantManagerApi - axios parameter creator
 * @export
 */
export const TenantManagerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerInitSuperAdminPost: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/initSuperAdmin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerInitSuperAdminPost_1: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/initSuperAdmin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerLicenseDatasGet: async (
      tenantNumber?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/licenseDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (tenantNumber !== undefined) {
        localVarQueryParameter['TenantNumber'] = tenantNumber
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerLicenseDatasGet_2: async (
      tenantNumber?: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/licenseDatas`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (tenantNumber !== undefined) {
        localVarQueryParameter['TenantNumber'] = tenantNumber
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerRefreshTenantGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/refreshTenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerRefreshTenantGet_3: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/refreshTenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/systems`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsGet_4: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/systems`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsWithTypeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/systemsWithType`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsWithTypeGet_5: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/systemsWithType`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantDelete: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAppTenantManagerTenantDelete', 'id', id)
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantDelete_6: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAppTenantManagerTenantDelete_6', 'id', id)
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (id !== undefined) {
        localVarQueryParameter['Id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPersonalizedinfoTenantIdGet: async (
      tenantId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tenantId' is not null or undefined
      assertParamExists(
        'apiAppTenantManagerTenantPersonalizedinfoTenantIdGet',
        'tenantId',
        tenantId,
      )
      const localVarPath = `/api/app/tenantManager/tenantPersonalizedinfo/{tenantId}`.replace(
        `{${'tenantId'}}`,
        encodeURIComponent(String(tenantId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7: async (
      tenantId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tenantId' is not null or undefined
      assertParamExists(
        'apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7',
        'tenantId',
        tenantId,
      )
      const localVarPath = `/api/app/tenantManager/tenantPersonalizedinfo/{tenantId}`.replace(
        `{${'tenantId'}}`,
        encodeURIComponent(String(tenantId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPost: async (
      addTenantInput?: AddTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPost_8: async (
      addTenantInput?: AddTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPut: async (
      updateTenantInput?: UpdateTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPut_9: async (
      updateTenantInput?: UpdateTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsBySystemIdSystemIdGet: async (
      systemId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'systemId' is not null or undefined
      assertParamExists('apiAppTenantManagerTenantsBySystemIdSystemIdGet', 'systemId', systemId)
      const localVarPath = `/api/app/tenantManager/tenantsBySystemId/{systemId}`.replace(
        `{${'systemId'}}`,
        encodeURIComponent(String(systemId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsBySystemIdSystemIdGet_10: async (
      systemId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'systemId' is not null or undefined
      assertParamExists('apiAppTenantManagerTenantsBySystemIdSystemIdGet_10', 'systemId', systemId)
      const localVarPath = `/api/app/tenantManager/tenantsBySystemId/{systemId}`.replace(
        `{${'systemId'}}`,
        encodeURIComponent(String(systemId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsGet: async (
      name?: string,
      systemId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenants`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (name !== undefined) {
        localVarQueryParameter['Name'] = name
      }

      if (systemId !== undefined) {
        localVarQueryParameter['SystemId'] = systemId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsGet_11: async (
      name?: string,
      systemId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/app/tenantManager/tenants`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (name !== undefined) {
        localVarQueryParameter['Name'] = name
      }

      if (systemId !== undefined) {
        localVarQueryParameter['SystemId'] = systemId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantAddTenantPost: async (
      addCustomTenantInput?: AddCustomTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/add-tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCustomTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantAddTenantPost_12: async (
      addCustomTenantInput?: AddCustomTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/add-tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        addCustomTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantDownloadConfigsPost: async (
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/download-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        downloadTenantConfigParam,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantDownloadConfigsPost_13: async (
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/download-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        downloadTenantConfigParam,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantFunctionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/functions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantFunctionsGet_14: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/functions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantGetTempConfigsPost: async (
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/get-temp-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        downloadTenantConfigParam,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantGetTempConfigsPost_15: async (
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/get-temp-configs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        downloadTenantConfigParam,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsByCustomGet: async (
      customId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/list-tenants/by-custom`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (customId !== undefined) {
        localVarQueryParameter['customId'] = customId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsByCustomGet_16: async (
      customId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/list-tenants/by-custom`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (customId !== undefined) {
        localVarQueryParameter['customId'] = customId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsGet: async (
      name?: string,
      customId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/list-tenants`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (name !== undefined) {
        localVarQueryParameter['Name'] = name
      }

      if (customId !== undefined) {
        localVarQueryParameter['CustomId'] = customId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsGet_17: async (
      name?: string,
      customId?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/list-tenants`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (name !== undefined) {
        localVarQueryParameter['Name'] = name
      }

      if (customId !== undefined) {
        localVarQueryParameter['CustomId'] = customId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantUpdateTenantPut: async (
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/update-tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCustomTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantUpdateTenantPut_18: async (
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tenant/update-tenant`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCustomTenantInput,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TenantManagerApi - functional programming interface
 * @export
 */
export const TenantManagerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TenantManagerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerInitSuperAdminPost(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerInitSuperAdminPost(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerInitSuperAdminPost_1(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerInitSuperAdminPost_1(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerLicenseDatasGet(
      tenantNumber?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseData>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerLicenseDatasGet(
        tenantNumber,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerLicenseDatasGet_2(
      tenantNumber?: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseData>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerLicenseDatasGet_2(tenantNumber, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerRefreshTenantGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerRefreshTenantGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerRefreshTenantGet_3(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerRefreshTenantGet_3(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerSystemsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuidStringKeyValue>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerSystemsGet(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerSystemsGet_4(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuidStringKeyValue>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerSystemsGet_4(
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerSystemsWithTypeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSystemsOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerSystemsWithTypeGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerSystemsWithTypeGet_5(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSystemsOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerSystemsWithTypeGet_5(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantDelete(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantDelete(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantDelete_6(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantDelete_6(
        id,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(
      tenantId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantPersonalizedInfoDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(
          tenantId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(
      tenantId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantPersonalizedInfoDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(
          tenantId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPost(
      addTenantInput?: AddTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantPost(
        addTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPost_8(
      addTenantInput?: AddTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantPost_8(
        addTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPut(
      updateTenantInput?: UpdateTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantPut(
        updateTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantPut_9(
      updateTenantInput?: UpdateTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantPut_9(
        updateTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantsBySystemIdSystemIdGet(
      systemId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsBySysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerTenantsBySystemIdSystemIdGet(
          systemId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(
      systemId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsBySysOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(
          systemId,
          options,
        )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantsGet(
      name?: string,
      systemId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantsGet(
        name,
        systemId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async apiAppTenantManagerTenantsGet_11(
      name?: string,
      systemId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppTenantManagerTenantsGet_11(
        name,
        systemId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantAddTenantPost(
      addCustomTenantInput?: AddCustomTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantAddTenantPost(
        addCustomTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantAddTenantPost_12(
      addCustomTenantInput?: AddCustomTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantAddTenantPost_12(
        addCustomTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantDownloadConfigsPost(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantDownloadConfigsPost(
        downloadTenantConfigParam,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantDownloadConfigsPost_13(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantDownloadConfigsPost_13(
        downloadTenantConfigParam,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantFunctionsGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FunctionDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantFunctionsGet(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantFunctionsGet_14(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FunctionDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantFunctionsGet_14(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantGetTempConfigsPost(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTenantTempConfigOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantGetTempConfigsPost(
        downloadTenantConfigParam,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantGetTempConfigsPost_15(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTenantTempConfigOutput>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantGetTempConfigsPost_15(
        downloadTenantConfigParam,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantListTenantsByCustomGet(
      customId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantListTenantsByCustomGet(
        customId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantListTenantsByCustomGet_16(
      customId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1TenantListTenantsByCustomGet_16(customId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantListTenantsGet(
      name?: string,
      customId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantListTenantsGet(
        name,
        customId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantListTenantsGet_17(
      name?: string,
      customId?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTenantsOutput>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantListTenantsGet_17(
        name,
        customId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantUpdateTenantPut(
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantUpdateTenantPut(
        updateCustomTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TenantUpdateTenantPut_18(
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TenantUpdateTenantPut_18(
        updateCustomTenantInput,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TenantManagerApi - factory interface
 * @export
 */
export const TenantManagerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TenantManagerApiFp(configuration)
  return {
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerInitSuperAdminPost(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerInitSuperAdminPost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/app/tenantManager/initSuperAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerInitSuperAdminPost_1(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerInitSuperAdminPost_1(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerLicenseDatasGet(
      tenantNumber?: number,
      options?: any,
    ): AxiosPromise<LicenseData> {
      return localVarFp
        .apiAppTenantManagerLicenseDatasGet(tenantNumber, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 生成License数据 Generate licence data
     * @param {number} [tenantNumber] 租户个数 tenant number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerLicenseDatasGet_2(
      tenantNumber?: number,
      options?: any,
    ): AxiosPromise<LicenseData> {
      return localVarFp
        .apiAppTenantManagerLicenseDatasGet_2(tenantNumber, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerRefreshTenantGet(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerRefreshTenantGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 刷新租户缓存 Refresh tenant cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerRefreshTenantGet_3(options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerRefreshTenantGet_3(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsGet(options?: any): AxiosPromise<Array<GuidStringKeyValue>> {
      return localVarFp
        .apiAppTenantManagerSystemsGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的系统 Get all the systems
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsGet_4(options?: any): AxiosPromise<Array<GuidStringKeyValue>> {
      return localVarFp
        .apiAppTenantManagerSystemsGet_4(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsWithTypeGet(options?: any): AxiosPromise<Array<GetSystemsOutput>> {
      return localVarFp
        .apiAppTenantManagerSystemsWithTypeGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取所有的系统详细信息 Get all the systems detailed information
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerSystemsWithTypeGet_5(options?: any): AxiosPromise<Array<GetSystemsOutput>> {
      return localVarFp
        .apiAppTenantManagerSystemsWithTypeGet_5(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantDelete(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerTenantDelete(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 删除租户 Delete tenant
     * @param {string} id ID id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantDelete_6(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerTenantDelete_6(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(
      tenantId: string,
      options?: any,
    ): AxiosPromise<TenantPersonalizedInfoDto> {
      return localVarFp
        .apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户个性化信息 Get tenant personalized information
     * @param {string} tenantId 租户ID tenant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(
      tenantId: string,
      options?: any,
    ): AxiosPromise<TenantPersonalizedInfoDto> {
      return localVarFp
        .apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(tenantId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPost(
      addTenantInput?: AddTenantInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiAppTenantManagerTenantPost(addTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 添加租户 Add tenant
     * @param {AddTenantInput} [addTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPost_8(
      addTenantInput?: AddTenantInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiAppTenantManagerTenantPost_8(addTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPut(
      updateTenantInput?: UpdateTenantInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerTenantPut(updateTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 修改租户信息 Update tenant information
     * @param {UpdateTenantInput} [updateTenantInput]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantPut_9(
      updateTenantInput?: UpdateTenantInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiAppTenantManagerTenantPut_9(updateTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsBySystemIdSystemIdGet(
      systemId: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsBySysOutput>> {
      return localVarFp
        .apiAppTenantManagerTenantsBySystemIdSystemIdGet(systemId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取系统下的租户 Get tenants by systerm id
     * @param {string} systemId 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(
      systemId: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsBySysOutput>> {
      return localVarFp
        .apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(systemId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsGet(
      name?: string,
      systemId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiAppTenantManagerTenantsGet(name, systemId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [systemId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    apiAppTenantManagerTenantsGet_11(
      name?: string,
      systemId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiAppTenantManagerTenantsGet_11(name, systemId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantAddTenantPost(
      addCustomTenantInput?: AddCustomTenantInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1TenantAddTenantPost(addCustomTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/tenant/add-tenant
     * @param {AddCustomTenantInput} [addCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantAddTenantPost_12(
      addCustomTenantInput?: AddCustomTenantInput,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .apiV1TenantAddTenantPost_12(addCustomTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantDownloadConfigsPost(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1TenantDownloadConfigsPost(downloadTenantConfigParam, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 下载租户初始化配置项目
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantDownloadConfigsPost_13(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .apiV1TenantDownloadConfigsPost_13(downloadTenantConfigParam, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantFunctionsGet(options?: any): AxiosPromise<Array<FunctionDto>> {
      return localVarFp.apiV1TenantFunctionsGet(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户下所有的有权限的系统功能 Get all functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantFunctionsGet_14(options?: any): AxiosPromise<Array<FunctionDto>> {
      return localVarFp
        .apiV1TenantFunctionsGet_14(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantGetTempConfigsPost(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: any,
    ): AxiosPromise<GetTenantTempConfigOutput> {
      return localVarFp
        .apiV1TenantGetTempConfigsPost(downloadTenantConfigParam, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
     * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantGetTempConfigsPost_15(
      downloadTenantConfigParam?: DownloadTenantConfigParam,
      options?: any,
    ): AxiosPromise<GetTenantTempConfigOutput> {
      return localVarFp
        .apiV1TenantGetTempConfigsPost_15(downloadTenantConfigParam, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsByCustomGet(
      customId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiV1TenantListTenantsByCustomGet(customId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 获取客户下的租户 Get tenants by custom id
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsByCustomGet_16(
      customId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiV1TenantListTenantsByCustomGet_16(customId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsGet(
      name?: string,
      customId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiV1TenantListTenantsGet(name, customId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary 查询租户列表 Query tenant list
     * @param {string} [name] 租户名称 tenant name
     * @param {string} [customId] 系统ID system id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantListTenantsGet_17(
      name?: string,
      customId?: string,
      options?: any,
    ): AxiosPromise<Array<GetTenantsOutput>> {
      return localVarFp
        .apiV1TenantListTenantsGet_17(name, customId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantUpdateTenantPut(
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1TenantUpdateTenantPut(updateCustomTenantInput, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /api/v1/tenant/update-tenant
     * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TenantUpdateTenantPut_18(
      updateCustomTenantInput?: UpdateCustomTenantInput,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1TenantUpdateTenantPut_18(updateCustomTenantInput, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TenantManagerApi - object-oriented interface
 * @export
 * @class TenantManagerApi
 * @extends {BaseAPI}
 */
export class TenantManagerApi extends BaseAPI {
  /**
   *
   * @summary /api/app/tenantManager/initSuperAdmin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerInitSuperAdminPost(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerInitSuperAdminPost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/app/tenantManager/initSuperAdmin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerInitSuperAdminPost_1(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerInitSuperAdminPost_1(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生成License数据 Generate licence data
   * @param {number} [tenantNumber] 租户个数 tenant number
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerLicenseDatasGet(tenantNumber?: number, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerLicenseDatasGet(tenantNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 生成License数据 Generate licence data
   * @param {number} [tenantNumber] 租户个数 tenant number
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerLicenseDatasGet_2(tenantNumber?: number, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerLicenseDatasGet_2(tenantNumber, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 刷新租户缓存 Refresh tenant cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerRefreshTenantGet(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerRefreshTenantGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 刷新租户缓存 Refresh tenant cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerRefreshTenantGet_3(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerRefreshTenantGet_3(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的系统 Get all the systems
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerSystemsGet(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerSystemsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的系统 Get all the systems
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerSystemsGet_4(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerSystemsGet_4(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的系统详细信息 Get all the systems detailed information
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerSystemsWithTypeGet(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerSystemsWithTypeGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取所有的系统详细信息 Get all the systems detailed information
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerSystemsWithTypeGet_5(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerSystemsWithTypeGet_5(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除租户 Delete tenant
   * @param {string} id ID id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantDelete(id: string, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除租户 Delete tenant
   * @param {string} id ID id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantDelete_6(id: string, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantDelete_6(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户个性化信息 Get tenant personalized information
   * @param {string} tenantId 租户ID tenant id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(
    tenantId: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPersonalizedinfoTenantIdGet(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户个性化信息 Get tenant personalized information
   * @param {string} tenantId 租户ID tenant id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(
    tenantId: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPersonalizedinfoTenantIdGet_7(tenantId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加租户 Add tenant
   * @param {AddTenantInput} [addTenantInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPost(
    addTenantInput?: AddTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPost(addTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 添加租户 Add tenant
   * @param {AddTenantInput} [addTenantInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPost_8(
    addTenantInput?: AddTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPost_8(addTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改租户信息 Update tenant information
   * @param {UpdateTenantInput} [updateTenantInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPut(
    updateTenantInput?: UpdateTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPut(updateTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 修改租户信息 Update tenant information
   * @param {UpdateTenantInput} [updateTenantInput]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantPut_9(
    updateTenantInput?: UpdateTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantPut_9(updateTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取系统下的租户 Get tenants by systerm id
   * @param {string} systemId 系统ID system id
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantsBySystemIdSystemIdGet(
    systemId: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantsBySystemIdSystemIdGet(systemId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取系统下的租户 Get tenants by systerm id
   * @param {string} systemId 系统ID system id
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(
    systemId: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantsBySystemIdSystemIdGet_10(systemId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询租户列表 Query tenant list
   * @param {string} [name] 租户名称 tenant name
   * @param {string} [systemId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantsGet(
    name?: string,
    systemId?: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantsGet(name, systemId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询租户列表 Query tenant list
   * @param {string} [name] 租户名称 tenant name
   * @param {string} [systemId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiAppTenantManagerTenantsGet_11(
    name?: string,
    systemId?: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiAppTenantManagerTenantsGet_11(name, systemId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/tenant/add-tenant
   * @param {AddCustomTenantInput} [addCustomTenantInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantAddTenantPost(
    addCustomTenantInput?: AddCustomTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantAddTenantPost(addCustomTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/tenant/add-tenant
   * @param {AddCustomTenantInput} [addCustomTenantInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantAddTenantPost_12(
    addCustomTenantInput?: AddCustomTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantAddTenantPost_12(addCustomTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 下载租户初始化配置项目
   * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantDownloadConfigsPost(
    downloadTenantConfigParam?: DownloadTenantConfigParam,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantDownloadConfigsPost(downloadTenantConfigParam, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 下载租户初始化配置项目
   * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantDownloadConfigsPost_13(
    downloadTenantConfigParam?: DownloadTenantConfigParam,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantDownloadConfigsPost_13(downloadTenantConfigParam, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户下所有的有权限的系统功能 Get all functions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantFunctionsGet(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantFunctionsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户下所有的有权限的系统功能 Get all functions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantFunctionsGet_14(options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantFunctionsGet_14(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
   * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantGetTempConfigsPost(
    downloadTenantConfigParam?: DownloadTenantConfigParam,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantGetTempConfigsPost(downloadTenantConfigParam, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取租户基于功能模板的临时初始化配置的minio bucket和objectname
   * @param {DownloadTenantConfigParam} [downloadTenantConfigParam]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantGetTempConfigsPost_15(
    downloadTenantConfigParam?: DownloadTenantConfigParam,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantGetTempConfigsPost_15(downloadTenantConfigParam, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取客户下的租户 Get tenants by custom id
   * @param {string} [customId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantListTenantsByCustomGet(customId?: string, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantListTenantsByCustomGet(customId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取客户下的租户 Get tenants by custom id
   * @param {string} [customId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantListTenantsByCustomGet_16(customId?: string, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantListTenantsByCustomGet_16(customId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询租户列表 Query tenant list
   * @param {string} [name] 租户名称 tenant name
   * @param {string} [customId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantListTenantsGet(name?: string, customId?: string, options?: AxiosRequestConfig) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantListTenantsGet(name, customId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 查询租户列表 Query tenant list
   * @param {string} [name] 租户名称 tenant name
   * @param {string} [customId] 系统ID system id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantListTenantsGet_17(
    name?: string,
    customId?: string,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantListTenantsGet_17(name, customId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/tenant/update-tenant
   * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantUpdateTenantPut(
    updateCustomTenantInput?: UpdateCustomTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantUpdateTenantPut(updateCustomTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /api/v1/tenant/update-tenant
   * @param {UpdateCustomTenantInput} [updateCustomTenantInput]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TenantManagerApi
   */
  public apiV1TenantUpdateTenantPut_18(
    updateCustomTenantInput?: UpdateCustomTenantInput,
    options?: AxiosRequestConfig,
  ) {
    return TenantManagerApiFp(this.configuration)
      .apiV1TenantUpdateTenantPut_18(updateCustomTenantInput, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
