/* eslint-disable */
/**
 * 插件服务
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
import { URL } from '../../sdk-helper'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'
/**
 * ScriptUploadApi - axios parameter creator
 * @export
 */
export const ScriptUploadApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 上传脚本文件
     * @param {string} scriptName
     * @param {string} AlgorithmName
     * @param {any} file
     * @param {string} [port]
     * @param {string} [ip]
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost: async (
      scriptName: string,
      AlgorithmName: string,
      file: any,
      port?: string,
      ip?: string,
      algorithmCode?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'scriptName' is not null or undefined
      assertParamExists('uploadPost', 'scriptName', scriptName)
      // verify required parameter 'AlgorithmName' is not null or undefined
      assertParamExists('uploadPost', 'AlgorithmName', AlgorithmName)
      // verify required parameter 'file' is not null or undefined
      assertParamExists('uploadPost', 'file', file)
      const localVarPath = `/upload`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      if (scriptName !== undefined) {
        localVarQueryParameter['scriptName'] = scriptName
      }

      if (AlgorithmName !== undefined) {
        localVarQueryParameter['AlgorithmName'] = AlgorithmName
      }

      if (port !== undefined) {
        localVarQueryParameter['port'] = port
      }

      if (ip !== undefined) {
        localVarQueryParameter['ip'] = ip
      }

      if (algorithmCode !== undefined) {
        localVarQueryParameter['algorithmCode'] = algorithmCode
      }

      if (file !== undefined) {
        localVarFormParams.append('file', file as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ScriptUploadApi - functional programming interface
 * @export
 */
export const ScriptUploadApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ScriptUploadApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 上传脚本文件
     * @param {string} scriptName
     * @param {string} AlgorithmName
     * @param {any} file
     * @param {string} [port]
     * @param {string} [ip]
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadPost(
      scriptName: string,
      AlgorithmName: string,
      file: any,
      port?: string,
      ip?: string,
      algorithmCode?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(
        scriptName,
        AlgorithmName,
        file,
        port,
        ip,
        algorithmCode,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ScriptUploadApi - factory interface
 * @export
 */
export const ScriptUploadApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ScriptUploadApiFp(configuration)
  return {
    /**
     *
     * @summary 上传脚本文件
     * @param {string} scriptName
     * @param {string} AlgorithmName
     * @param {any} file
     * @param {string} [port]
     * @param {string} [ip]
     * @param {string} [algorithmCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost(
      scriptName: string,
      AlgorithmName: string,
      file: any,
      port?: string,
      ip?: string,
      algorithmCode?: string,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .uploadPost(scriptName, AlgorithmName, file, port, ip, algorithmCode, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ScriptUploadApi - object-oriented interface
 * @export
 * @class ScriptUploadApi
 * @extends {BaseAPI}
 */
export class ScriptUploadApi extends BaseAPI {
  /**
   *
   * @summary 上传脚本文件
   * @param {string} scriptName
   * @param {string} AlgorithmName
   * @param {any} file
   * @param {string} [port]
   * @param {string} [ip]
   * @param {string} [algorithmCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ScriptUploadApi
   */
  public uploadPost(
    scriptName: string,
    AlgorithmName: string,
    file: any,
    port?: string,
    ip?: string,
    algorithmCode?: string,
    options?: AxiosRequestConfig,
  ) {
    return ScriptUploadApiFp(this.configuration)
      .uploadPost(scriptName, AlgorithmName, file, port, ip, algorithmCode, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
